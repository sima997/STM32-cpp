'\" t
.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "CMAKE-MODULES" "7" "Aug 05, 2025" "4.1.0" "CMake"
.SH NAME
cmake-modules \- CMake Modules Reference
.sp
The modules listed here are part of the CMake distribution.
Projects may provide further modules; their location(s)
can be specified in the \fI\%CMAKE_MODULE_PATH\fP variable.
.SH UTILITY MODULES
.sp
These modules are loaded using the \fI\%include()\fP command.
.SS AndroidTestUtilities
.sp
Added in version 3.7.

.sp
This module provides a command to create a test that pushes data needed for
testing an Android device behavior onto a connected Android device.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(AndroidTestUtilities)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B android_add_test_data
Creates a test that automatically loads specified data onto an Android
device:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
android_add_test_data(
  <test\-name>
  [FILES <files>...]
  [FILES_DEST <device\-dir>]
  [LIBS <libs>...]
  [LIBS_DEST <device\-dir>]
  DEVICE_OBJECT_STORE <device\-dir>
  DEVICE_TEST_DIR <device\-dir>
  [NO_LINK_REGEX <regexes>...]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command accepts files and libraries needed to run project\-specific
tests as well as separate destinations for each.  It will create a test
that loads the files into a device object store and link to them from the
specified destination.  The files are only uploaded if they are not
already in the object store.
.sp
On the host operating system, files and libraries are copied at build
time.  For on\-device testing, the files are loaded onto the device by the
manufactured test at run time.
.sp
This command accepts the following named parameters:
.INDENT 7.0
.TP
.B \fBFILES <files>...\fP
Zero or more files needed for testing.
.TP
.B \fBFILES_DEST <device\-dir>\fP
Absolute path where the data files are expected to be.
.TP
.B \fBLIBS <libs>...\fP
Zero or more libraries needed for testing.
.TP
.B \fBLIBS_DEST <device\-dir>\fP
Absolute path where the libraries are expected to be.
.TP
.B \fBDEVICE_OBJECT_STORE <device\-dir>\fP
Absolute path to the on\-device location where the data files are initially
stored.
.TP
.B \fBDEVICE_TEST_DIR <device\-dir>\fP
Absolute path to the root directory of the on\-device test location.
.TP
.B \fBNO_LINK_REGEX <regexes>...\fP
A list of regular expression patterns matching file names to be copied
from the object store to the test directory, instead of being symlinked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example shows how to use this module to create a test named
\fBexample_setup_test\fP that prepares data during the build phase.  This test
can then be run using \fI\%ctest(1)\fP to load the data onto the Android
device.
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(AndroidTestUtilities)

android_add_test_data(
  example_setup_test
  FILES data/protobuffer.p data/file.txt
  LIBS libs/library_1 libs/library_2
  DEVICE_OBJECT_STORE \(dq/sdcard/.ExternalData/SHA\(dq
  DEVICE_TEST_DIR \(dq/data/local/tests/example\(dq
)
.EE
.UNINDENT
.UNINDENT
.SS BundleUtilities
.sp
This module provides utility commands for assembling standalone,
bundle\-style applications with CMake, such as macOS \fB\&.app\fP bundles or
similar directory\-based application bundles on other operating systems.
.sp
Load this module in CMake installation with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(BundleUtilities)
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Do not use this module at configure time (from \fBCMakeLists.txt\fP).
Instead, include it and invoke its commands from an \fI\%install(CODE)\fP
or \fI\%install(SCRIPT)\fP\&.
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following commands:
.INDENT 0.0
.IP \(bu 2
\fI\%fixup_bundle()\fP
.IP \(bu 2
\fI\%copy_and_fixup_bundle()\fP
.IP \(bu 2
\fI\%verify_app()\fP
.IP \(bu 2
\fI\%get_bundle_main_executable()\fP
.IP \(bu 2
\fI\%get_dotapp_dir()\fP
.IP \(bu 2
\fI\%get_bundle_and_executable()\fP
.IP \(bu 2
\fI\%get_bundle_all_executables()\fP
.IP \(bu 2
\fI\%get_item_key()\fP
.IP \(bu 2
\fI\%get_item_rpaths()\fP
.IP \(bu 2
\fI\%clear_bundle_keys()\fP
.IP \(bu 2
\fI\%set_bundle_key_values()\fP
.IP \(bu 2
\fI\%get_bundle_keys()\fP
.IP \(bu 2
\fI\%copy_resolved_item_into_bundle()\fP
.IP \(bu 2
\fI\%copy_resolved_framework_into_bundle()\fP
.IP \(bu 2
\fI\%fixup_bundle_item()\fP
.IP \(bu 2
\fI\%verify_bundle_prerequisites()\fP
.IP \(bu 2
\fI\%verify_bundle_symlinks()\fP
.UNINDENT
.INDENT 0.0
.TP
.B fixup_bundle
Prepares a bundle for distribution by fixing up its internal dependencies:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
fixup_bundle(<app> <libs> <dirs> [IGNORE_ITEM <files>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command modifies the \fB<app>\fP bundle in\-place to make it
self\-contained and portable, so that it can be drag\-n\-drop copied to
another machine and run there, assuming all of the system libraries are
compatible.
.sp
This command collects all dependencies (keys) for the executables and
libraries in the bundle.  For each dependency, it copies the required
files into the bundle and adjusts them according to their own
prerequisites.  Once complete, it clears the collected keys and invokes
the \fI\%verify_app()\fP command to ensure the final bundle is truly
standalone.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<app>\fP
The path to the bundle to fix.  This can be an \fB\&.app\fP directory or
direct path to an executable.
.TP
.B \fB<libs>\fP
A list of libraries that must be fixed up, but that cannot be
automatically determined by the \fBotool\fP output analysis  (i.e.
\fBplugins\fP).  If plugins are passed to this command as this parameter,
they should be installed or copied into the bundle before calling this
command.
.TP
.B \fB<dirs>\fP
A list of paths where libraries might be found.  These paths are searched
first when a target without any path info is given.  Then standard system
locations are also searched: \fBPATH\fP, Framework locations, \fB/usr/lib\fP,
etc.
.TP
.B \fBIGNORE_ITEM <files>...\fP
Added in version 3.6.

.sp
Optional list of file names to ignore
(e.g. \fBIGNORE_ITEM \(dqvcredist_x86.exe;vcredist_x64.exe\(dq\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B copy_and_fixup_bundle
Copies the bundle and fixes up the new copied bundle in\-place:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
copy_and_fixup_bundle(<src> <dst> <libs> <dirs>)
.EE
.UNINDENT
.UNINDENT
.sp
This command makes a copy of the bundle \fB<src>\fP at location \fB<dst>\fP
and then fixes up the new copied bundle in\-place at \fB<dst>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<src>\fP
The directory of the bundle being copied.
.TP
.B \fB<dst>\fP
The destination directory of the bundle copy.
.TP
.B \fB<libs>\fP
A list of libraries that must be fixed up, but that cannot be
automatically determined by the \fBotool\fP output analysis  (i.e.
\fBplugins\fP).  If plugins are passed to this command as this parameter,
they should be installed or copied into the bundle before calling this
command.
.TP
.B \fB<dirs>\fP
A list of paths where libraries might be found.  These paths are searched
first when a target without any path info is given.  Then standard system
locations are also searched: \fBPATH\fP, Framework locations, \fB/usr/lib\fP,
etc.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B verify_app
Verifies that an application bundle appears valid based on running analysis
tools on it:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
verify_app(<app> [IGNORE_ITEM <files>...])
.EE
.UNINDENT
.UNINDENT
.sp
If the application fails verification, a \fI\%message(FATAL_ERROR)\fP
is issued, halting the installation process.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<app>\fP
The path to the application to verify.  This can be a \fB\&.app\fP directory
or a standalone executable.
.TP
.B \fBIGNORE_ITEM <files>...\fP
Added in version 3.6.

.sp
Optional list of file names to ignore
(e.g. \fBIGNORE_ITEM \(dqvcredist_x86.exe;vcredist_x64.exe\(dq\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B get_bundle_main_executable
Retrieves the main executable within a given application bundle:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_bundle_main_executable(<bundle> <result\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
The result is stored in a \fB<result\-var>\fP variable and will contain a
full path name of the bundle\(aqs main executable file, or an \fBerror:\fP
prefixed string if it could not be determined.
.UNINDENT
.INDENT 0.0
.TP
.B get_dotapp_dir
Locates the enclosing \fB\&.app\fP directory for the given executable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_dotapp_dir(<exe> <dotapp\-dir\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
This command retrieves the nearest parent dir whose name ends with \fB\&.app\fP
given the full path to an executable and stores it to the
\fB<dotapp\-dir\-var>\fP variable.  If there is no such parent dir, then it
simply retrieves the directory containing the executable.
.sp
The retrieved directory may or may not exist.
.UNINDENT
.INDENT 0.0
.TP
.B get_bundle_and_executable
Takes either a \fB\&.app\fP directory name or the name of an executable
nested inside a \fB\&.app\fP directory and retrieves the path to the \fB\&.app\fP
directory and the path to its main executable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_bundle_and_executable(<app> <bundle\-var> <executable\-var> <valid\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<app>\fP
The name of the application being processed.
.TP
.B \fB<bundle\-var>\fP
Variable name in which to store the resulting path to the \fB\&.app\fP
directory.  In case of any error, this variable will contain an error
message prefixed with string \fBerror:\fP\&.
.TP
.B \fB<executable\-var>\fP
Variable name in which to store the resulting main executable.  In case
of any error, this variable will contain an error message prefixed with
string \fBerror:\fP\&.
.TP
.B \fB<valid\-var>\fP
Variable name in which the boolean result is stored whether this command
was successful or not.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B get_bundle_all_executables
Gets all executables of a given bundle:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_bundle_all_executables(<bundle> <exes\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
This command scans \fB<bundle>\fP bundle recursively for all executable
files and stores them into a variable \fB<exes\-var>\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B get_item_key
Generates a unique key for the given item:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_item_key(<item> <key\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
Given \fB<item>\fP file name, this command generates \fB<key\-var>\fP key that
should be unique considering the set of libraries that need copying or
fixing up to make a bundle standalone.  This is essentially the file name
including extension with \fB\&.\fP replaced by \fB_\fP\&.
.sp
This key is used as a prefix for CMake variables so that a set of
variables can be associated with a given item based on its key.
.UNINDENT
.INDENT 0.0
.TP
.B get_item_rpaths
Gets RPATHS (run\-time search paths) for the given item:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_item_rpaths(<item> <rpaths\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
This command gets RPATHS of the \fB<item>\fP file name and stores them to
the variable with provided name \fB<rpaths\-var>\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B clear_bundle_keys
Clears all variables associated with keys:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
clear_bundle_keys(<keys\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
This command loops over the \fB<keys\-var>\fP list of keys, clearing all the
variables associated with each key.  After the loop, it clears the list of
keys itself.  This command should be called after the
\fI\%get_bundle_keys()\fP command, when done working with a list of keys.
.UNINDENT
.INDENT 0.0
.TP
.B set_bundle_key_values
Adds a key to the list of keys:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_bundle_key_values(
  <keys\-var>
  <context>
  <item>
  <exepath>
  <dirs>
  <copyflag>
  [<rpaths>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command adds the \fB<keys\-var>\fP key to the list (if necessary) for
the given item.  If added, also set all the variables associated with
that key.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<keys\-var>\fP
Variable name holding the name of the key to be added to the list for
the given item.
.TP
.B \fB<context>\fP
The path to the top level loading path used for \fB@loader_path\fP
replacement on Apple operating systems.  When resolving item,
\fB@loader_path\fP references will be resolved relative to the directory
of the given context value (presumably another library).
.TP
.B \fB<item>\fP
The item for which to add the key.
.TP
.B \fB<exepath>\fP
The path to the top level executable used for \fB@executable_path\fP
replacement on Apple operating systems.
.TP
.B \fB<dirs>\fP
A list of paths where libraries might be found.  These paths are searched
first when a target without any path info is given.  Then standard system
locations are also searched: \fBPATH\fP, Framework locations, \fB/usr/lib\fP,
etc.
.TP
.B \fB<copyflag>\fP
If set to \fB1\fP library symlink structure will be preserved.
.TP
.B \fB<rpaths>\fP
Optional run\-time search paths for an executable file or library to help
find files.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B get_bundle_keys
Gets bundle keys:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_bundle_keys(<app> <libs> <dirs> <keys\-var> [IGNORE_ITEM <files>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command loops over all the executable and library files within
\fB<app>\fP bundle (and given as extra \fB<libs>\fP) and accumulate a list of
keys representing them.  It sets values associated with each key such
that they can be looped over all of them and copies prerequisite libs into
the bundle and then does appropriate \fBinstall_name_tool\fP fixups.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<app>\fP
The path to the bundle to fix.  This can be an \fB\&.app\fP directory or
direct path to an executable.
.TP
.B \fB<libs>\fP
A list of libraries that must be fixed up, but that cannot be
automatically determined by the \fBotool\fP output analysis  (i.e.
\fBplugins\fP).  If plugins are passed to this command as this parameter,
they should be installed or copied into the bundle before calling this
command.
.TP
.B \fB<dirs>\fP
A list of paths where libraries might be found.  These paths are searched
first when a target without any path info is given.  Then standard system
locations are also searched: \fBPATH\fP, Framework locations, \fB/usr/lib\fP,
etc.
.TP
.B \fB<keys\-var>\fP
Variable name holding a list of keys that represent all executable and
library files within the bundle.
.TP
.B \fBIGNORE_ITEM <files>...\fP
Added in version 3.6.

.sp
Optional list of file names to ignore
(e.g. \fBIGNORE_ITEM \(dqvcredist_x86.exe;vcredist_x64.exe\(dq\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B copy_resolved_item_into_bundle
Copies a resolved item into the bundle if necessary:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
copy_resolved_item_into_bundle(<resolved\-item> <resolved\-embedded\-item>)
.EE
.UNINDENT
.UNINDENT
.sp
Copy is not necessary, if the \fB<resolved\-item>\fP is \(dqthe same as\(dq the
\fB<resolved\-embedded\-item>\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B copy_resolved_framework_into_bundle
Copies a resolved framework into the bundle if necessary:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
copy_resolved_framework_into_bundle(<resolved\-item> <resolved\-embedded\-item>)
.EE
.UNINDENT
.UNINDENT
.sp
Copy is not necessary, if the \fB<resolved\-item>\fP is \(dqthe same as\(dq the
\fB<resolved\-embedded\-item>\fP\&.
.sp
The following variables can be set before invoking this command:
.INDENT 7.0
.TP
.B \fBBU_COPY_FULL_FRAMEWORK_CONTENTS\fP
By default, this variable is not set.  If full frameworks should be
embedded in the bundles, set this variable to boolean true before calling
the \fI\%fixup_bundle()\fP command.  By default, this command copies
the framework dylib itself plus the framework \fBResources\fP directory.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B fixup_bundle_item
Fixes up bundle item:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
fixup_bundle_item(<resolved\-embedded\-item> <exepath> <dirs>)
.EE
.UNINDENT
.UNINDENT
.sp
This command gets the direct/non\-system prerequisites of the
\fB<resolved\-embedded\-item>\fP and for each prerequisite, it changes the
way it is referenced to the value of the \fB_EMBEDDED_ITEM\fP keyed variable
for that prerequisite.  Most likely changing to an \fB@executable_path\fP
style reference.
.sp
This command requires that the \fB<resolved\-embedded\-item>\fP be \fBinside\fP
the bundle already.  In other words, if plugins are passed to
\fI\%fixup_bundle()\fP command as its \fB<libs>\fP parameter, they should
be installed or copied into the bundle before calling the
\fI\%fixup_bundle()\fP command.
.sp
Also, it changes the id of the item being fixed up to its own
\fB_EMBEDDED_ITEM\fP value.
.sp
Changes are accumulated in a local variable and \fIone\fP call is made to
\fBinstall_name_tool\fP command\-line tool at the end of this command with
all the changes at once.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<resolved\-embedded\-item>\fP
The bundle item to be fixed up.
.TP
.B \fB<exepath>\fP
The path to the top level executable used for \fB@executable_path\fP
replacement on Apple operating systems.
.TP
.B \fB<dirs>\fP
A list of paths where libraries might be found.  These paths are searched
first when a target without any path info is given.  Then standard system
locations are also searched: \fBPATH\fP, Framework locations, \fB/usr/lib\fP,
etc.
.UNINDENT
.sp
The following variables can be set before invoking this command:
.INDENT 7.0
.TP
.B \fBBU_CHMOD_BUNDLE_ITEMS\fP
If this variable is set to boolean true value then bundle items will be
marked writable before \fBinstall_name_tool\fP tool tries to change them.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B verify_bundle_prerequisites
Verifies that the sum of all prerequisites of all files inside the
bundle are contained within the bundle or are \fBsystem\fP libraries,
presumed to exist everywhere:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
verify_bundle_prerequisites(
  <bundle>
  <result\-var>
  <info\-var>
  [IGNORE_ITEM <files>...]
)
.EE
.UNINDENT
.UNINDENT
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<bundle>\fP
Name of the bundle being verified.
.TP
.B \fB<result\-var>\fP
Name of the variable in which to store a boolean result of whether a
verification was successful.
.TP
.B \fB<info\-var>\fP
Name of the variable holding any informational messages produced by the
verification.
.TP
.B \fBIGNORE_ITEM <files>...\fP
Added in version 3.6.

.sp
Optional list of file names to ignore
(e.g. \fBIGNORE_ITEM \(dqvcredist_x86.exe;vcredist_x64.exe\(dq\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B verify_bundle_symlinks
Verifies that any symlinks found in the specified bundle point to other
files that are already also in the bundle:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
verify_bundle_symlinks(<bundle> <result\-var> <info\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
Anything that points to an external file causes this command to fail the
verification.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<bundle>\fP
Name of the bundle being verified.
.TP
.B \fB<result\-var>\fP
Name of the variable in which to store a boolean result of whether a
verification was successful.
.TP
.B \fB<info\-var>\fP
Name of the variable holding any informational messages produced by the
verification.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Using this module inside the installation code that is executed at the
installation phase:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# ...

install(CODE \(dq
  include(BundleUtilities)
  set(BU_CHMOD_BUNDLE_ITEMS TRUE)
  fixup_bundle(
    \e\(dq${fixup_exe}\e\(dq
    \e\(dq${plugins}\e\(dq
    \e\(dq${bin_dir};${library_dir};${binary_dir}\e\(dq
  )
\(dq)
.EE
.UNINDENT
.UNINDENT
.SS CheckCCompilerFlag
.sp
This module provides a command to check whether the C compiler supports a
given flag.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCCompilerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_c_compiler_flag
Checks once whether the C compiler supports a given flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_c_compiler_flag(<flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<flag>\fP is accepted by the C compiler
without producing a diagnostic message.  Multiple flags can be specified
in one argument as a string using a \fI\%semicolon\-separated list\fP\&.
.sp
The result of the check is stored in the internal cache variable specified
by \fB<variable>\fP, with boolean true for success and boolean false for
failure.
.sp
A successful result only indicates that the compiler did not report an
error when given the flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check support
for the C compiler flag \fB\-fno\-optimize\-strlen\fP, which disables
optimizations related to the \fBstrlen()\fP C function in GCC and Clang
compilers.  The result of the check is stored in the internal cache
variable \fBHAVE_FNO_OPTIMIZE_STRLEN\fP, and the flag is conditionally enabled
using the \fI\%target_compile_options()\fP command.  The
\fI\%$<COMPILE_LANGUAGE:...>\fP generator
expression ensures that the flag is added only to \fBC\fP source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCCompilerFlag)
check_c_compiler_flag(\-fno\-optimize\-strlen HAVE_FNO_OPTIMIZE_STRLEN)

if(HAVE_FNO_OPTIMIZE_STRLEN)
  target_compile_options(
    example
    PRIVATE $<$<COMPILE_LANGUAGE:C>:\-fno\-optimize\-strlen>
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckCompilerFlag\fP module for a more general command to check
whether a compiler flag is supported.
.UNINDENT
.SS CheckCompilerFlag
.sp
Added in version 3.19.

.sp
This module provides a command to check whether the compiler supports a given
flag.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCompilerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_compiler_flag
Checks once whether the compiler supports a given flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_compiler_flag(<lang> <flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<flag>\fP is accepted by the \fB<lang>\fP
compiler without producing a diagnostic message.  The result of the check
is stored in the internal cache variable specified by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<lang>\fP
The language of the compiler used for the check.  Supported languages
are: \fBC\fP, \fBCXX\fP, \fBCUDA\fP, \fBFortran\fP, \fBHIP\fP, \fBISPC\fP, \fBOBJC\fP,
and \fBOBJCXX\fP, and \fBSwift\fP\&.
.sp
Added in version 3.21: Support for \fBHIP\fP language.

.sp
Added in version 3.26: Support for \fBSwift\fP language.

.TP
.B \fB<flag>\fP
Compiler flag(s) to check.  Multiple flags can be specified in one
argument as a string using a \fI\%semicolon\-separated list\fP\&.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.UNINDENT
.sp
A successful result only indicates that the compiler did not report an
error when given the flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check support
for the C compiler flag \fB\-fno\-optimize\-strlen\fP, which disables
optimizations related to the \fBstrlen()\fP C function in GCC and Clang
compilers.  The result of the check is stored in the internal cache
variable \fBHAVE_FNO_OPTIMIZE_STRLEN\fP, and the flag is conditionally enabled
using the \fI\%target_compile_options()\fP command.  The
\fI\%$<COMPILE_LANGUAGE:...>\fP generator
expression ensures that the flag is added only to \fBC\fP source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCompilerFlag)
check_compiler_flag(C \-fno\-optimize\-strlen HAVE_FNO_OPTIMIZE_STRLEN)

if(HAVE_FNO_OPTIMIZE_STRLEN)
  target_compile_options(
    example
    PRIVATE $<$<COMPILE_LANGUAGE:C>:\-fno\-optimize\-strlen>
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckLinkerFlag\fP module to check whether a linker flag is
supported by the compiler.
.UNINDENT
.SS CheckCSourceCompiles
.sp
This module provides a command to check whether a C source can be built.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCSourceCompiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_c_source_compiles
Checks once whether the given C source code can be built:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_c_source_compiles(<code> <variable> [FAIL_REGEX <regexes>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the source supplied in \fB<code>\fP can be
compiled (and linked into an executable).  The result of the check is
stored in the internal cache variable specified by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<code>\fP
C source code to check.  This must be an entire program, as written in
a file containing the body block.  All symbols used in the source code
are expected to be declared as usual in their corresponding headers.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.TP
.B \fBFAIL_REGEX <regexes>...\fP
If one or more regular expression patterns are provided, then failure is
determined by checking if anything in the compiler output matches any of
the specified regular expressions.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Checking whether C source code containing SSE2 intrinsic can be compiled
and linked:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCSourceCompiles)

check_c_source_compiles(\(dq
  #include <emmintrin.h>
  int main(void)
  {
    __m128d a = _mm_setzero_pd();
    (void)a;
    return 0;
  }
\(dq PROJECT_HAVE_SSE2_INTRINSICS)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module for a more general command to
check whether source can be built.
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module to check whether source can be built
and run.
.UNINDENT
.SS CheckCSourceRuns
.sp
This module provides a command to check whether a C source can be built and
run.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCSourceRuns)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_c_source_runs
Checks once whether the given C source code compiles and links into an
executable that can subsequently be run:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_c_source_runs(<code> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
The C source supplied in \fB<code>\fP must contain at least a \fBmain()\fP
function.  The result of the check is stored in the internal cache variable
specified by \fB<variable>\fP\&.  If the code builds and runs with exit code
\fB0\fP, success is indicated by a boolean true value.  Failure to build or
run is indicated by a boolean false value, such as an empty string or an
error message.
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check whether
the C source code is supported and operational at runtime.  The result of
the check is stored in the internal cache variable \fBHAVE_NORETURN\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCSourceRuns)

check_c_source_runs(\(dq
  #include <stdlib.h>
  #include <stdnoreturn.h>
  noreturn void f(){ exit(0); }
  int main(void) { f(); return 1; }
\(dq HAVE_NORETURN)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module for a more general command syntax.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be built.
.UNINDENT
.SS CheckCXXCompilerFlag
.sp
This module provides a command to check whether the C++ compiler supports a
given flag.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXCompilerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_cxx_compiler_flag
Checks once whether the C++ compiler supports a given flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_cxx_compiler_flag(<flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<flag>\fP is accepted by the \fBCXX\fP
compiler without producing a diagnostic message.  Multiple flags can be
specified in one argument as a string using a \fI\%semicolon\-separated
list\fP\&.
.sp
The result of the check is stored in the internal cache variable specified
by \fB<variable>\fP, with boolean true for success and boolean false for
failure.
.sp
A successful result only indicates that the compiler did not report an
error when given the flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check
the C++ compiler flag \fB\-fsycl\fP\&.  The result of the check is stored in the
internal cache variable \fBHAVE_FSYCL_FLAG\fP, and the flag is conditionally
enabled using the \fI\%target_compile_options()\fP command.  The
\fI\%$<COMPILE_LANGUAGE:...>\fP generator
expression ensures that the flag is added only to \fBCXX\fP source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(\-fsycl HAVE_FSYCL_FLAG)

if(HAVE_FSYCL_FLAG)
  target_compile_options(
    example
    PRIVATE $<$<COMPILE_LANGUAGE:CXX>:\-fsycl>
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckCompilerFlag\fP module for a more general command to check
whether a compiler flag is supported.
.UNINDENT
.SS CheckCXXSourceCompiles
.sp
This module provides a command to check whether a C++ source can be built.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXSourceCompiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_cxx_source_compiles
Checks once whether the given C++ source code can be built:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_cxx_source_compiles(<code> <variable> [FAIL_REGEX <regexes>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the source supplied in \fB<code>\fP can be
compiled (and linked into an executable).  The result of the check is
stored in the internal cache variable specified by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<code>\fP
C++ source code to check.  This must be an entire program, as written
in a file containing the body block.  All symbols used in the source code
are expected to be declared as usual in their corresponding headers.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.TP
.B \fBFAIL_REGEX <regexes>...\fP
If one or more regular expression patterns are provided, then failure is
determined by checking if anything in the compiler output matches any of
the specified regular expressions.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to check whether the C++ compiler
supports a specific language feature.  In this case, the check verifies if
the compiler supports \fBC++11\fP lambda expressions.  The result is stored
in the internal cache variable \fBHAVE_CXX11_LAMBDAS\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXSourceCompiles)

check_cxx_source_compiles(\(dq
  int main()
  {
    auto lambda = []() { return 42; };
    return lambda();
  }
\(dq HAVE_CXX11_LAMBDAS)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module for a more general command to
check whether source can be built.
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module to check whether source can be built
and run.
.UNINDENT
.SS CheckCXXSourceRuns
.sp
This module provides a command to check whether a C++ source can be built
and run.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXSourceRuns)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_cxx_source_runs
Checks once whether the given C++ source code compiles and links into an
executable that can subsequently be run:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_cxx_source_runs(<code> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
The C++ source supplied in \fB<code>\fP must contain at least a \fBmain()\fP
function.  The result of the check is stored in the internal cache variable
specified by \fB<variable>\fP\&.  If the code builds and runs with exit code
\fB0\fP, success is indicated by a boolean true value.  Failure to build or
run is indicated by a boolean false value, such as an empty string or an
error message.
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to check whether the C++ standard
library is functional and \fBstd::vector\fP works at runtime.  If the source
compiles, links, and runs successfully, internal cache variable
\fBHAVE_WORKING_STD_VECTOR\fP will be set to boolean true value.  Code is
supplied using \fI\%Bracket Argument\fP for easier embedded quotes handling:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXSourceRuns)

check_cxx_source_runs([[
  #include <iostream>
  #include <vector>

  int main()
  {
    std::vector<int> v = {1, 2, 3};
    if (v.size() != 3) return 1;
    std::cout << \(dqVector works correctly.\(dq << std::endl;
    return 0;
  }
]] HAVE_WORKING_STD_VECTOR)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module for a more general command syntax.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be built.
.UNINDENT
.SS CheckCXXSymbolExists
.sp
This module provides a command to check whether a C++ symbol exists.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXSymbolExists)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_cxx_symbol_exists
Checks once whether a symbol exists as a function, variable, or preprocessor
macro in C++:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_cxx_symbol_exists(<symbol> <headers> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks whether the \fB<symbol>\fP is available after including
the specified header file(s) \fB<headers>\fP, and stores the result in the
internal cache variable \fB<variable>\fP\&.  Multiple header files can be
specified in one argument as a string using a
\fI\%semicolon\-separated list\fP\&.
.sp
If the header files define the symbol as a macro, it is considered
available and assumed to work.  If the symbol is declared as a function
or variable, the check also ensures that it links successfully
(i.e., the symbol must exist in a linked library or object file).
.sp
Symbols that are types, enum values, or C++ templates are not
recognized.  For those, consider using the \fI\%CheckTypeSize\fP or
\fI\%CheckSourceCompiles\fP module instead.
.sp
This command is intended to check symbols as they appear in C++.  For C
symbols, use the \fI\%CheckSymbolExists\fP module instead.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command is unreliable for symbols that are (potentially) overloaded
functions.  Since there is no reliable way to predict whether
a given function in the system environment may be defined as an
overloaded function or may be an overloaded function on other systems
or will become so in the future, it is generally advised to use the
\fI\%CheckSourceCompiles\fP module for checking any function symbol
(unless it is certain the checked function is not overloaded on other
systems or will not be so in the future).
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to check for the presence of a
preprocessor macro \fBSEEK_SET\fP and the C++ function \fBstd::fopen()\fP from
the \fB<cstdio>\fP header using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCXXSymbolExists)

# Check for macro SEEK_SET
check_cxx_symbol_exists(SEEK_SET \(dqcstdio\(dq HAVE_SEEK_SET)

# Check for function std::fopen
check_cxx_symbol_exists(std::fopen \(dqcstdio\(dq HAVE_STD_FOPEN)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSymbolExists\fP module to check whether a C symbol exists.
.UNINDENT
.SS CheckFortranCompilerFlag
.sp
Added in version 3.3.

.sp
This module provides a command to check whether the Fortran compiler supports
a given flag.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranCompilerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_fortran_compiler_flag
Checks once whether the Fortran compiler supports a given flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_fortran_compiler_flag(<flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<flag>\fP is accepted by the Fortran
compiler without producing a diagnostic message.  Multiple flags can be
specified in one argument as a string using a \fI\%semicolon\-separated list\fP\&.
.sp
The result of the check is stored in the internal cache variable specified
by \fB<variable>\fP, with boolean true for success and boolean false for
failure.
.sp
A successful result only indicates that the compiler did not report an
error when given the flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check
the Fortran compiler flag \fB\-fallow\-argument\-mismatch\fP\&.  The result of the
check is stored in the internal cache variable \fBHAVE_FORTRAN_FLAG\fP, and
the flag is conditionally enabled using the \fI\%target_compile_options()\fP
command.  The \fI\%$<COMPILE_LANGUAGE:...>\fP
generator expression ensures that the flag is added only to \fBFortran\fP
source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranCompilerFlag)
check_fortran_compiler_flag(\-fallow\-argument\-mismatch HAVE_FORTRAN_FLAG)

if(HAVE_FORTRAN_FLAG)
  target_compile_options(
    example
    PRIVATE $<$<COMPILE_LANGUAGE:Fortran>:\-fallow\-argument\-mismatch>
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckCompilerFlag\fP module for a more general command to check
whether a compiler flag is supported.
.UNINDENT
.SS CheckFortranFunctionExists
.sp
This module provides a command to check whether a Fortran function exists.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranFunctionExists)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_fortran_function_exists
Checks once whether a Fortran function exists:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_fortran_function_exists(<function> <variable>)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<function>\fP
The name of the Fortran function.
.TP
.B \fB<variable>\fP
The name of the variable in which to store the check result.  This
variable will be created as an internal cache variable.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command does not detect functions provided by Fortran modules.  In
general, it is recommended to use \fI\%CheckSourceCompiles\fP instead
to determine whether a Fortran function or subroutine is available.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Isolated Check With Linked Libraries
.sp
In the following example, this module is used in combination with the
\fI\%CMakePushCheckState\fP module to temporarily modify the required
linked libraries (via \fBCMAKE_REQUIRED_LIBRARIES\fP) and verify whether the
Fortran function \fBdgesv\fP is available for linking.  The result is stored
in the internal cache variable \fBPROJECT_HAVE_DGESV\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranFunctionExists)
include(CMakePushCheckState)

find_package(LAPACK)

if(TARGET LAPACK::LAPACK)
  cmake_push_check_state(RESET)

  set(CMAKE_REQUIRED_LIBRARIES LAPACK::LAPACK)
  check_fortran_function_exists(dgesv PROJECT_HAVE_DGESV)

  cmake_pop_check_state()
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckFunctionExists\fP module to check whether a C function
exists.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether source code
can be compiled.
.UNINDENT
.SS CheckFortranSourceCompiles
.sp
Added in version 3.1.

.sp
This module provides a command to check whether a Fortran source can be
built.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranSourceCompiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_fortran_source_compiles
Checks once whether the given Fortran source code can be built:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_fortran_source_compiles(
  <code>
  <variable>
  [FAIL_REGEX <regexes>...]
  [SRC_EXT <extension>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the source supplied in \fB<code>\fP can be
compiled (and linked into an executable).  The result of the check is
stored in the internal cache variable specified by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<code>\fP
Fortran source code to check.  This must be an entire program, as
written in a file containing the body block.  All symbols used in the
source code are expected to be declared as usual in their corresponding
headers.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.TP
.B \fBFAIL_REGEX <regexes>...\fP
If this option is provided with one or more regular expressions, then
failure is determined by checking if anything in the compiler output
matches any of the specified regular expressions.
.TP
.B \fBSRC_EXT <extension>\fP
Added in version 3.7.

.sp
By default, the test source file used for the check will be given a
\fB\&.F\fP file extension.  This option can be used to override this with
\fB\&.<extension>\fP instead \- \fB\&.F90\fP is a typical choice.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Checking whether the Fortran compiler supports the \fBpure\fP procedure
attribute:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranSourceCompiles)

check_fortran_source_compiles(\(dq
  pure subroutine foo()
  end subroutine
  program test
    call foo()
  end
\(dq HAVE_PURE SRC_EXT \(dqF90\(dq)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module for a more general command to
check whether source can be built.
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module to check whether source can be built
and run.
.UNINDENT
.SS CheckFortranSourceRuns
.sp
Added in version 3.14.

.sp
This module provides a command to check whether a Fortran source can be built
and run.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranSourceRuns)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_fortran_source_runs
Checks once whether the given Fortran source compiles and links into an
executable that can subsequently be run.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_fortran_source_runs(<code> <variable> [SRC_EXT <extension>])
.EE
.UNINDENT
.UNINDENT
.sp
The Fortran source supplied in \fB<code>\fP must contain a Fortran \fBprogram\fP
unit.  The result of the check is stored in the internal cache variable
specified by \fB<variable>\fP\&.  If the code builds and runs with exit code
\fB0\fP, success is indicated by a boolean true value.  Failure to build or
run is indicated by a boolean false value, such as an empty string or an
error message.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBSRC_EXT <extension>\fP
By default, the internal test source file used for the check will be
given a \fB\&.F90\fP file extension.  This option can be used to change the
extension to \fB\&.<extension>\fP instead.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example shows how to use this module to check whether a Fortran
source code runs and store the result of the check in an internal cache
variable \fBHAVE_COARRAY\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFortranSourceRuns)

check_fortran_source_runs([[
  program test
  real :: x[*]
  call co_sum(x)
  end program
]] HAVE_COARRAY)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module for a more general command syntax.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be built.
.UNINDENT
.SS CheckFunctionExists
.sp
This module provides a command to check whether a C function exists.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFunctionExists)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_function_exists
Checks once whether a C function can be linked from system libraries:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_function_exists(<function> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks whether the \fB<function>\fP is provided by libraries
on the system, and stores the result in an internal cache variable
\fB<variable>\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Prefer using \fI\%CheckSymbolExists\fP or \fI\%CheckSourceCompiles\fP
instead of this command, for the following reasons:
.INDENT 0.0
.IP \(bu 2
\fBcheck_function_exists()\fP can\(aqt detect functions that are inlined
in headers or defined as preprocessor macros.
.IP \(bu 2
\fBcheck_function_exists()\fP can\(aqt detect anything in the 32\-bit
versions of the Win32 API, because of a mismatch in calling conventions.
.IP \(bu 2
\fBcheck_function_exists()\fP only verifies linking, it does not verify
that the function is declared in system headers.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Basic Usage
.sp
In the following example, a check is performed to determine whether the
linker sees the C function \fBfopen()\fP, and the result is stored in the
\fBHAVE_FOPEN\fP internal cache variable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFunctionExists)

check_function_exists(fopen HAVE_FOPEN)
.EE
.UNINDENT
.UNINDENT
.SS Example: Missing Declaration
.sp
As noted above, the \fI\%CheckSymbolExists\fP module is preferred for
checking C functions, since it also verifies whether the function is
declared or defined as a macro.  In the following example, this module is
used to check an edge case where a function may not be declared in system
headers.  For instance, on macOS, the \fBfdatasync()\fP function may be
available in the C library, but its declaration is not provided in the
\fBunistd.h\fP system header.
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckFunctionExists)
include(CheckSymbolExists)

check_symbol_exists(fdatasync \(dqunistd.h\(dq HAVE_FDATASYNC)

# Check if fdatasync() is available in the C library.
if(NOT HAVE_FDATASYNC)
  check_function_exists(fdatasync HAVE_FDATASYNC_WITHOUT_DECL)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
In such a case, the project can provide its own declaration if missing:
.sp
\fBexample.c\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#ifdef HAVE_FDATASYNC_WITHOUT_DECL
  extern int fdatasync(int);
#endif
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSymbolExists\fP module to check whether a C symbol exists.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be compiled.
.IP \(bu 2
The \fI\%CheckFortranFunctionExists\fP module to check whether a
Fortran function exists.
.UNINDENT
.SS CheckIncludeFileCXX
.sp
This module provides a command to check a C++ header file.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFileCXX)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_include_file_cxx
Checks once whether a header file can be included in C++ code:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_include_file_cxx(<include> <variable> [<flags>])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once whether the given \fB<include>\fP header file
exists and can be included in a \fBCXX\fP source file.  The result of the
check is stored in an internal cache variable named \fB<variable>\fP\&.  The
optional third argument may be used to add additional compilation flags
to the check (or use the \fBCMAKE_REQUIRED_FLAGS\fP variable below).
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.sp
Added in version 3.12: The \fBCMAKE_REQUIRED_LIBRARIES\fP variable, if policy \fI\%CMP0075\fP is
set to \fBNEW\fP\&.

.UNINDENT
.SS Examples
.sp
Checking whether the \fBC++23\fP header \fB<stdfloat>\fP exists and storing the
check result in the \fBHAVE_STDFLOAT_HEADER\fP cache variable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFileCXX)

check_include_file_cxx(stdfloat HAVE_STDFLOAT_HEADER)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckIncludeFile\fP module to check for single C header.
.IP \(bu 2
The \fI\%CheckIncludeFiles\fP module to check for one or more C or
C++ headers at once.
.UNINDENT
.SS CheckIncludeFile
.sp
This module provides a command to check C header file.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFile)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_include_file
Checks once whether a header file can be included in C code:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_include_file(<include> <variable> [<flags>])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once whether the given \fB<include>\fP header file
exists and can be included in a C source file.  The result of the check
is stored in an internal cache variable named \fB<variable>\fP\&.  The
optional third argument may be used to add additional compilation flags
to the check (or use the \fBCMAKE_REQUIRED_FLAGS\fP variable below).
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.sp
Added in version 3.12: The \fBCMAKE_REQUIRED_LIBRARIES\fP variable, if policy \fI\%CMP0075\fP is
set to \fBNEW\fP\&.

.UNINDENT
.SS Examples
.SS Example: Checking C Header
.sp
Checking whether the C header \fB<unistd.h>\fP exists and storing the check
result in the \fBHAVE_UNISTD_H\fP cache variable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFile)

check_include_file(unistd.h HAVE_UNISTD_H)
.EE
.UNINDENT
.UNINDENT
.SS Example: Isolated Check
.sp
In the following example, this module is used in combination with the
\fI\%CMakePushCheckState\fP module to temporarily modify the required
compile definitions (via \fBCMAKE_REQUIRED_DEFINITIONS\fP) and verify whether
the C header \fBucontext.h\fP is available.  The result is stored
in the internal cache variable \fBHAVE_UCONTEXT_H\fP\&.
.sp
For example, on macOS, the \fBucontext\fP API is deprecated, and headers may
be hidden unless certain feature macros are defined.  In particular,
defining \fB_XOPEN_SOURCE\fP (without a value) can expose the necessary
symbols without enabling broader POSIX or SUS (Single Unix Specification)
features (values 500 or greater).
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFile)
include(CMakePushCheckState)

cmake_push_check_state(RESET)
  if(CMAKE_SYSTEM_NAME STREQUAL \(dqDarwin\(dq)
    set(CMAKE_REQUIRED_DEFINITIONS \-D_XOPEN_SOURCE)
  endif()

  check_include_files(ucontext.h HAVE_UCONTEXT_H)
cmake_pop_check_state()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckIncludeFileCXX\fP module to check for single C++ header.
.IP \(bu 2
The \fI\%CheckIncludeFiles\fP module to check for one or more C or
C++ headers at once.
.UNINDENT
.SS CheckIncludeFiles
.sp
This module provides a command to check one or more C/C++ header files.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_include_files
Checks once whether one or more header files can be included together in
source code:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_include_files(<includes> <variable> [LANGUAGE <language>])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once whether the given \fB<includes>\fP list of header
files exist and can be included together in a C or C++ source file.  The
result of the check is stored in an internal cache variable named
\fB<variable>\fP\&.  Specify the \fB<includes>\fP argument as a
\fI\%semicolon\-separated list\fP of header file
names.
.sp
If \fBLANGUAGE\fP is set, the specified compiler will be used to perform the
check.  Acceptable values are \fBC\fP and \fBCXX\fP\&.  If not set, the C
compiler will be used if enabled.  If the C compiler is not enabled, the
C++ compiler will be used if enabled.
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.sp
Added in version 3.12: The \fBCMAKE_REQUIRED_LIBRARIES\fP variable, if policy \fI\%CMP0075\fP is
set to \fBNEW\fP\&.

.UNINDENT
.SS Examples
.sp
Checking one or more C headers and storing the check result in cache
variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFiles)

check_include_files(sys/socket.h HAVE_SYS_SOCKET_H)

if(HAVE_SYS_SOCKET_H)
  # The <net/if.h> header on Darwin and BSD\-like systems is not self\-contained
  # and also requires <sys/socket.h>
  check_include_files(\(dqsys/socket.h;net/if.h\(dq HAVE_NET_IF_H)
else()
  check_include_files(net/if.h HAVE_NET_IF_H)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
The \fBLANGUAGE\fP option can be used to specify which compiler to use.  For
example, checking multiple \fBC++\fP headers, when both \fBC\fP and \fBCXX\fP
languages are enabled in the project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIncludeFiles)

check_include_files(\(dqheader_1.hpp;header_2.hpp\(dq HAVE_HEADERS LANGUAGE CXX)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckIncludeFile\fP module to check for a single C header.
.IP \(bu 2
The \fI\%CheckIncludeFileCXX\fP module to check for a single C++ header.
.UNINDENT
.SS CheckIPOSupported
.sp
Added in version 3.9.

.sp
This module provides a command to check whether the compiler supports
interprocedural optimization (IPO/LTO).
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIPOSupported)
.EE
.UNINDENT
.UNINDENT
.sp
Interprocedural optimization is a compiler technique that performs
optimizations across translation units (i.e., across source files), allowing
the compiler to analyze and optimize the entire program as a whole rather
than file\-by\-file.  This can improve performance by enabling more aggressive
inlining and dead code elimination.  When these optimizations are applied at
link time, the process is typically referred to as link\-time optimization
(LTO), which is a common form of IPO.
.sp
In CMake, interprocedural optimization can be enabled on a per\-target basis
using the \fI\%INTERPROCEDURAL_OPTIMIZATION\fP target property, or
for all targets in the current scope using the
\fI\%CMAKE_INTERPROCEDURAL_OPTIMIZATION\fP variable.
.sp
Use this module before enabling the interprocedural optimization on targets
to ensure the compiler supports IPO/LTO.
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_ipo_supported
Checks whether the compiler supports interprocedural optimization (IPO/LTO):
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_ipo_supported(
  [RESULT <result\-var>]
  [OUTPUT <output\-var>]
  [LANGUAGES <lang>...]
)
.EE
.UNINDENT
.UNINDENT
.sp
Options are:
.INDENT 7.0
.TP
.B \fBRESULT <result\-var>\fP
Set \fB<result\-var>\fP variable to \fBYES\fP if IPO is supported by the
compiler and \fBNO\fP otherwise.  If this option is not given then
the command will issue a fatal error if IPO is not supported.
.TP
.B \fBOUTPUT <output\-var>\fP
Set \fB<output\-var>\fP variable with details about any error.
.TP
.B \fBLANGUAGES <lang>...\fP
Specify languages whose compilers to check.
.sp
The following languages are supported:
.INDENT 7.0
.IP \(bu 2
\fBC\fP
.IP \(bu 2
\fBCXX\fP
.IP \(bu 2
\fBCUDA\fP
.sp
Added in version 3.25.

.IP \(bu 2
\fBFortran\fP
.UNINDENT
.sp
If this option is not given, the default languages are picked from
the current \fI\%ENABLED_LANGUAGES\fP global property.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
To use \fBcheck_ipo_supported()\fP, policy \fI\%CMP0069\fP must be set to
\fBNEW\fP; otherwise, a fatal error will occur.
.UNINDENT
.UNINDENT
.sp
Added in version 3.13: Support for \fI\%Visual Studio Generators\fP\&.

.sp
Added in version 3.24: The check uses the caller\(aqs \fI\%CMAKE_<LANG>_FLAGS\fP
and \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP values.
See policy \fI\%CMP0138\fP\&.

.UNINDENT
.SS Examples
.sp
Checking whether the compiler supports IPO and emitting a fatal error if it is
not supported:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckIPOSupported)
check_ipo_supported() # fatal error if IPO is not supported
set_property(TARGET foo PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
.EE
.UNINDENT
.UNINDENT
.sp
The following example demonstrates how to use this module to enable IPO for
the target only when supported by the compiler and to issue a warning if it
is not.  Additionally, projects may want to provide a configuration option
to control when IPO is enabled.  For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
option(FOO_ENABLE_IPO \(dqEnable IPO/LTO\(dq)

if(FOO_ENABLE_IPO)
  include(CheckIPOSupported)
  check_ipo_supported(RESULT result OUTPUT output)
  if(result)
    set_property(TARGET foo PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
  else()
    message(WARNING \(dqIPO is not supported: ${output}\(dq)
  endif()
endif()
.EE
.UNINDENT
.UNINDENT
.SS CheckLanguage
.sp
This module provides a command to check whether a language can be enabled
using the \fI\%enable_language()\fP or \fI\%project()\fP commands.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLanguage)
.EE
.UNINDENT
.UNINDENT
.sp
This module is useful when a project does not always require a specific
language but may need to enable it for certain parts.
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_language
Checks whether a language can be enabled in a CMake project:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_language(<lang>)
.EE
.UNINDENT
.UNINDENT
.sp
This command attempts to enable the language \fB<lang>\fP in a test project and
records the results in the following cache variables:
.INDENT 7.0
.TP
.B \fI\%CMAKE_<LANG>_COMPILER\fP
If the language can be enabled, this variable is set to the compiler
that was found.  If the language cannot be enabled, this variable is
set to \fBNOTFOUND\fP\&.
.sp
If this variable is already set, either explicitly or cached by
a previous call, the check is skipped.
.TP
.B \fI\%CMAKE_<LANG>_HOST_COMPILER\fP
This variable is set when \fB<lang>\fP is \fBCUDA\fP or \fBHIP\fP\&.
.sp
If the check detects an explicit host compiler that is required for
compilation, this variable will be set to that compiler.
If the check detects that no explicit host compiler is needed,
this variable will be cleared.
.sp
If this variable is already set, its value is preserved only if
\fI\%CMAKE_<LANG>_COMPILER\fP is also set.
Otherwise, the check runs and overwrites
\fI\%CMAKE_<LANG>_HOST_COMPILER\fP with a new result.
Note that \fI\%CMAKE_<LANG>_HOST_COMPILER\fP documents it should
not be set without also setting
\fI\%CMAKE_<LANG>_COMPILER\fP to a NVCC compiler.
.TP
.B \fI\%CMAKE_<LANG>_PLATFORM\fP
This variable is set to the detected GPU platform when \fB<lang>\fP is \fBHIP\fP\&.
.sp
If this variable is already set, its value is always preserved.  Only
compatible values will be considered for \fI\%CMAKE_<LANG>_COMPILER\fP\&.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example checks for the availability of the \fBFortran\fP language
and enables it if possible:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLanguage)
check_language(Fortran)
if(CMAKE_Fortran_COMPILER)
  enable_language(Fortran)
else()
  message(STATUS \(dqNo Fortran support\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.SS CheckLibraryExists
.sp
This module provides a command to check whether a C library exists.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLibraryExists)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_library_exists
Checks once whether a specified library exists and a given C function is
available:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_library_exists(<library> <function> <location> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command attempts to link a test executable that uses the specified
C \fB<function>\fP to verify that it is provided by either a system or
user\-provided \fB<library>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<library>\fP
The name of the library, a full path to a library file, or an
\fI\%Imported Target\fP\&.
.TP
.B \fB<function>\fP
The name of a function that should be available in the system or
user\-provided library \fB<library>\fP\&.
.TP
.B \fB<location>\fP
The directory containing the library file.  It is added to the link
search path during the check.  If this is an empty string, only the
default library search paths are used.
.TP
.B \fB<variable>\fP
The name of the variable in which to store the check result.  This
variable will be created as an internal cache variable.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command is intended for performing basic sanity checks to verify
that a library provides the expected functionality, or that the correct
library is being located.  However, it only verifies that a function
symbol can be linked successfully \- it does not ensure that the function
is declared in library headers, nor can it detect functions that are
inlined or defined as preprocessor macros.  For more robust detection
of function availability, prefer using \fI\%CheckSymbolExists\fP or
\fI\%CheckSourceCompiles\fP\&.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Checking if the \fBcurl\fP library exists in the default paths and has the
\fBcurl_easy_perform()\fP function:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLibraryExists)
check_library_exists(curl curl_easy_perform \(dq\(dq HAVE_LIBRARY_CURL)
.EE
.UNINDENT
.UNINDENT
.sp
To check if library exists in specific non\-standard location and has a specified
function:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLibraryExists)
check_library_exists(curl curl_easy_perform \(dq/opt/curl/lib\(dq HAVE_LIBRARY_CURL)
.EE
.UNINDENT
.UNINDENT
.sp
Also \fI\%Imported Targets\fP (for example, from the \fBfind_package()\fP call)
can be used:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CURL)

# ...

if(TARGET CURL::libcurl)
  include(CheckLibraryExists)
  check_library_exists(CURL::libcurl curl_easy_perform \(dq\(dq HAVE_LIBRARY_CURL)
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSymbolExists\fP module to check whether a C symbol exists.
.UNINDENT
.SS CheckLinkerFlag
.sp
Added in version 3.18.

.sp
This module provides a command to check whether a given link flag is
supported by the compiler.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLinkerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_linker_flag
Checks once whether the compiler supports a given link flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_linker_flag(<lang> <flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once whether the linker flag \fB<flag>\fP is accepted
by the \fB<lang>\fP compiler without producing a diagnostic message.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<lang>\fP
The language of the compiler used for the check.  Supported languages are
\fBC\fP, \fBCXX\fP, \fBCUDA\fP, \fBFortran\fP, \fBHIP\fP, \fBOBJC\fP, \fBOBJCXX\fP,
and \fBSwift\fP\&.
.sp
Added in version 3.19: Support for \fBCUDA\fP language.

.sp
Added in version 3.21: Support for \fBHIP\fP language.

.sp
Added in version 3.26: Support for \fBSwift\fP language.

.TP
.B \fB<flag>\fP
Linker flag(s) to check.  Multiple flags can be specified in one
argument as a string using a \fI\%semicolon\-separated list\fP\&.
.sp
The underlying implementation uses the \fI\%LINK_OPTIONS\fP target
property to test the specified flag.  The \fBLINKER:\fP (and \fBSHELL:\fP)
prefixes may be used, as described in the
\fI\%Handling Compiler Driver Differences\fP section.
.TP
.B \fB<variable>\fP
The name of the variable to store the check result.  This variable will
be created as an internal cache variable.
.UNINDENT
.sp
This command temporarily sets the \fBCMAKE_REQUIRED_LINK_OPTIONS\fP variable
and calls the \fI\%check_source_compiles()\fP command from the
\fI\%CheckSourceCompiles\fP module.
.sp
A successful result only indicates that the compiler did not report an
error when given the link flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Handling Compiler Driver Differences
.sp
To pass options to the linker tool, each compiler driver has its own syntax.
The \fBLINKER:\fP prefix and \fB,\fP separator can be used to specify, in a portable
way, options to pass to the linker tool. \fBLINKER:\fP is replaced by the
appropriate driver option and \fB,\fP by the appropriate driver separator.
The driver prefix and driver separator are given by the values of the
\fI\%CMAKE_<LANG>_LINKER_WRAPPER_FLAG\fP and
\fI\%CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP\fP variables.
.sp
For example, \fB\(dqLINKER:\-z,defs\(dq\fP becomes \fB\-Xlinker \-z \-Xlinker defs\fP for
\fBClang\fP and \fB\-Wl,\-z,defs\fP for \fBGNU GCC\fP\&.
.sp
The \fBLINKER:\fP prefix can be specified as part of a \fBSHELL:\fP prefix
expression.
.sp
The \fBLINKER:\fP prefix supports, as an alternative syntax, specification of
arguments using the \fBSHELL:\fP prefix and space as separator. The previous
example then becomes \fB\(dqLINKER:SHELL:\-z defs\(dq\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Specifying the \fBSHELL:\fP prefix anywhere other than at the beginning of the
\fBLINKER:\fP prefix is not supported.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Checking Linker Flag
.sp
The following example shows how to use this module to check the \fB\-z relro\fP
linker flag, which is supported on many Unix\-like systems to enable read\-only
relocations for improved binary security.  If the flag is supported by the
linker, it is conditionally added to the executable target using the
\fI\%target_link_options()\fP\&.  The \fBLINKER:\fP prefix is used to pass the
flag to the linker in a portable and compiler\-independent way.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLinkerFlag)

check_linker_flag(C \(dqLINKER:\-z,relro\(dq HAVE_Z_RELRO)

add_executable(example main.c)

if(HAVE_Z_RELRO)
  target_link_options(example PRIVATE \(dqLINKER:\-z,relro\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.SS Example: Checking Multiple Flags
.sp
In the following example, multiple linker flags are checked simultaneously:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckLinkerFlag)

check_linker_flag(C \(dqLINKER:\-z,relro;LINKER:\-z,now\(dq HAVE_FLAGS)

add_executable(example main.c)

if(HAVE_FLAGS)
  target_link_options(example PRIVATE LINKER:\-z,relro LINKER:\-z,now)
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CMAKE_LINKER_TYPE\fP variable to specify the linker, which
will be used also by this module.
.IP \(bu 2
The \fI\%CheckCompilerFlag\fP module to check whether a compiler flag
is supported.
.UNINDENT
.SS CheckOBJCCompilerFlag
.sp
Added in version 3.16.

.sp
This module provides a command to check whether the Objective\-C compiler
supports a given flag.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCCompilerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_objc_compiler_flag
Checks once whether the Objective\-C compiler supports a given flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_objc_compiler_flag(<flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<flag>\fP is accepted by the \fBOBJC\fP
compiler without producing a diagnostic message.  Multiple flags can be
specified in one argument as a string using a
\fI\%semicolon\-separated list\fP\&.
.sp
The result of the check is stored in the internal cache variable specified
by \fB<variable>\fP, with boolean true for success and boolean false for
failure.
.sp
A successful result only indicates that the compiler did not report an
error when given the flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check the
Objective\-C compiler flag \fB\-fobjc\-arc\fP\&.  The result of the check is
stored in the internal cache variable \fBHAVE_OBJC_ARC\fP, and the flag is
conditionally enabled using the \fI\%target_compile_options()\fP command.
The \fI\%$<COMPILE_LANGUAGE:...>\fP generator
expression ensures that the flag is added only to \fBOBJC\fP source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCCompilerFlag)
check_objc_compiler_flag(\-fobjc\-arc HAVE_OBJC_ARC)

if(HAVE_OBJC_ARC)
  target_compile_options(
    example
    PRIVATE $<$<COMPILE_LANGUAGE:OBJC>:\-fobjc\-arc>
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckCompilerFlag\fP module for a more general command to check
whether a compiler flag is supported.
.UNINDENT
.SS CheckOBJCSourceCompiles
.sp
Added in version 3.16.

.sp
This module provides a command to check whether an Objective\-C source can
be built.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCSourceCompiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_objc_source_compiles
Checks once whether the given Objective\-C source code can be built:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_objc_source_compiles(<code> <variable> [FAIL_REGEX <regexes>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the source supplied in \fB<code>\fP can be
compiled (and linked into an executable).  The result of the check is
stored in the internal cache variable specified by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<code>\fP
Source code to check.  This must be an entire program, as written in a
file containing the body block.  All symbols used in the source code
are expected to be declared as usual in their corresponding headers.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.TP
.B \fBFAIL_REGEX <regexes>...\fP
If this option is provided with one or more regular expressions, then
failure is determined by checking if anything in the compiler output
matches any of the specified regular expressions.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
In the following example, this module is used to check whether the provided
Objective\-C source code compiles and links.  Result of the check is stored in
the internal cache variable \fBHAVE_WORKING_CODE\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCSourceCompiles)

check_objc_source_compiles(\(dq
  #import <Foundation/Foundation.h>
  int main()
  {
    NSObject *foo;
    return 0;
  }
\(dq HAVE_WORKING_CODE)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module for a more general command to
check whether source can be built.
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module to check whether source can be built
and run.
.UNINDENT
.SS CheckOBJCSourceRuns
.sp
Added in version 3.16.

.sp
This module provides a command to check whether an Objective\-C source can
be built and run.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCSourceRuns)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_objc_source_runs
Checks once whether the given Objective\-C source code compiles and links
into an executable that can subsequently be run:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_objc_source_runs(<code> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
The Objective\-C source supplied in \fB<code>\fP must contain at least a
\fBmain()\fP function.  The result of the check is stored in the internal
cache variable specified by \fB<variable>\fP\&.  If the code builds and runs
with exit code \fB0\fP, success is indicated by a boolean true value.
Failure to build or run is indicated by a boolean false value, such as an
empty string or an error message.
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
In the following example, this module is used to check whether the provided
Objective\-C source code builds and runs.  Result of the check is stored in
an internal cache variable \fBHAVE_WORKING_CODE\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCSourceRuns)

check_objc_source_runs(\(dq
  #import <Foundation/Foundation.h>
  int main()
  {
    NSObject *foo;
    return 0;
  }
\(dq HAVE_WORKING_CODE)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module for a more general command syntax.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be built.
.UNINDENT
.SS CheckOBJCXXCompilerFlag
.sp
Added in version 3.16.

.sp
This module provides a command to check whether the Objective\-C++ compiler
supports a given flag.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCXXCompilerFlag)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_objcxx_compiler_flag
Checks once whether the Objective\-C++ compiler supports a given flag:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_objcxx_compiler_flag(<flag> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<flag>\fP is accepted by the \fBOBJCXX\fP
compiler without producing a diagnostic message.  Multiple flags can be
specified in one argument as a string using a
\fI\%semicolon\-separated list\fP\&.
.sp
The result of the check is stored in the internal cache variable specified
by \fB<variable>\fP, with boolean true for success and boolean false for
failure.
.sp
A successful result only indicates that the compiler did not report an
error when given the flag.  Whether the flag has any effect, or the
intended one, is outside the scope of this module.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Since the underlying \fI\%try_compile()\fP command also uses flags from
variables like \fI\%CMAKE_<LANG>_FLAGS\fP, unknown or unsupported
flags in those variables may result in a false negative for this check.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to use this module to check the
Objective\-C++ compiler flag \fB\-fobjc\-arc\fP\&.  The result of the check is
stored in the internal cache variable \fBHAVE_OBJC_ARC\fP, and the flag is
conditionally enabled using the \fI\%target_compile_options()\fP command.
The \fI\%$<COMPILE_LANGUAGE:...>\fP generator
expression ensures that the flag is added only to \fBOBJCXX\fP source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCXXCompilerFlag)
check_objcxx_compiler_flag(\-fobjc\-arc HAVE_OBJC_ARC)

if(HAVE_OBJC_ARC)
target_compile_options(
    example
    PRIVATE $<$<COMPILE_LANGUAGE:OBJCXX>:\-fobjc\-arc>
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckCompilerFlag\fP module for a more general command to check
whether a compiler flag is supported.
.UNINDENT
.SS CheckOBJCXXSourceCompiles
.sp
Added in version 3.16.

.sp
This module provides a command to check whether an Objective\-C++ source can
be built.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCXXSourceCompiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_objcxx_source_compiles
Checks once whether the given Objective\-C++ source code can be built:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_objcxx_source_compiles(<code> <variable> [FAIL_REGEX <regexes>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the source supplied in \fB<code>\fP can be
compiled (and linked into an executable).  The result of the check is
stored in the internal cache variable specified by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<code>\fP
Objective\-C++ source code to check.  This must be an entire program, as
written in a file containing the body block.  All symbols used in the
source code are expected to be declared as usual in their corresponding
headers.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.TP
.B \fBFAIL_REGEX <regexes>...\fP
If this option is provided with one or more regular expressions, then
failure is determined by checking if anything in the compiler output
matches any of the specified regular expressions.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.sp
In the following example, this module is used to check whether the provided
Objective\-C++ source code can be compiled and linked.  Result of the check
is stored in the internal cache variable \fBHAVE_WORKING_CODE\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCXXSourceCompiles)

check_objcxx_source_compiles(\(dq
  #include <vector>
  #import <Foundation/Foundation.h>
  int main()
  {
    std::vector<int> v;
    NSObject *foo;
    return 0;
  }
\(dq HAVE_WORKING_CODE)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module for a more general command to
check whether source can be built.
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module to check whether source can be built
and run.
.UNINDENT
.SS CheckOBJCXXSourceRuns
.sp
Added in version 3.16.

.sp
This module provides a command to check whether an Objective\-C++ source can
be built and run.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCXXSourceRuns)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_objcxx_source_runs
Checks once whether the given Objective\-C++ source code compiles and links
into an executable that can subsequently be run:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_objcxx_source_runs(<code> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
The Objective\-C++ source supplied in \fB<code>\fP must contain at least a
\fBmain()\fP function.  The result of the check is stored in the internal
cache variable specified by \fB<variable>\fP\&.  If the code builds and runs
with exit code \fB0\fP, success is indicated by a boolean true value.
Failure to build or run is indicated by a boolean false value, such as an
empty string or an error message.
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
In the following example, this module is used to check whether the provided
Objective\-C++ source code builds and runs.  Result of the check is stored in
an internal cache variable \fBHAVE_WORKING_CODE\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckOBJCXXSourceRuns)

check_objcxx_source_runs(\(dq
  #include <vector>
  #import <Foundation/Foundation.h>
  int main()
  {
    std::vector<int> v;
    NSObject *foo;
    return 0;
  }
\(dq HAVE_WORKING_CODE)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module for a more general command syntax.
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be built.
.UNINDENT
.SS CheckPIESupported
.sp
Added in version 3.14.

.sp
This module provides the \fBcheck_pie_supported()\fP function to check whether the
linker supports Position Independent Code (PIE) or No Position Independent Code
(NO_PIE) for executables.
.sp
When setting the \fI\%POSITION_INDEPENDENT_CODE\fP target property,
PIC\-related compile and link options are added when building library objects,
and PIE\-related compile options are added when building objects of executable
targets, regardless of this module.  Use this module to ensure that the
\fBPOSITION_INDEPENDENT_CODE\fP target property for executables is also honored at
link time.
.INDENT 0.0
.TP
.B check_pie_supported
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_pie_supported([OUTPUT_VARIABLE <output>]
                    [LANGUAGES <lang>...])
.EE
.UNINDENT
.UNINDENT
.sp
Options are:
.INDENT 7.0
.TP
.B \fBOUTPUT_VARIABLE <output>\fP
Set \fB<output>\fP variable with details about any error. If the check is
bypassed because it uses cached results from a previous call, the output
will be empty even if errors were present in the previous call.
.TP
.B \fBLANGUAGES <lang>...\fP
Check the linkers used for each of the specified languages.
If this option is not provided, the command checks all enabled languages.
.sp
\fBC\fP, \fBCXX\fP, \fBFortran\fP are supported.
.sp
Added in version 3.23: \fBOBJC\fP, \fBOBJCXX\fP, \fBCUDA\fP, and \fBHIP\fP are supported.

.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
To use \fBcheck_pie_supported()\fP, policy \fI\%CMP0083\fP must be set to
\fBNEW\fP; otherwise, a fatal error will occur.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Variables
.sp
For each language checked, the \fBcheck_pie_supported()\fP function defines two
boolean cache variables:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBCMAKE_<lang>_LINK_PIE_SUPPORTED\fP
Set to true if \fBPIE\fP is supported by the linker and false otherwise.
.TP
.B \fBCMAKE_<lang>_LINK_NO_PIE_SUPPORTED\fP
Set to true if \fBNO_PIE\fP is supported by the linker and false otherwise.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.sp
To enable PIE on an executable target at link time as well, include this module
and call \fBcheck_pie_supported()\fP before setting the
\fBPOSITION_INDEPENDENT_CODE\fP target property.  This will determine whether the
linker for each checked language supports PIE\-related link options.  For
example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_executable(foo ...)

include(CheckPIESupported)
check_pie_supported()
set_property(TARGET foo PROPERTY POSITION_INDEPENDENT_CODE TRUE)
.EE
.UNINDENT
.UNINDENT
.sp
Since not all linkers require or support PIE\-related link options (for example,
\fBMSVC\fP), retrieving any error messages might be useful for logging purposes:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_executable(foo ...)

include(CheckPIESupported)
check_pie_supported(OUTPUT_VARIABLE output LANGUAGES C)
set_property(TARGET foo PROPERTY POSITION_INDEPENDENT_CODE TRUE)
if(NOT CMAKE_C_LINK_PIE_SUPPORTED)
  message(WARNING \(dqPIE is not supported at link time:\en${output}\(dq
                  \(dqPIE link options will not be passed to linker.\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Setting the \fBPOSITION_INDEPENDENT_CODE\fP target property on an executable
without this module will set PIE\-related compile options but not PIE\-related
link options, which might not be sufficient in certain cases:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_executable(foo ...)
set_property(TARGET foo PROPERTY POSITION_INDEPENDENT_CODE TRUE)
.EE
.UNINDENT
.UNINDENT
.SS CheckPrototypeDefinition
.sp
This module provides a command to check if a C function has the expected
prototype.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckPrototypeDefinition)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_prototype_definition
Checks if a C function has the expected prototype:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_prototype_definition(<function> <prototype> <return> <headers> <variable>)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<function>\fP
The name of the function whose prototype is being checked.
.TP
.B \fB<prototype>\fP
The expected prototype of the function, provided as a string.
.TP
.B \fB<return>\fP
The return value of the function.  This will be used as a return value in
the function definition body of the generated test program to verify that
the function\(aqs return type matches the expected type.
.TP
.B \fB<headers>\fP
A \fI\%semicolon\-separated list\fP of header file
names required for checking the function prototype.
.TP
.B \fB<variable>\fP
The name of the variable to store the check result.  This variable will be
created as an internal cache variable.
.UNINDENT
.sp
This command generates a test program and verifies that it builds without
errors.  The generated test program includes specified \fB<headers>\fP, defines
a function with given literal \fB<prototype>\fP and \fB<return>\fP value and
then uses the specified \fB<function>\fP\&.  The simplified test program can be
illustrated as:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
#include <headers>
// ...
<prototype> { return <return>; }
int main(...) { ...<function>()... }
.EE
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Checking if the \fBgetpwent_r()\fP function on Solaris/illumos systems has the
expected prototype:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckPrototypeDefinition)

check_prototype_definition(
  getpwent_r
  \(dqstruct passwd *getpwent_r(struct passwd *src, char *buf, int buflen)\(dq
  \(dqNULL\(dq
  \(dqunistd.h;pwd.h\(dq
  HAVE_SOLARIS_GETPWENT_R
)
.EE
.UNINDENT
.UNINDENT
.SS CheckSourceCompiles
.sp
Added in version 3.19.

.sp
This module provides a command that checks whether a source code can be
built for a given language.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceCompiles)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_source_compiles
Checks once whether the given source code can be built for the given
language:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_source_compiles(
  <lang>
  <code>
  <variable>
  [FAIL_REGEX <regexes>...]
  [SRC_EXT <extension>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the source supplied in \fB<code>\fP can be
compiled (and linked into an executable) for code language \fB<lang>\fP\&.
The result of the check is stored in the internal cache variable specified
by \fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<lang>\fP
Language of the source code to check.  Supported languages are:
\fBC\fP, \fBCXX\fP, \fBCUDA\fP, \fBFortran\fP, \fBHIP\fP, \fBISPC\fP, \fBOBJC\fP,
\fBOBJCXX\fP, and \fBSwift\fP\&.
.sp
Added in version 3.21: Support for \fBHIP\fP language.

.sp
Added in version 3.26: Support for \fBSwift\fP language.

.TP
.B \fB<code>\fP
The source code to check.  This must be an entire program, as written
in a file containing the body block.  All symbols used in the source code
are expected to be declared as usual in their corresponding headers.
.TP
.B \fB<variable>\fP
Variable name of an internal cache variable to store the result of the
check, with boolean true for success and boolean false for failure.
.TP
.B \fBFAIL_REGEX <regexes>...\fP
If one or more regular expression patterns are provided, then failure is
determined by checking if anything in the compiler output matches any of
the specified regular expressions.
.TP
.B \fBSRC_EXT <extension>\fP
By default, the internal test source file used for the check will be
given a file extension that matches the requested language (e.g., \fB\&.c\fP
for C, \fB\&.cxx\fP for C++, \fB\&.F90\fP for Fortran, etc.).  This option can
be used to override this with the \fB\&.<extension>\fP instead.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP
Internally, the \fI\%try_compile()\fP command is used to perform the
check, and this variable controls the type of target it creates.  If this
variable is set to \fBEXECUTABLE\fP (the default), the check compiles and
links the test source code as an executable program.  If set to
\fBSTATIC_LIBRARY\fP, the test source code is compiled but not linked.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Basic Usage
.sp
The following example demonstrates how to check whether the C++ compiler
supports a specific language feature using this module.  In this case, the
check verifies if the compiler supports \fBC++11\fP lambda expressions.  The
result is stored in the internal cache variable \fBHAVE_CXX11_LAMBDAS\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceCompiles)

check_source_compiles(CXX \(dq
  int main()
  {
    auto lambda = []() { return 42; };
    return lambda();
  }
\(dq HAVE_CXX11_LAMBDAS)
.EE
.UNINDENT
.UNINDENT
.SS Example: Checking Code With Bracket Argument
.sp
The following example shows how to check whether the C compiler supports the
\fBnoreturn\fP attribute.  Code is supplied using the \fI\%Bracket Argument\fP
for easier embedded quotes handling:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceCompiles)

check_source_compiles(C [[
  #if !__has_c_attribute(noreturn)
  #  error \(dqNo noreturn attribute\(dq
  #endif
  int main(void) { return 0; }
]] HAVE_NORETURN)
.EE
.UNINDENT
.UNINDENT
.SS Example: Performing a Check Without Linking
.sp
In the following example, this module is used to perform a compile\-only
check of Fortran source code, whether the compiler supports the \fBpure\fP
procedure attribute:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceCompiles)

block()
  set(CMAKE_TRY_COMPILE_TARGET_TYPE \(dqSTATIC_LIBRARY\(dq)

  check_source_compiles(
    Fortran
    \(dqpure subroutine foo()
    end subroutine\(dq
    HAVE_PURE
  )
endblock()
.EE
.UNINDENT
.UNINDENT
.SS Example: Isolated Check
.sp
In the following example, this module is used in combination with the
\fI\%CMakePushCheckState\fP module to modify required libraries when
checking whether the PostgreSQL \fBPGVerbosity\fP enum contains
\fBPQERRORS_SQLSTATE\fP (available as of PostgreSQL version 12):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceCompiles)
include(CMakePushCheckState)

find_package(PostgreSQL)

if(TARGET PostgreSQL::PostgreSQL)
  cmake_push_check_state(RESET)
    set(CMAKE_REQUIRED_LIBRARIES PostgreSQL::PostgreSQL)

    check_source_compiles(C \(dq
      #include <libpq\-fe.h>
      int main(void)
      {
        PGVerbosity e = PQERRORS_SQLSTATE;
        (void)e;
        return 0;
      }
    \(dq HAVE_PQERRORS_SQLSTATE)
  cmake_pop_check_state()
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceRuns\fP module to check whether the source code can
be built and also run.
.UNINDENT
.SS CheckSourceRuns
.sp
Added in version 3.19.

.sp
This module provides a command to check whether a source code can be built
and run.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceRuns)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_source_runs
Checks once whether the given source code compiles and links into an
executable that can subsequently be run:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_source_runs(<lang> <code> <variable> [SRC_EXT <extension>])
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once that the \fB<lang>\fP source code supplied in
\fB<code>\fP can be built, linked as an executable, and then run.  The
result of the check is stored in the internal cache variable specified by
\fB<variable>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<lang>\fP
The programming language of the source \fB<code>\fP to check.  Supported
languages are: \fBC\fP, \fBCXX\fP, \fBCUDA\fP, \fBFortran\fP, \fBHIP\fP, \fBOBJC\fP,
and \fBOBJCXX\fP\&.
.sp
Added in version 3.21: Support for \fBHIP\fP language.

.TP
.B \fB<code>\fP
The source code to be tested.  It must contain a valid source program.
For example, it must contain at least a \fBmain()\fP function (in C/C++),
or a \fBprogram\fP unit (in Fortran).
.TP
.B \fB<variable>\fP
Name of the internal cache variable with the result of the check.  If
the code builds and runs with exit code \fB0\fP, success is indicated by
a boolean true value.  Failure to build or run is indicated by a boolean
false value, such as an empty string or an error message.
.TP
.B \fBSRC_EXT <extension>\fP
By default, the internal test source file used for the check will be
given a file extension that matches the requested language (e.g., \fB\&.c\fP
for C, \fB\&.cxx\fP for C++, \fB\&.F90\fP for Fortran, etc.).  This option can
be used to override this with the \fB\&.<extension>\fP instead.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Basic Usage
.sp
The following example demonstrates how to use this module to check whether
the C source code is supported and operational at runtime.  The result of
the check is stored in the internal cache variable \fBHAVE_NORETURN\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceRuns)

check_source_runs(C \(dq
  #include <stdlib.h>
  #include <stdnoreturn.h>
  noreturn void f(){ exit(0); }
  int main(void) { f(); return 1; }
\(dq HAVE_NORETURN)
.EE
.UNINDENT
.UNINDENT
.SS Example: Checking Fortran Code
.sp
Checking if Fortran source code runs successfully:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceRuns)

check_source_runs(Fortran \(dq
  program test
  real :: x[*]
  call co_sum(x)
  end program
\(dq HAVE_COARRAY)
.EE
.UNINDENT
.UNINDENT
.SS Example: Checking C++ Code With Bracket Argument
.sp
The following example demonstrates how to check whether the C++ standard
library is functional and \fBstd::vector\fP works at runtime.  If the source
compiles, links, and runs successfully, internal cache variable
\fBHAVE_WORKING_STD_VECTOR\fP will be set to boolean true value.  Code is
supplied using \fI\%Bracket Argument\fP for easier embedded quotes handling:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceRuns)

check_source_runs(CXX [[
  #include <iostream>
  #include <vector>

  int main()
  {
    std::vector<int> v = {1, 2, 3};
    if (v.size() != 3) return 1;
    std::cout << \(dqVector works correctly.\(dq << std::endl;
    return 0;
  }
]] HAVE_WORKING_STD_VECTOR)
.EE
.UNINDENT
.UNINDENT
.SS Example: Isolated Check
.sp
In the following example, this module is used in combination with the
\fI\%CMakePushCheckState\fP module to modify required compile definitions
and libraries when checking whether the C function \fBsched_getcpu()\fP is
supported and operational at runtime.  For example, on some systems, the
\fBsched_getcpu()\fP function may be available at compile time but not actually
implemented by the kernel.  In such cases, it returns \fB\-1\fP and sets
\fBerrno\fP to \fBENOSYS\fP\&.  This check verifies that \fBsched_getcpu()\fP runs
successfully and stores a boolean result in the internal cache variable
\fBHAVE_SCHED_GETCPU\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSourceRuns)
include(CMakePushCheckState)

cmake_push_check_state(RESET)
  set(CMAKE_REQUIRED_DEFINITIONS \-D_GNU_SOURCE)

  if(CMAKE_SYSTEM_NAME STREQUAL \(dqHaiku\(dq)
    set(CMAKE_REQUIRED_LIBRARIES gnu)
  endif()

  check_source_runs(C \(dq
    #include <sched.h>
    int main(void)
    {
      if (sched_getcpu() == \-1) {
        return 1;
      }
      return 0;
    }
  \(dq HAVE_SCHED_GETCPU)
cmake_pop_check_state()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSourceCompiles\fP module to check whether a source code
can be built.
.UNINDENT
.SS CheckStructHasMember
.sp
This module provides a command to check whether a struct or class has a
specified member variable.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckStructHasMember)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_struct_has_member
Checks once if the given struct or class has the specified member variable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_struct_has_member(
  <struct>
  <member>
  <headers>
  <variable>
  [LANGUAGE <language>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks once whether the struct or class \fB<struct>\fP contains
the specified \fB<member>\fP after including the given header(s) \fB<headers>\fP
where the prototype should be declared.  Multiple header files can be
specified in one argument as a string using a \fI\%semicolon\-separated list\fP\&.  The result is stored in an internal cache variable
\fB<variable>\fP\&.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBLANGUAGE <language>\fP
Use the \fB<language>\fP compiler to perform the check.
Acceptable values are \fBC\fP and \fBCXX\fP\&.
If not specified, it defaults to \fBC\fP\&.
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Checking C Struct Member
.sp
In the following example, this module checks if the C struct \fBtimeval\fP has
a member variable \fBtv_sec\fP after including the \fB<sys/select.h>\fP header.
The result of the check is stored in the internal cache variable
\fBHAVE_TIMEVAL_TV_SEC\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckStructHasMember)

check_struct_has_member(
  \(dqstruct timeval\(dq
  tv_sec
  sys/select.h
  HAVE_TIMEVAL_TV_SEC
)
.EE
.UNINDENT
.UNINDENT
.SS Example: Checking C++ Struct Member
.sp
In the following example, this module checks if the C++ struct \fBstd::tm\fP
has a member variable \fBtm_gmtoff\fP after including the \fB<ctime>\fP header.
The result of the check is stored in the internal cache variable
\fBHAVE_TM_GMTOFF\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckStructHasMember)

check_struct_has_member(
  std::tm
  tm_gmtoff
  ctime
  HAVE_TM_GMTOFF
  LANGUAGE CXX
)
.EE
.UNINDENT
.UNINDENT
.SS Example: Isolated Check With Compile Definitions
.sp
In the following example, the check is performed with temporarily modified
compile definitions using the \fI\%CMakePushCheckState\fP module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckStructHasMember)
include(CMakePushCheckState)

cmake_push_check_state(RESET)
  set(CMAKE_REQUIRED_DEFINITIONS \-D_GNU_SOURCE)

  check_struct_has_member(
    \(dqstruct utsname\(dq
    domainname
    sys/utsname.h
    HAVE_UTSNAME_DOMAINNAME
  )
cmake_pop_check_state()
.EE
.UNINDENT
.UNINDENT
.SS CheckSymbolExists
.sp
This module provides a command to check whether a C symbol exists.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSymbolExists)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_symbol_exists
Checks once whether a symbol exists as a function, variable, or preprocessor
macro in C:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_symbol_exists(<symbol> <headers> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks whether the \fB<symbol>\fP is available after including
the specified header file(s) \fB<headers>\fP, and stores the result in the
internal cache variable \fB<variable>\fP\&.  Multiple header files can be
specified in one argument as a string using a
\fI\%semicolon\-separated list\fP\&.
.sp
If the header files define the symbol as a macro, it is considered
available and assumed to work.  If the symbol is declared as a function
or variable, the check also ensures that it links successfully
(i.e., the symbol must exist in a linked library or object file).
Compiler intrinsics may not be detected, as they are not always linkable
or explicitly declared in headers.
.sp
Symbols that are types, enum values, or compiler intrinsics are not
recognized.  For those, consider using the \fI\%CheckTypeSize\fP or
\fI\%CheckSourceCompiles\fP module instead.
.sp
This command is intended to check symbols as they appear in C.  For C++
symbols, use the \fI\%CheckCXXSymbolExists\fP module instead.
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.sp
The following example demonstrates how to check for the presence of a
preprocessor macro \fBSEEK_SET\fP and the C function \fBfopen()\fP from
the \fB<stdio.h>\fP header using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckSymbolExists)

# Check for macro SEEK_SET
check_symbol_exists(SEEK_SET \(dqstdio.h\(dq HAVE_SEEK_SET)

# Check for function fopen
check_symbol_exists(fopen \(dqstdio.h\(dq HAVE_FOPEN)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckCXXSymbolExists\fP module to check whether a C++ symbol
exists.
.UNINDENT
.SS CheckTypeSize
.sp
This module provides a command to check the size of a C/C++ type or expression.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckTypeSize)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_type_size
Checks once whether the C/C++ type or expression exists and determines its
size:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_type_size(<type> <variable> [BUILTIN_TYPES_ONLY] [LANGUAGE <language>])
.EE
.UNINDENT
.UNINDENT
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<type>\fP
The type or expression being checked.
.TP
.B \fB<variable>\fP
The name of the variable and a prefix used for storing the check results.
.TP
.B \fBBUILTIN_TYPES_ONLY\fP
If given, only compiler\-builtin types will be supported in the check.
If \fInot\fP given, the command checks for common headers \fB<sys/types.h>\fP,
\fB<stdint.h>\fP, and \fB<stddef.h>\fP, and saves results in
\fBHAVE_SYS_TYPES_H\fP, \fBHAVE_STDINT_H\fP, and \fBHAVE_STDDEF_H\fP internal
cache variables.  The type size check automatically includes the available
headers, thus supporting checks of types defined in the headers.
.TP
.B \fBLANGUAGE <language>\fP
Uses the \fB<language>\fP compiler to perform the check.
Acceptable values are \fBC\fP and \fBCXX\fP\&.
If not specified, it defaults to \fBC\fP\&.
.UNINDENT
.sp
Result Variables
.sp
Results are reported in the following variables:
.INDENT 7.0
.TP
.B \fBHAVE_<variable>\fP
Internal cache variable that holds a boolean true or false value
indicating whether the type or expression \fB<type>\fP exists.
.TP
.B \fB<variable>\fP
Internal cache variable that holds one of the following values:
.INDENT 7.0
.TP
.B \fB<size>\fP
If the type or expression exists, it will have a non\-zero size
\fB<size>\fP in bytes.
.TP
.B \fB0\fP
When type has architecture\-dependent size;  This may occur when
\fI\%CMAKE_OSX_ARCHITECTURES\fP has multiple architectures.
In this case \fB<variable>_CODE\fP contains preprocessor tests
mapping from each architecture macro to the corresponding type size.
The list of architecture macros is stored in \fB<variable>_KEYS\fP,
and the value for each key is stored in \fB<variable>\-<key>\fP\&.
.TP
.B \(dq\(dq (empty string)
When type or expression does not exist.
.UNINDENT
.TP
.B \fB<variable>_CODE\fP
CMake variable that holds preprocessor code to define the macro
\fB<variable>\fP to the size of the type, or to leave the macro undefined
if the type does not exist.
.UNINDENT
.sp
Despite the name of this command, it may also be used to determine the size
of more complex expressions.  For example, to check the size of a struct
member:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_type_size(\(dq((struct something*)0)\->member\(dq SIZEOF_MEMBER)
.EE
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_EXTRA_INCLUDE_FILES\fP
A \fI\%semicolon\-separated list\fP of extra header
files to include when performing the check.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Consider the code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckTypeSize)

# Check for size of long.
check_type_size(long SIZEOF_LONG)
message(\(dqHAVE_SIZEOF_LONG: ${HAVE_SIZEOF_LONG}\(dq)
message(\(dqSIZEOF_LONG: ${SIZEOF_LONG}\(dq)
message(\(dqSIZEOF_LONG_CODE: ${SIZEOF_LONG_CODE}\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
On a 64\-bit architecture, the output may look something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
HAVE_SIZEOF_LONG: TRUE
SIZEOF_LONG: 8
SIZEOF_LONG_CODE: #define SIZEOF_LONG 8
.EE
.UNINDENT
.UNINDENT
.sp
On Apple platforms, when \fI\%CMAKE_OSX_ARCHITECTURES\fP has multiple
architectures, types may have architecture\-dependent sizes.
For example, with the code
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckTypeSize)

check_type_size(long SIZEOF_LONG)
message(\(dqHAVE_SIZEOF_LONG: ${HAVE_SIZEOF_LONG}\(dq)
message(\(dqSIZEOF_LONG: ${SIZEOF_LONG}\(dq)
foreach(key IN LISTS SIZE_OF_LONG_KEYS)
  message(\(dqkey: ${key}\(dq)
  message(\(dqvalue: ${SIZE_OF_LONG\-${key}}\(dq)
endforeach()
message(\(dqSIZEOF_LONG_CODE:
${SIZEOF_LONG_CODE}\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
the result may be:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
HAVE_SIZEOF_LONG: TRUE
SIZEOF_LONG: 0
key: __i386
value: 4
key: __x86_64
value: 8
SIZEOF_LONG_CODE:
#if defined(__i386)
# define SIZE_OF_LONG 4
#elif defined(__x86_64)
# define SIZE_OF_LONG 8
#else
# error SIZE_OF_LONG unknown
#endif
.EE
.UNINDENT
.UNINDENT
.SS CheckVariableExists
.sp
This module provides a command to check whether a C variable exists.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckVariableExists)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B check_variable_exists
Checks once if a C variable exists:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_variable_exists(<var> <variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command attempts to compile and link a test C program that references
the specified C variable \fB<var>\fP\&.  A boolean result of whether
the check was successful is stored in an internal cache variable
\fB<variable>\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Prefer using \fI\%CheckSymbolExists\fP or \fI\%CheckSourceCompiles\fP
instead of this command for more robust detection.  This command performs
a link\-only check and doesn\(aqt detect whether a variable is also declared
in system or library headers.  Neither can it detect variables that might
be defined as preprocessor macros.
.UNINDENT
.UNINDENT
.sp
Variables Affecting the Check
.sp
The following variables may be set before calling this command to modify
the way the check is run:
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 7.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Basic Usage
.sp
In the following example, a check is performed whether the linker sees the
C variable \fBtzname\fP and stores the check result in the
\fBPROJECT_HAVE_TZNAME\fP internal cache variable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckVariableExists)

check_variable_exists(tzname PROJECT_HAVE_TZNAME)
.EE
.UNINDENT
.UNINDENT
.SS Example: Isolated Check With Linked Libraries
.sp
In the following example, this module is used in combination with the
\fI\%CMakePushCheckState\fP module to link additional required library
using the \fBCMAKE_REQUIRED_LIBRARIES\fP variable.  For example, in a find
module, to check whether the Net\-SNMP library has the
\fBusmHMAC192SHA256AuthProtocol\fP array:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckVariableExists)
include(CMakePushCheckState)

find_library(SNMP_LIBRARY NAMES netsnmp)

if(SNMP_LIBRARY)
  cmake_push_check_state(RESET)

  set(CMAKE_REQUIRED_LIBRARIES ${SNMP_LIBRARY})

  check_variable_exists(usmHMAC192SHA256AuthProtocol SNMP_HAVE_SHA256)

  cmake_pop_check_state()
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CheckSymbolExists\fP module to check whether a C symbol exists.
.UNINDENT
.SS CMakeAddFortranSubdirectory
.sp
This module provides a command to add a Fortran project located in a
subdirectory.
.sp
Load it in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeAddFortranSubdirectory)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B cmake_add_fortran_subdirectory
Adds a Fortran\-only subproject from subdirectory to the current project:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_add_fortran_subdirectory(
  <subdir>
  PROJECT <project\-name>
  ARCHIVE_DIR <dir>
  RUNTIME_DIR <dir>
  LIBRARIES <libs>...
  LINK_LIBRARIES
    [LINK_LIBS <lib> <deps>...]...
  [CMAKE_COMMAND_LINE <flags>...]
  NO_EXTERNAL_INSTALL
)
.EE
.UNINDENT
.UNINDENT
.sp
This command checks whether the current compiler supports Fortran or attempts
to locate a Fortran compiler.  If a compatible Fortran compiler is found, the
Fortran project located in \fB<subdir>\fP is added as a subdirectory to the
current project.
.sp
If no Fortran compiler is found and the compiler is \fBMSVC\fP, it searches for
the MinGW \fBgfortran\fP compiler.  In this case, the Fortran project is built
as an external project using MinGW tools, and Fortran\-related imported targets
are created.  This setup works only if the Fortran code is built as a shared
DLL library, so the \fI\%BUILD_SHARED_LIBS\fP variable is enabled in the
external project.  Additionally, the \fI\%CMAKE_GNUtoMS\fP variable is set
to \fBON\fP to ensure that Microsoft\-compatible \fB\&.lib\fP files are created.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBPROJECT\fP
The name of the Fortran project as defined in the top\-level
\fBCMakeLists.txt\fP located in \fB<subdir>\fP\&.
.TP
.B \fBARCHIVE_DIR\fP
Directory where the project places \fB\&.lib\fP archive files.  A relative path
is interpreted as relative to \fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
.TP
.B \fBRUNTIME_DIR\fP
Directory where the project places \fB\&.dll\fP runtime files.  A relative path
is interpreted as relative to \fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
.TP
.B \fBLIBRARIES\fP
Names of library targets to create or import into the current project.
.TP
.B \fBLINK_LIBRARIES\fP
Specifies link interface libraries for \fBLIBRARIES\fP\&.  This option expects a
list of \fBLINK_LIBS <lib> <deps>...\fP items, where:
.INDENT 7.0
.IP \(bu 2
\fBLINK_LIBS\fP marks the start of a new pair
.IP \(bu 2
\fB<lib>\fP is a library target.
.IP \(bu 2
\fB<deps>...\fP represents one or more dependencies required by \fB<lib>\fP\&.
.UNINDENT
.TP
.B \fBCMAKE_COMMAND_LINE\fP
Additional command\-line flags passed to \fI\%cmake(1)\fP command when
configuring the Fortran subproject.
.TP
.B \fBNO_EXTERNAL_INSTALL\fP
Prevents installation of the external project.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The \fBNO_EXTERNAL_INSTALL\fP option is required for forward compatibility
with a future version that supports installation of the external project
binaries during \fBmake install\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.sp
Adding a Fortran subdirectory to a project can be done by including this module
and calling the \fBcmake_add_fortran_subdirectory()\fP command.  In the following
example, a Fortran project provides the \fBhello\fP library and its dependent
\fBworld\fP library:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeAddFortranSubdirectory)

cmake_add_fortran_subdirectory(
  fortran\-subdir
  PROJECT FortranHelloWorld
  ARCHIVE_DIR lib
  RUNTIME_DIR bin
  LIBRARIES hello world
  LINK_LIBRARIES
    LINK_LIBS hello world # hello library depends on the world library
  NO_EXTERNAL_INSTALL
)

# The Fortran target can be then linked to the main project target.
add_executable(main main.c)
target_link_libraries(main PRIVATE hello)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.sp
There are multiple ways to integrate Fortran libraries.  Alternative approaches
include:
.INDENT 0.0
.IP \(bu 2
The \fI\%add_subdirectory()\fP command to add the subdirectory directly to
the build.
.IP \(bu 2
The \fI\%export()\fP command can be used in the subproject to provide
\fI\%Imported Targets\fP or similar for integration with other projects.
.IP \(bu 2
The \fI\%FetchContent\fP or \fI\%ExternalProject\fP modules when working
with external dependencies.
.UNINDENT
.SS CMakeBackwardCompatibilityCXX
.sp
This module defines several backward compatibility cache variables for the
\fBCXX\fP language to support early C++ (pre\-C++98, ANSI C++).
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeBackwardCompatibilityCXX)
.EE
.UNINDENT
.UNINDENT
.sp
The following modules are included by this module:
.INDENT 0.0
.IP \(bu 2
\fI\%TestForANSIForScope\fP
.IP \(bu 2
\fI\%TestForANSIStreamHeaders\fP
.IP \(bu 2
\fI\%TestForSSTREAM\fP
.IP \(bu 2
\fI\%TestForSTDNamespace\fP
.UNINDENT
.sp
Additionally, the following cache variable may be defined:
.INDENT 0.0
.TP
.B \fBCMAKE_ANSI_CXXFLAGS\fP
A space\-separated string of compiler options for enabling ANSI C++ mode, if
available.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is intended for C++ code written before \fBC++ 98\fP\&.  As of the
\fBC++ 98\fP standard, these issues have been formally addressed, making such
checks obsolete.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Including this module provides backward compatibility cache variables, which
can be used in C++.  For example:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeBackwardCompatibilityCXX)
file(
  CONFIGURE
  OUTPUT config.h
  CONTENT [[
    #cmakedefine CMAKE_NO_ANSI_FOR_SCOPE
    #cmakedefine CMAKE_NO_ANSI_STRING_STREAM
    #cmakedefine CMAKE_NO_ANSI_STREAM_HEADERS
    #cmakedefine CMAKE_NO_STD_NAMESPACE
  ]]
)
.EE
.UNINDENT
.UNINDENT
.SS CMakeDependentOption
.sp
This module provides a command to define boolean options whose availability and
default values depend on specified conditions or other options.  This helps
maintain a clean configuration interface by only displaying options that are
relevant to the current settings.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDependentOption)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B cmake_dependent_option
Provides a boolean option that depends on a set of conditions:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_dependent_option(<variable> <help> <value> <condition> <else\-value>)
.EE
.UNINDENT
.UNINDENT
.sp
This command creates a boolean \fB<variable>\fP and makes it available to the
user in the GUI (such as \fI\%cmake\-gui(1)\fP or \fI\%ccmake(1)\fP), if
a set of conditions evaluates to boolean true.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<variable>\fP
The name of a variable that stores the option value.
.TP
.B \fB<help>\fP
A brief description of the option.  This string is typically a short line of
text and is displayed in the GUI.
.TP
.B \fB<value>\fP
Boolean value for the \fB<variable>\fP, when \fB<condition>\fP evaluates to
boolean true.
.TP
.B \fB<condition>\fP
Specifies the conditions that determine whether \fB<variable>\fP is set and
visible in the GUI.
.INDENT 7.0
.IP \(bu 2
If \fB<condition>\fP evaluates to boolean false, option is hidden from the
user in the GUI, and a local variable \fB<variable>\fP is set to
\fB<else\-value>\fP\&.
.IP \(bu 2
If \fB<condition>\fP evaluates to boolean true, a boolean cache variable
named \fB<variable>\fP is created with default \fB<value>\fP, and option is
shown in the GUI, allowing the user to enable or disable it.
.IP \(bu 2
If \fB<condition>\fP later evaluates to boolean false (on consecutive
configuration run),  option is hidden from the user in the GUI and the
\fB<variable>\fP type is changed to an internal cache variable.  In that
case a local variable of the same name is set to \fB<else\-value>\fP\&.
.IP \(bu 2
If \fB<condition>\fP becomes true again in consecutive configuration runs,
the user\(aqs previously set value is preserved.
.UNINDENT
.sp
The \fB<condition>\fP argument can be:
.INDENT 7.0
.IP \(bu 2
A single condition (such as a variable name).
.IP \(bu 2
A \fI\%semicolon\-separated list\fP of multiple
conditions.
.IP \(bu 2
Added in version 3.22: A full \fI\%Condition Syntax\fP as used in an \fBif(<condition>)\fP clause.
See policy \fI\%CMP0127\fP\&.  This enables using entire condition
syntax (such as grouping conditions with parens and similar).

.UNINDENT
.TP
.B \fB<else\-value>\fP
The value assigned to a local variable named \fB<variable>\fP, when
\fB<condition>\fP evaluates to boolean false.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Basic Usage
.sp
Using this module in a project to conditionally set an option:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDependentOption)

cmake_dependent_option(USE_SSL_GNUTLS \(dqUse GnuTLS for SSL\(dq ON USE_SSL OFF)
.EE
.UNINDENT
.UNINDENT
.SS Example: Enabling/Disabling Dependent Option
.sp
Extending the previous example, this demonstrates how the module allows
user\-configurable options based on a condition during the configuration phase:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDependentOption)

option(USE_SSL \(dqEnable SSL in the project\(dq OFF)

cmake_dependent_option(USE_SSL_GNUTLS \(dqUse GnuTLS for SSL\(dq ON USE_SSL OFF)

message(STATUS \(dqUSE_SSL: ${USE_SSL}\(dq)
message(STATUS \(dqUSE_SSL_GNUTLS: ${USE_SSL_GNUTLS}\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
On the first configuration run, a boolean cache variable \fBUSE_SSL\fP is set to
OFF, and a local variable \fBUSE_SSL_GNUTLS\fP is set to OFF:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-B build\-dir

\-\- USE_SSL: OFF
\-\- USE_SSL_GNUTLS: OFF
.EE
.UNINDENT
.UNINDENT
.sp
Running CMake with \fBUSE_SSL=ON\fP sets both \fBUSE_SSL\fP and \fBUSE_SSL_GNUTLS\fP
boolean cache variables to ON:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-B build\-dir \-D USE_SSL=ON

\-\- USE_SSL: ON
\-\- USE_SSL_GNUTLS: ON
.EE
.UNINDENT
.UNINDENT
.sp
On a subsequent configuration run with \fBUSE_SSL=OFF\fP, \fBUSE_SSL_GNUTLS\fP
follows suit.  However, its value is preserved in the internal cache while being
overridden locally:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-B build\-dir \-D USE_SSL=OFF

\-\- USE_SSL: OFF
\-\- USE_SSL_GNUTLS: OFF
.EE
.UNINDENT
.UNINDENT
.SS Example: Semicolon\-separated List of Conditions
.sp
The \fB<condition>\fP argument can also be a semicolon\-separated list of
conditions.  In the following example, if the variable \fBUSE_BAR\fP is ON and
variable \fBUSE_ZOT\fP is OFF, the option \fBUSE_FOO\fP is available and defaults to
ON.  Otherwise, \fBUSE_FOO\fP is set to OFF and hidden from the user.
.sp
If the values of \fBUSE_BAR\fP or \fBUSE_ZOT\fP change in the future configuration
runs, the previous value of \fBUSE_FOO\fP is preserved so that when it becomes
available again, it retains its last set value.
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDependentOption)

cmake_dependent_option(USE_FOO \(dqUse Foo\(dq ON \(dqUSE_BAR;NOT USE_ZOT\(dq OFF)
.EE
.UNINDENT
.UNINDENT
.SS Example: Full Condition Syntax
.sp
As of CMake 3.22, \fBcmake_dependent_option()\fP supports full condition syntax.
.sp
In fhe following example, if the condition evaluates to true, the option
\fBUSE_FOO\fP is available and set to ON.  Otherwise, it is set to OFF and hidden
in the GUI.  The value of \fBUSE_FOO\fP is preserved across configuration runs,
similar to the previous example.
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDependentOption)

cmake_dependent_option(USE_FOO \(dqUse Foo\(dq ON \(dqUSE_A AND (USE_B OR USE_C)\(dq OFF)
.EE
.UNINDENT
.UNINDENT
.sp
Another example demonstrates how an option can be conditionally available based
on the target system:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDependentOption)

cmake_dependent_option(
  ENABLE_FOO
  \(dqEnable feature Foo (this option is available when building for Windows)\(dq
  ON
  [[CMAKE_SYSTEM_NAME STREQUAL \(dqWindows\(dq]]
  OFF
)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%option()\fP command to provide a boolean option that the user can
optionally select.
.UNINDENT
.SS CMakeFindDependencyMacro
.INDENT 0.0
.TP
.B find_dependency
The \fBfind_dependency()\fP macro wraps a \fI\%find_package()\fP call for
a package dependency:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_dependency(<dep> [...])
.EE
.UNINDENT
.UNINDENT
.sp
It is designed to be used in a
\fI\%Package Configuration File\fP
(\fB<PackageName>Config.cmake\fP).  \fBfind_dependency\fP forwards the correct
parameters for \fBQUIET\fP and \fBREQUIRED\fP which were passed to
the original \fI\%find_package()\fP call.  Any additional arguments
specified are forwarded to \fI\%find_package()\fP\&.
.sp
If the dependency could not be found it sets an informative diagnostic
message and calls \fI\%return()\fP to end processing of the calling
package configuration file and return to the \fI\%find_package()\fP
command that loaded it.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The call to \fI\%return()\fP makes this macro unsuitable to call
from \fI\%Find Modules\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Package Dependency Search Optimizations
.sp
If \fBfind_dependency\fP is called with arguments identical to a previous
call in the same directory, perhaps due to diamond\-shaped package
dependencies, the underlying call to \fI\%find_package()\fP is optimized
out.  This optimization is important to support large package dependency
graphs while avoiding a combinatorial explosion of repeated searches.
However, the heuristic cannot account for ambient variables that
affect package behavior, such as \fB<PackageName>_USE_STATIC_LIBS\fP,
offered by some packages.  Therefore package configuration files should
avoid setting such variables before their calls to \fBfind_dependency\fP\&.
.sp
Changed in version 3.15: Previously, the underlying call to \fI\%find_package()\fP was always
optimized out if the package had already been found.  CMake 3.15
removed the optimization to support cases in which \fBfind_dependency\fP
call arguments request different components.

.sp
Changed in version 3.26: The pre\-3.15 optimization was restored, but with the above\-described
heuristic to account for varying \fBfind_dependency\fP call arguments.

.SS CMakeFindPackageMode
.sp
This module is executed by \fBcmake\fP when invoked with the
\fI\%\-\-find\-package\fP option to locate the requested
package.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This is internal module and is not meant to be included directly in the
project.  For usage details, refer to the \fI\%\-\-find\-package\fP documentation.
.UNINDENT
.UNINDENT
.SS CMakeGraphVizOptions
.sp
The builtin Graphviz support of CMake.
.SS Generating Graphviz files
.sp
CMake can generate \X'tty: link https://www.graphviz.org/'\fI\%Graphviz\fP\X'tty: link' files showing the
dependencies between the targets in a project, as well as external libraries
which are linked against.
.sp
When running CMake with the \fB\-\-graphviz=foo.dot\fP option, it produces:
.INDENT 0.0
.IP \(bu 2
a \fBfoo.dot\fP file, showing all dependencies in the project
.IP \(bu 2
a \fBfoo.dot.<target>\fP file for each target, showing on which other targets
it depends
.IP \(bu 2
a \fBfoo.dot.<target>.dependers\fP file for each target, showing which other
targets depend on it
.UNINDENT
.sp
Those .dot files can be converted to images using the \fIdot\fP command from the
Graphviz package:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
dot \-Tpng \-o foo.png foo.dot
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.10: The different dependency types \fBPUBLIC\fP, \fBINTERFACE\fP and \fBPRIVATE\fP
are represented as solid, dashed and dotted edges.

.SS Variables specific to the Graphviz support
.sp
The resulting graphs can be huge.  The look and content of the generated graphs
can be controlled using the file \fBCMakeGraphVizOptions.cmake\fP\&.  This file is
first searched in \fI\%CMAKE_BINARY_DIR\fP, and then in
\fI\%CMAKE_SOURCE_DIR\fP\&.  If found, the variables set in it are used to
adjust options for the generated Graphviz files.
.INDENT 0.0
.TP
.B GRAPHVIZ_GRAPH_NAME
The graph name.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: value of \fI\%CMAKE_PROJECT_NAME\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_GRAPH_HEADER
The header written at the top of the Graphviz files.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: \(dqnode [ fontsize = \(dq12\(dq ];\(dq
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_NODE_PREFIX
The prefix for each node in the Graphviz files.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: \(dqnode\(dq
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_EXECUTABLES
Set to FALSE to exclude executables from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_STATIC_LIBS
Set to FALSE to exclude static libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_SHARED_LIBS
Set to FALSE to exclude shared libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_MODULE_LIBS
Set to FALSE to exclude module libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_INTERFACE_LIBS
Set to FALSE to exclude interface libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_OBJECT_LIBS
Set to FALSE to exclude object libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_UNKNOWN_LIBS
Set to FALSE to exclude unknown libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_EXTERNAL_LIBS
Set to FALSE to exclude external libraries from the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_CUSTOM_TARGETS
Set to TRUE to include custom targets in the generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: FALSE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_IGNORE_TARGETS
A list of regular expressions for names of targets to exclude from the
generated graphs.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: empty
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_GENERATE_PER_TARGET
Set to FALSE to not generate per\-target graphs \fBfoo.dot.<target>\fP\&.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GRAPHVIZ_GENERATE_DEPENDERS
Set to FALSE to not generate depender graphs \fBfoo.dot.<target>.dependers\fP\&.
.INDENT 7.0
.IP \(bu 2
Mandatory: NO
.IP \(bu 2
Default: TRUE
.UNINDENT
.UNINDENT
.SS CMakePackageConfigHelpers
.sp
Helper functions for creating config files that can be included by other
projects to find and use a package.
.SS Generating a Package Configuration File
.INDENT 0.0
.TP
.B configure_package_config_file
Create a config file for a project:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
configure_package_config_file(<input> <output>
  INSTALL_DESTINATION <path>
  [PATH_VARS <var1> <var2> ... <varN>]
  [NO_SET_AND_CHECK_MACRO]
  [NO_CHECK_REQUIRED_COMPONENTS_MACRO]
  [INSTALL_PREFIX <path>]
  )
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBconfigure_package_config_file()\fP should be used instead of the plain
\fI\%configure_file()\fP command when creating the \fB<PackageName>Config.cmake\fP
or \fB<PackageName>\-config.cmake\fP file for installing a project or library.
It helps make the resulting package relocatable by avoiding hardcoded paths
in the installed \fB<PackageName>Config.cmake\fP file.
.sp
In a \fBFooConfig.cmake\fP file there may be code like this to make the install
destinations known to the using project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(FOO_INCLUDE_DIR   \(dq@CMAKE_INSTALL_FULL_INCLUDEDIR@\(dq )
set(FOO_DATA_DIR   \(dq@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@\(dq )
set(FOO_ICONS_DIR   \(dq@CMAKE_INSTALL_PREFIX@/share/icons\(dq )
#...logic to determine installedPrefix from the own location...
set(FOO_CONFIG_DIR  \(dq${installedPrefix}/@CONFIG_INSTALL_DIR@\(dq )
.EE
.UNINDENT
.UNINDENT
.sp
All four options shown above are not sufficient  The first three hardcode the
absolute directory locations.  The fourth case works only if the logic to
determine the \fBinstalledPrefix\fP is correct, and if \fBCONFIG_INSTALL_DIR\fP
contains a relative path, which in general cannot be guaranteed.  This has the
effect that the resulting \fBFooConfig.cmake\fP file would work poorly under
Windows and macOS, where users are used to choosing the install location of a
binary package at install time, independent from how
\fI\%CMAKE_INSTALL_PREFIX\fP was set at build/cmake time.
.sp
Using \fBconfigure_package_config_file()\fP helps.  If used correctly, it makes
the resulting \fBFooConfig.cmake\fP file relocatable.  Usage:
.INDENT 0.0
.IP 1. 3
Write a \fBFooConfig.cmake.in\fP file as you are used to.
.IP 2. 3
Insert a line at the top containing only the string \fB@PACKAGE_INIT@\fP\&.
.IP 3. 3
Instead of \fBset(FOO_DIR \(dq@SOME_INSTALL_DIR@\(dq)\fP, use
\fBset(FOO_DIR \(dq@PACKAGE_SOME_INSTALL_DIR@\(dq)\fP (this must be after the
\fB@PACKAGE_INIT@\fP line).
.IP 4. 3
Instead of using the normal \fI\%configure_file()\fP command, use
\fBconfigure_package_config_file()\fP\&.
.UNINDENT
.sp
The \fB<input>\fP and \fB<output>\fP arguments are the input and output file, the
same way as in \fI\%configure_file()\fP\&.
.sp
The \fB<path>\fP given to \fBINSTALL_DESTINATION\fP must be the destination where
the \fBFooConfig.cmake\fP file will be installed to.  This path can either be
absolute, or relative to the \fBINSTALL_PREFIX\fP path.
.sp
The variables \fB<var1>\fP to \fB<varN>\fP given as \fBPATH_VARS\fP are the
variables which contain install destinations.  For each of them, the macro will
create a helper variable \fBPACKAGE_<var...>\fP\&.  These helper variables must be
used in the \fBFooConfig.cmake.in\fP file for setting the installed location.
They are calculated by \fBconfigure_package_config_file()\fP so that they are
always relative to the installed location of the package.  This works both for
relative and also for absolute locations.  For absolute locations, it works
only if the absolute location is a subdirectory of \fBINSTALL_PREFIX\fP\&.
.sp
Added in version 3.30: The variable \fBPACKAGE_PREFIX_DIR\fP will always be defined after the
\fB@PACKAGE_INIT@\fP line.  It will hold the value of the base install
location.  In general, variables defined via the \fBPATH_VARS\fP mechanism
should be used instead, but \fBPACKAGE_PREFIX_DIR\fP can be used for those
cases not easily handled by \fBPATH_VARS\fP, such as for files installed
directly to the base install location rather than a subdirectory of it.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When consumers of the generated file use CMake 3.29 or older, the value
of \fBPACKAGE_PREFIX_DIR\fP can be changed by a call to
\fI\%find_dependency()\fP or \fI\%find_package()\fP\&.
If a project relies on \fBPACKAGE_PREFIX_DIR\fP, it is the project\(aqs
responsibility to ensure that the value of \fBPACKAGE_PREFIX_DIR\fP is
preserved across any such calls, or any other calls which might include
another file generated by \fBconfigure_package_config_file()\fP\&.
.UNINDENT
.UNINDENT

.sp
Added in version 3.1: If the \fBINSTALL_PREFIX\fP argument is passed, this is used as the base path to
calculate all the relative paths.  The \fB<path>\fP argument must be an absolute
path.  If this argument is not passed, the \fI\%CMAKE_INSTALL_PREFIX\fP
variable will be used instead.  The default value is good when generating a
\fBFooConfig.cmake\fP file to use your package from the install tree.  When
generating a \fBFooConfig.cmake\fP file to use your package from the build tree,
this option should be used.

.sp
By default, \fBconfigure_package_config_file()\fP also generates two helper
macros, \fBset_and_check()\fP and \fBcheck_required_components()\fP, into the
\fBFooConfig.cmake\fP file.
.sp
\fBset_and_check()\fP should be used instead of the normal \fI\%set()\fP command
for setting directories and file locations.  In addition to setting the
variable, it also checks that the referenced file or directory actually exists
and fails with a fatal error if it doesn\(aqt.  This ensures that the generated
\fBFooConfig.cmake\fP file does not contain wrong references.
Add the \fBNO_SET_AND_CHECK_MACRO\fP option to prevent the generation of the
\fBset_and_check()\fP macro in the \fBFooConfig.cmake\fP file.
.sp
\fBcheck_required_components(<PackageName>)\fP should be called at the end of
the \fBFooConfig.cmake\fP file. This macro checks whether all requested,
non\-optional components have been found, and if this is not the case, it sets
the \fBFoo_FOUND\fP variable to \fBFALSE\fP so that the package is considered to
be not found.  It does that by testing the \fBFoo_<Component>_FOUND\fP
variables for all requested required components.  This macro should be
called even if the package doesn\(aqt provide any components to make sure
users are not specifying components erroneously.  Add the
\fBNO_CHECK_REQUIRED_COMPONENTS_MACRO\fP option to prevent the generation of the
\fBcheck_required_components()\fP macro in the \fBFooConfig.cmake\fP file.
.sp
See also \fI\%Example Generating Package Files\fP\&.
.SS Generating a Package Version File
.INDENT 0.0
.TP
.B write_basic_package_version_file
Create a version file for a project:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
write_basic_package_version_file(<filename>
  [VERSION <major.minor.patch>]
  COMPATIBILITY <AnyNewerVersion|SameMajorVersion|SameMinorVersion|ExactVersion>
  [ARCH_INDEPENDENT] )
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Writes a file for use as a \fB<PackageName>ConfigVersion.cmake\fP file to
\fB<filename>\fP\&.  See the documentation of \fI\%find_package()\fP for
details on such files.
.sp
\fB<filename>\fP is the output filename, which should be in the build tree.
\fB<major.minor.patch>\fP is the version number of the project to be installed.
.sp
If no \fBVERSION\fP is given, the \fI\%PROJECT_VERSION\fP variable is used.
If this hasn\(aqt been set, it errors out.
.sp
The \fBCOMPATIBILITY\fP mode \fBAnyNewerVersion\fP means that the installed
package version will be considered compatible if it is newer or exactly the
same as the requested version.  This mode should be used for packages which
are fully backward compatible, also across major versions.
If \fBSameMajorVersion\fP is used instead, then the behavior differs from
\fBAnyNewerVersion\fP in that the major version number must be the same as
requested, e.g.  version 2.0 will not be considered compatible if 1.0 is
requested.  This mode should be used for packages which guarantee backward
compatibility within the same major version.
If \fBSameMinorVersion\fP is used, the behavior is the same as
\fBSameMajorVersion\fP, but both major and minor version must be the same as
requested, e.g version 0.2 will not be compatible if 0.1 is requested.
If \fBExactVersion\fP is used, then the package is only considered compatible if
the requested version matches exactly its own version number (not considering
the tweak version).  For example, version 1.2.3 of a package is only
considered compatible to requested version 1.2.3.  This mode is for packages
without compatibility guarantees.
If your project has more elaborate version matching rules, you will need to
write your own custom \fB<PackageName>ConfigVersion.cmake\fP file instead of
using this macro.
.sp
Added in version 3.11: The \fBSameMinorVersion\fP compatibility mode.

.sp
Added in version 3.14: If \fBARCH_INDEPENDENT\fP is given, the installed package version will be
considered compatible even if it was built for a different architecture than
the requested architecture.  Otherwise, an architecture check will be performed,
and the package will be considered compatible only if the architecture matches
exactly.  For example, if the package is built for a 32\-bit architecture, the
package is only considered compatible if it is used on a 32\-bit architecture,
unless \fBARCH_INDEPENDENT\fP is given, in which case the package is considered
compatible on any architecture.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBARCH_INDEPENDENT\fP is intended for header\-only libraries or
similar packages with no binaries.
.UNINDENT
.UNINDENT

.sp
Added in version 3.19: The version file generated by \fBAnyNewerVersion\fP, \fBSameMajorVersion\fP and
\fBSameMinorVersion\fP arguments of \fBCOMPATIBILITY\fP handle the version range,
if one is specified (see \fI\%find_package()\fP command for the details).
\fBExactVersion\fP mode is incompatible with version ranges and will display an
author warning if one is specified.

.sp
Internally, this macro executes \fI\%configure_file()\fP to create the
resulting version file.  Depending on the \fBCOMPATIBILITY\fP, the corresponding
\fBBasicConfigVersion\-<COMPATIBILITY>.cmake.in\fP file is used.
Please note that these files are internal to CMake and you should not call
\fI\%configure_file()\fP on them yourself, but they can be used as a starting
point to create more sophisticated custom \fB<PackageName>ConfigVersion.cmake\fP
files.
.SS Generating an Apple Platform Selection File
.INDENT 0.0
.TP
.B generate_apple_platform_selection_file
Added in version 3.29.

.sp
Create an Apple platform selection file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
generate_apple_platform_selection_file(<filename>
  INSTALL_DESTINATION <path>
  [INSTALL_PREFIX <path>]
  [MACOS_INCLUDE_FILE <file>]
  [IOS_INCLUDE_FILE <file>]
  [IOS_SIMULATOR_INCLUDE_FILE <file>]
  [IOS_CATALYST_INCLUDE_FILE <file>]
  [TVOS_INCLUDE_FILE <file>]
  [TVOS_SIMULATOR_INCLUDE_FILE <file>]
  [WATCHOS_INCLUDE_FILE <file>]
  [WATCHOS_SIMULATOR_INCLUDE_FILE <file>]
  [VISIONOS_INCLUDE_FILE <file>]
  [VISIONOS_SIMULATOR_INCLUDE_FILE <file>]
  [ERROR_VARIABLE <variable>]
  )
.EE
.UNINDENT
.UNINDENT
.sp
Write a file that includes an Apple\-platform\-specific \fB\&.cmake\fP file,
e.g., for use as \fB<PackageName>Config.cmake\fP\&.  This can be used in
conjunction with the \fBXCFRAMEWORK_LOCATION\fP argument of
\fI\%export(SETUP)\fP to export packages in a way that a project
built for any Apple platform can use them.
.INDENT 7.0
.TP
.B \fBINSTALL_DESTINATION <path>\fP
Path to which the generated file will be installed by the caller, e.g.,
via \fI\%install(FILES)\fP\&.  The path may be either relative to the
\fBINSTALL_PREFIX\fP or absolute.
.TP
.B \fBINSTALL_PREFIX <path>\fP
Path prefix to which the package will be installed by the caller.
The \fB<path>\fP argument must be an absolute path.  If this argument
is not passed, the \fI\%CMAKE_INSTALL_PREFIX\fP variable will be
used instead.
.TP
.B \fBMACOS_INCLUDE_FILE <file>\fP
File to include if the platform is macOS.
.TP
.B \fBIOS_INCLUDE_FILE <file>\fP
File to include if the platform is iOS.
.TP
.B \fBIOS_SIMULATOR_INCLUDE_FILE <file>\fP
File to include if the platform is iOS Simulator.
.TP
.B \fBIOS_CATALYST_INCLUDE_FILE <file>\fP
Added in version 3.31.

.sp
File to include if the platform is iOS Catalyst.
.TP
.B \fBTVOS_INCLUDE_FILE <file>\fP
File to include if the platform is tvOS.
.TP
.B \fBTVOS_SIMULATOR_INCLUDE_FILE <file>\fP
File to include if the platform is tvOS Simulator.
.TP
.B \fBWATCHOS_INCLUDE_FILE <file>\fP
File to include if the platform is watchOS.
.TP
.B \fBWATCHOS_SIMULATOR_INCLUDE_FILE <file>\fP
File to include if the platform is watchOS Simulator.
.TP
.B \fBVISIONOS_INCLUDE_FILE <file>\fP
File to include if the platform is visionOS.
.TP
.B \fBVISIONOS_SIMULATOR_INCLUDE_FILE <file>\fP
File to include if the platform is visionOS Simulator.
.TP
.B \fBERROR_VARIABLE <variable>\fP
If the consuming project is built for an unsupported platform,
set \fB<variable>\fP to an error message.  The includer may use this
information to pretend the package was not found.  If this option
is not given, the default behavior is to issue a fatal error.
.UNINDENT
.sp
If any of the optional include files is not specified, and the consuming
project is built for its corresponding platform, the generated file will
consider the platform to be unsupported.  The behavior is determined
by the \fBERROR_VARIABLE\fP option.
.UNINDENT
.SS Generating an Apple Architecture Selection File
.INDENT 0.0
.TP
.B generate_apple_architecture_selection_file
Added in version 3.29.

.sp
Create an Apple architecture selection file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
generate_apple_architecture_selection_file(<filename>
  INSTALL_DESTINATION <path>
  [INSTALL_PREFIX <path>]
  [SINGLE_ARCHITECTURES <arch>...
   SINGLE_ARCHITECTURE_INCLUDE_FILES <file>...]
  [UNIVERSAL_ARCHITECTURES <arch>...
   UNIVERSAL_INCLUDE_FILE <file>]
  [ERROR_VARIABLE <variable>]
  )
.EE
.UNINDENT
.UNINDENT
.sp
Write a file that includes an Apple\-architecture\-specific \fB\&.cmake\fP file
based on \fI\%CMAKE_OSX_ARCHITECTURES\fP, e.g., for inclusion from an
Apple\-specific \fB<PackageName>Config.cmake\fP file.
.INDENT 7.0
.TP
.B \fBINSTALL_DESTINATION <path>\fP
Path to which the generated file will be installed by the caller, e.g.,
via \fI\%install(FILES)\fP\&.  The path may be either relative to the
\fBINSTALL_PREFIX\fP or absolute.
.TP
.B \fBINSTALL_PREFIX <path>\fP
Path prefix to which the package will be installed by the caller.
The \fB<path>\fP argument must be an absolute path.  If this argument
is not passed, the \fI\%CMAKE_INSTALL_PREFIX\fP variable will be
used instead.
.TP
.B \fBSINGLE_ARCHITECTURES <arch>...\fP
Architectures provided by entries of \fBSINGLE_ARCHITECTURE_INCLUDE_FILES\fP\&.
.TP
.B \fBSINGLE_ARCHITECTURE_INCLUDE_FILES <file>...\fP
Architecture\-specific files.  One of them will be loaded
when \fI\%CMAKE_OSX_ARCHITECTURES\fP contains a single
architecture matching the corresponding entry of
\fBSINGLE_ARCHITECTURES\fP\&.
.TP
.B \fBUNIVERSAL_ARCHITECTURES <arch>...\fP
Architectures provided by the \fBUNIVERSAL_INCLUDE_FILE\fP\&.
.sp
The list may include \fB$(ARCHS_STANDARD)\fP to support consumption using
the \fI\%Xcode\fP generator, but the architectures should always
be listed individually too.
.TP
.B \fBUNIVERSAL_INCLUDE_FILE <file>\fP
A file to load when \fI\%CMAKE_OSX_ARCHITECTURES\fP contains
a (non\-strict) subset of the \fBUNIVERSAL_ARCHITECTURES\fP and
does not match any one of the \fBSINGLE_ARCHITECTURES\fP\&.
.TP
.B \fBERROR_VARIABLE <variable>\fP
If the consuming project is built for an unsupported architecture,
set \fB<variable>\fP to an error message.  The includer may use this
information to pretend the package was not found.  If this option
is not given, the default behavior is to issue a fatal error.
.UNINDENT
.UNINDENT
.SS Example Generating Package Files
.sp
Example using both the \fI\%configure_package_config_file()\fP and
\fI\%write_basic_package_version_file()\fP commands:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(GNUInstallDirs)
set(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/Foo
    CACHE PATH \(dqLocation of header files\(dq )
set(SYSCONFIG_INSTALL_DIR ${CMAKE_INSTALL_SYSCONFDIR}/foo
    CACHE PATH \(dqLocation of configuration files\(dq )
#...
include(CMakePackageConfigHelpers)
configure_package_config_file(FooConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake
  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Foo
  PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)
write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake
  VERSION 1.2.3
  COMPATIBILITY SameMajorVersion )
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Foo )
.EE
.UNINDENT
.UNINDENT
.sp
\fBFooConfig.cmake.in\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(FOO_VERSION x.y.z)
\&...
@PACKAGE_INIT@
\&...
set_and_check(FOO_INCLUDE_DIR \(dq@PACKAGE_INCLUDE_INSTALL_DIR@\(dq)
set_and_check(FOO_SYSCONFIG_DIR \(dq@PACKAGE_SYSCONFIG_INSTALL_DIR@\(dq)

check_required_components(Foo)
.EE
.UNINDENT
.UNINDENT
.SS CMakePrintHelpers
.sp
This module provides convenience commands, primarily intended for debugging,
to print the values of properties and variables.
.sp
Load this module in CMake with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePrintHelpers)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following commands:
.INDENT 0.0
.TP
.B cmake_print_properties
Prints the values of properties for the specified targets, source files,
directories, tests, or cache entries:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_print_properties(
  <TARGETS       [<targets>...] |
   SOURCES       [<sources>...] |
   DIRECTORIES   [<dirs>...]    |
   TESTS         [<tests>...]   |
   CACHE_ENTRIES [<entries>...] >
  PROPERTIES [<properties>...]
)
.EE
.UNINDENT
.UNINDENT
.sp
Exactly one of the scope keywords must be specified.  The scope keyword
and its arguments must appear before the \fBPROPERTIES\fP keyword in the
argument list.
.UNINDENT
.INDENT 0.0
.TP
.B cmake_print_variables
Prints each variable name followed by its value:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_print_variables([<vars>...])
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.sp
Printing the \fBLOCATION\fP and \fBINTERFACE_INCLUDE_DIRECTORIES\fP properties for
both targets \fBfoo\fP and \fBbar\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePrintHelpers)

cmake_print_properties(
  TARGETS foo bar
  PROPERTIES LOCATION INTERFACE_INCLUDE_DIRECTORIES
)
.EE
.UNINDENT
.UNINDENT
.sp
Gives:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\-\-
 Properties for TARGET foo:
   foo.LOCATION = \(dq/usr/lib/libfoo.so\(dq
   foo.INTERFACE_INCLUDE_DIRECTORIES = \(dq/usr/include;/usr/include/foo\(dq
 Properties for TARGET bar:
   bar.LOCATION = \(dq/usr/lib/libbar.so\(dq
   bar.INTERFACE_INCLUDE_DIRECTORIES = \(dq/usr/include;/usr/include/bar\(dq
.EE
.UNINDENT
.UNINDENT
.sp
Printing given variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePrintHelpers)

cmake_print_variables(CMAKE_C_COMPILER CMAKE_MAJOR_VERSION NOT_EXISTS)
.EE
.UNINDENT
.UNINDENT
.sp
Gives:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\-\- CMAKE_C_COMPILER=\(dq/usr/bin/cc\(dq ; CMAKE_MAJOR_VERSION=\(dq3\(dq ; NOT_EXISTS=\(dq\(dq
.EE
.UNINDENT
.UNINDENT
.SS CMakePrintSystemInformation
.sp
This module can be used for diagnostics to print system information.
.SS Examples
.sp
Including this module in a project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePrintSystemInformation)
.EE
.UNINDENT
.UNINDENT
.sp
prints various internal CMake variables.  For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
CMAKE_SYSTEM is Linux\-6.11.0\-17\-generic Linux 6.11.0\-17\-generic x86_64
CMAKE_SYSTEM file is Platform/Linux
CMAKE_C_COMPILER is /usr/bin/cc
CMAKE_CXX_COMPILER is /usr/bin/c++
CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS is \-shared
CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS is \-shared
\&...
.EE
.UNINDENT
.UNINDENT
.SS CMakePushCheckState
.sp
This module provides commands for managing the state of variables that influence
how various CMake check commands (e.g., \fI\%check_symbol_exists()\fP, etc.)
are performed.
.sp
Load this module in CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePushCheckState)
.EE
.UNINDENT
.UNINDENT
.sp
This module provides the following commands, which are useful for scoped
configuration, for example, in CMake modules or when performing checks in a
controlled environment, ensuring that temporary modifications are isolated
to the scope of the check and do not propagate into other parts of the build
system:
.INDENT 0.0
.IP \(bu 2
\fI\%cmake_push_check_state()\fP
.IP \(bu 2
\fI\%cmake_reset_check_state()\fP
.IP \(bu 2
\fI\%cmake_pop_check_state()\fP
.UNINDENT
.SS Affected Variables
.sp
The following CMake variables are saved, reset, and restored by this module\(aqs
commands:
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_FLAGS\fP
A space\-separated string of additional flags to pass to the compiler.
A \fI\%semicolon\-separated list\fP will not work.
The contents of \fI\%CMAKE_<LANG>_FLAGS\fP and its associated
configuration\-specific \fI\%CMAKE_<LANG>_FLAGS_<CONFIG>\fP variables
are automatically prepended to the compiler command before the contents of
this variable.
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_DEFINITIONS\fP
A \fI\%semicolon\-separated list\fP of compiler
definitions, each of the form \fB\-DFOO\fP or \fB\-DFOO=bar\fP\&.  A definition for
the name specified by the result variable argument of the check
command is also added automatically.
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_INCLUDES\fP
A \fI\%semicolon\-separated list\fP of header
search paths to pass to the compiler.  These will be the only header
search paths used; the contents of the \fI\%INCLUDE_DIRECTORIES\fP
directory property will be ignored.
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_LINK_OPTIONS\fP
Added in version 3.14.

.sp
A \fI\%semicolon\-separated list\fP of options to
add to the link command (see \fI\%try_compile()\fP for further details).
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_LIBRARIES\fP
A \fI\%semicolon\-separated list\fP of libraries to
add to the link command.  These can be the names of system libraries, or
they can be \fI\%Imported Targets\fP (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_LINK_DIRECTORIES\fP
Added in version 3.31.

.sp
A \fI\%semicolon\-separated list\fP of library search
paths to pass to the linker (see \fI\%try_compile()\fP for further
details).
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_REQUIRED_QUIET\fP
Added in version 3.1.

.sp
If this variable evaluates to a boolean true value, all status messages
associated with the check will be suppressed.
.UNINDENT
.INDENT 0.0
.TP
.B \fBCMAKE_EXTRA_INCLUDE_FILES\fP
Added in version 3.6: Previously used already by the \fI\%check_type_size()\fP command;  now
also supported by this module.

.sp
A \fI\%semicolon\-separated list\fP of extra header
files to include when performing the check.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Other CMake variables, such as \fI\%CMAKE_<LANG>_FLAGS\fP, propagate
to all checks regardless of commands provided by this module, as those
fundamental variables are designed to influence the global state of the
build system.
.UNINDENT
.UNINDENT
.SS Commands
.INDENT 0.0
.TP
.B cmake_push_check_state
Pushes (saves) the current states of the above variables onto a stack:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_push_check_state([RESET])
.EE
.UNINDENT
.UNINDENT
.sp
Use this command to preserve the current configuration before making
temporary modifications for specific checks.
.INDENT 7.0
.TP
.B \fBRESET\fP
When this option is specified, the command not only saves the current states
of the listed variables but also resets them to empty, allowing them to be
reconfigured from a clean state.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cmake_reset_check_state
Resets (clears) the contents of the variables listed above to empty states:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_reset_check_state()
.EE
.UNINDENT
.UNINDENT
.sp
Use this command when performing multiple sequential checks that require
entirely new configurations, ensuring no previous configuration
unintentionally carries over.
.UNINDENT
.INDENT 0.0
.TP
.B cmake_pop_check_state
Restores the states of the variables listed above to their values at the time
of the most recent \fBcmake_push_check_state()\fP call:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_pop_check_state()
.EE
.UNINDENT
.UNINDENT
.sp
Use this command to revert temporary changes made during a check.  To
prevent unexpected behavior, pair each \fBcmake_push_check_state()\fP with a
corresponding \fBcmake_pop_check_state()\fP\&.
.UNINDENT
.SS Examples
.SS Example: Isolated Check With Compile Definitions
.sp
In the following example, a check for the C symbol \fBmemfd_create()\fP is
performed with an additional \fB_GNU_SOURCE\fP compile definition,  without
affecting global compile flags.  The \fBRESET\fP option is used to ensure
that any prior values of the check\-related variables are explicitly cleared
before the check.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePushCheckState)

# Save and reset the current state
cmake_push_check_state(RESET)

# Perform check with specific compile definitions
set(CMAKE_REQUIRED_DEFINITIONS \-D_GNU_SOURCE)
include(CheckSymbolExists)
check_symbol_exists(memfd_create \(dqsys/mman.h\(dq HAVE_MEMFD_CREATE)

# Restore the original state
cmake_pop_check_state()
.EE
.UNINDENT
.UNINDENT
.SS Example: Nested Configuration Scopes
.sp
In the following example, variable states are pushed onto the stack multiple
times, allowing for sequential or nested checks.  Each
\fBcmake_pop_check_state()\fP restores the most recent pushed states.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakePushCheckState)

# Save and reset the current state
cmake_push_check_state(RESET)

# Perform the first check with additional libraries
set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_DL_LIBS})
include(CheckSymbolExists)
check_symbol_exists(dlopen \(dqdlfcn.h\(dq HAVE_DLOPEN)

# Save current state
cmake_push_check_state()

# Perform the second check with libraries and additional compile definitions
set(CMAKE_REQUIRED_DEFINITIONS \-D_GNU_SOURCE)
check_symbol_exists(dladdr \(dqdlfcn.h\(dq HAVE_DLADDR)

message(STATUS \(dq${CMAKE_REQUIRED_DEFINITIONS}\(dq)
# Output: \-D_GNU_SOURCE

# Restore the previous state
cmake_pop_check_state()

message(STATUS \(dq${CMAKE_REQUIRED_DEFINITIONS}\(dq)
# Output here is empty

# Reset variables to prepare for the next check
cmake_reset_check_state()

# Perform the next check only with additional compile definitions
set(CMAKE_REQUIRED_DEFINITIONS \-D_GNU_SOURCE)
check_symbol_exists(dl_iterate_phdr \(dqlink.h\(dq HAVE_DL_ITERATE_PHDR)

# Restore the original state
cmake_pop_check_state()
.EE
.UNINDENT
.UNINDENT
.SS CMakeVerifyManifest
.sp
Use this script to verify that embedded manifests and side\-by\-side
manifests for a project match.
.sp
This script first recursively globs \fB*.manifest\fP files from
the current directory and creates a list of allowed version.
Additional versions can be passed by setting \fBallow_versions\fP
from the invocation command.
Next, the script globs \fB*.exe\fP and \fB*.dll\fP files.  Each
\fB\&.exe\fP and \fB\&.dll\fP file is scanned for embedded manifests and
the versions of CRT are checked to be in the list of allowed
version.
.SS Example
.sp
To run this script, navigate to a directory and run the script
with \fBcmake \-P\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake \-Dallow_versions=8.0.50608.0 \-PCMakeVerifyManifest.cmake
.EE
.UNINDENT
.UNINDENT
.sp
This call allows an embedded manifest of 8.0.50608.0 to be used
in a project, even if that version was not found in a
\fB\&.manifest\fP file.
.SS CPack
.sp
Configure generators for binary installers and source packages.
.SS Introduction
.sp
The CPack module generates the configuration files \fBCPackConfig.cmake\fP
and \fBCPackSourceConfig.cmake\fP\&. They are intended for use in a subsequent
run of  the \fI\%cpack\fP program where they steer the generation
of installers or/and source packages.
.sp
Depending on the CMake generator, the CPack module may also add two new build
targets, \fBpackage\fP and \fBpackage_source\fP\&. See the \fI\%packaging targets\fP
section below for details.
.sp
The generated binary installers will contain all files that have been installed
via CMake\(aqs \fI\%install()\fP command (and the deprecated commands
\fI\%install_files()\fP, \fI\%install_programs()\fP, and
\fI\%install_targets()\fP). Note that the \fBDESTINATION\fP option of the
\fI\%install()\fP command must be a relative path; otherwise installed files
are ignored by CPack.
.sp
Certain kinds of binary installers can be configured such that users can select
individual application components to install.  See the \fI\%CPackComponent\fP
module for further details.
.sp
Source packages (configured through \fBCPackSourceConfig.cmake\fP and generated
by the \fI\%CPack Archive Generator\fP) will contain all source files in
the project directory except those specified in
\fI\%CPACK_SOURCE_IGNORE_FILES\fP\&.
.SS CPack Generators
.sp
The \fI\%CPACK_GENERATOR\fP variable has different meanings in different
contexts.  In a \fBCMakeLists.txt\fP file, \fI\%CPACK_GENERATOR\fP is a
\fIlist of generators\fP: and when \fI\%cpack\fP is run with no other
arguments, it will iterate over that list and produce one package for each
generator.  In a \fI\%CPACK_PROJECT_CONFIG_FILE\fP,
\fI\%CPACK_GENERATOR\fP is a \fIstring naming a single generator\fP\&.  If you
need per\-cpack\-generator logic to control \fIother\fP cpack settings, then you
need a \fI\%CPACK_PROJECT_CONFIG_FILE\fP\&.
If set, the \fI\%CPACK_PROJECT_CONFIG_FILE\fP is included automatically
on a per\-generator basis.  It only need contain overrides.
.sp
Here\(aqs how it works:
.INDENT 0.0
.IP \(bu 2
\fI\%cpack\fP runs
.IP \(bu 2
it includes \fBCPackConfig.cmake\fP
.IP \(bu 2
it iterates over the generators given by the \fI\%\-G\fP command
line option, or if no such option was specified, over the list of generators
given by the \fI\%CPACK_GENERATOR\fP variable set in the \fBCPackConfig.cmake\fP
input file.
.IP \(bu 2
foreach generator, it then
.INDENT 2.0
.IP \(bu 2
sets \fI\%CPACK_GENERATOR\fP to the one currently being iterated
.IP \(bu 2
includes the \fI\%CPACK_PROJECT_CONFIG_FILE\fP
.IP \(bu 2
produces the package for that generator
.UNINDENT
.UNINDENT
.sp
This is the key: For each generator listed in \fI\%CPACK_GENERATOR\fP in
\fBCPackConfig.cmake\fP, cpack will \fIreset\fP \fI\%CPACK_GENERATOR\fP
internally to \fIthe one currently being used\fP and then include the
\fI\%CPACK_PROJECT_CONFIG_FILE\fP\&.
.sp
For a list of available generators, see \fI\%cpack\-generators(7)\fP\&.
.SS Targets package and package_source
.sp
If CMake is run with the Makefile, Ninja, or Xcode generator, then
\fBinclude(CPack)\fP generates a target \fBpackage\fP\&. This makes it possible
to build a binary installer from CMake, Make, or Ninja: Instead of \fBcpack\fP,
one may call \fBcmake \-\-build . \-\-target package\fP or \fBmake package\fP or
\fBninja package\fP\&. The VS generator creates an uppercase target \fBPACKAGE\fP\&.
.sp
If CMake is run with the Makefile or Ninja generator, then \fBinclude(CPack)\fP
also generates a target \fBpackage_source\fP\&. To build a source package,
instead of \fBcpack \-G TGZ \-\-config CPackSourceConfig.cmake\fP one may call
\fBcmake \-\-build . \-\-target package_source\fP, \fBmake package_source\fP,
or \fBninja package_source\fP\&.
.SS Variables common to all CPack Generators
.sp
Before including this CPack module in your \fBCMakeLists.txt\fP file, there
are a variety of variables that can be set to customize the resulting
installers.  The most commonly\-used variables are:
.INDENT 0.0
.TP
.B CPACK_PACKAGE_NAME
The name of the package (or application).  If not specified, it defaults to
the project name.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_VENDOR
The name of the package vendor. (e.g., \(dqKitware\(dq).  The default is \(dqHumanity\(dq.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_DIRECTORY
The directory in which CPack is doing its packaging.  If it is not set
then this will default (internally) to the build dir.  This variable may
be defined in a CPack config file or from the \fI\%cpack\fP
command line option \fB\-B\fP\&.  If set, the command line option overrides the
value found in the config file.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_VERSION_MAJOR
Package major version.  This variable will always be set, but its default
value depends on whether or not version details were given to the
\fI\%project()\fP command in the top level CMakeLists.txt file.  If version
details were given, the default value will be
\fI\%CMAKE_PROJECT_VERSION_MAJOR\fP\&.  If no version details were given,
a default version of 0.1.1 will be assumed, leading to
\fBCPACK_PACKAGE_VERSION_MAJOR\fP having a default value of 0.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_VERSION_MINOR
Package minor version.  The default value is determined based on whether or
not version details were given to the \fI\%project()\fP command in the top
level CMakeLists.txt file.  If version details were given, the default
value will be \fI\%CMAKE_PROJECT_VERSION_MINOR\fP, but if no minor
version component was specified then \fBCPACK_PACKAGE_VERSION_MINOR\fP will be
left unset.  If no project version was given at all, a default version of
0.1.1 will be assumed, leading to \fBCPACK_PACKAGE_VERSION_MINOR\fP having a
default value of 1.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_VERSION_PATCH
Package patch version.  The default value is determined based on whether or
not version details were given to the \fI\%project()\fP command in the top
level CMakeLists.txt file.  If version details were given, the default
value will be \fI\%CMAKE_PROJECT_VERSION_PATCH\fP, but if no patch
version component was specified then \fBCPACK_PACKAGE_VERSION_PATCH\fP will be
left unset.  If no project version was given at all, a default version of
0.1.1 will be assumed, leading to \fBCPACK_PACKAGE_VERSION_PATCH\fP having a
default value of 1.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_DESCRIPTION
A description of the project, used in places such as the introduction
screen of CPack\-generated Windows installers.  If not set, the value of
this variable is populated from the file named by
\fI\%CPACK_PACKAGE_DESCRIPTION_FILE\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_DESCRIPTION_FILE
A text file used to describe the project when
\fI\%CPACK_PACKAGE_DESCRIPTION\fP is not explicitly set.  The default
value for \fBCPACK_PACKAGE_DESCRIPTION_FILE\fP points to a built\-in template
file \fBTemplates/CPack.GenericDescription.txt\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_DESCRIPTION_SUMMARY
Short description of the project (only a few words).  If the
\fI\%CMAKE_PROJECT_DESCRIPTION\fP variable is set, it is used as the
default value, otherwise the default will be a string generated by CMake
based on \fI\%CMAKE_PROJECT_NAME\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_HOMEPAGE_URL
Project homepage URL.  The default value is taken from the
\fI\%CMAKE_PROJECT_HOMEPAGE_URL\fP variable, which is set by the top
level \fI\%project()\fP command, or else the default will be empty if no
URL was provided to \fI\%project()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_FILE_NAME
The name of the package file to generate, not including the
extension.  For example, \fBcmake\-2.6.1\-Linux\-i686\fP\&.  The default value
is:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
${CPACK_PACKAGE_NAME}\-${CPACK_PACKAGE_VERSION}\-${CPACK_SYSTEM_NAME}
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_INSTALL_DIRECTORY
Installation directory on the target system. This may be used by some
CPack generators like NSIS to create an installation directory e.g.,
\(dqCMake 2.5\(dq below the installation prefix.  All installed elements will be
put inside this directory.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_ICON
A branding image that will be displayed inside the installer (used by GUI
installers).
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_CHECKSUM
Added in version 3.7.

.sp
An algorithm that will be used to generate an additional file with the
checksum of the package.  The output file name will be:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
${CPACK_PACKAGE_FILE_NAME}.${CPACK_PACKAGE_CHECKSUM}
.EE
.UNINDENT
.UNINDENT
.sp
Supported algorithms are those listed by the
\fI\%string(<HASH>)\fP command.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PROJECT_CONFIG_FILE
CPack\-time project CPack configuration file.  This file is included at cpack
time, once per generator after CPack has set \fI\%CPACK_GENERATOR\fP
to the actual generator being used.  It allows per\-generator setting of
\fBCPACK_*\fP variables at cpack time.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_RESOURCE_FILE_LICENSE
License to be embedded in the installer.  It will typically be displayed
to the user by the produced installer (often with an explicit \(dqAccept\(dq
button, for graphical installers) prior to installation.  This license
file is NOT added to the installed files but is used by some CPack generators
like NSIS.  If you want to use UTF\-8 characters, the file needs to be encoded
in UTF\-8 BOM.  If you want to install a license file (may be the same as this
one) along with your project, you must add an appropriate CMake
\fI\%install()\fP command in your \fBCMakeLists.txt\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_RESOURCE_FILE_README
ReadMe file to be embedded in the installer.  It typically describes in
some detail the purpose of the project during the installation.  Not all
CPack generators use this file.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_RESOURCE_FILE_WELCOME
Welcome file to be embedded in the installer.  It welcomes users to this
installer.  Typically used in the graphical installers on Windows and Mac
OS X.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_MONOLITHIC_INSTALL
Disables the component\-based installation mechanism.  When set, the
component specification is ignored and all installed items are put in a
single \(dqMONOLITHIC\(dq package.  Some CPack generators do monolithic
packaging by default and may be asked to do component packaging by
setting \fBCPACK_<GENNAME>_COMPONENT_INSTALL\fP to \fBTRUE\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_GENERATOR
List of CPack generators to use.  If not specified, CPack will create a
set of options following the naming pattern
\fI\%CPACK_BINARY_<GENNAME>\fP (e.g. \fBCPACK_BINARY_NSIS\fP) allowing
the user to enable/disable individual generators.  If the \fI\%\-G\fP
option is given on the \fI\%cpack\fP command line, it will override
this variable and any \fBCPACK_BINARY_<GENNAME>\fP options.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_OUTPUT_CONFIG_FILE
The name of the CPack binary configuration file.  This file is the CPack
configuration generated by the CPack module for binary installers.
Defaults to \fBCPackConfig.cmake\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_EXECUTABLES
Lists each of the executables and associated text label to be used to
create Start Menu shortcuts.  For example, setting this to the list
\fBccmake;CMake\fP will create a shortcut named \(dqCMake\(dq that will execute the
installed executable \fBccmake\fP\&. Not all CPack generators use it (at least
NSIS, Inno Setup and WIX do).
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_STRIP_FILES
List of files to be stripped.  Starting with CMake 2.6.0,
\fBCPACK_STRIP_FILES\fP will be a boolean variable which enables
stripping of all files (a list of files evaluates to \fBTRUE\fP in CMake,
so this change is compatible).
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_VERBATIM_VARIABLES
Added in version 3.4.

.sp
If set to \fBTRUE\fP, values of variables prefixed with \fBCPACK_\fP will be
escaped before being written to the configuration files, so that the cpack
program receives them exactly as they were specified.  If not, characters
like quotes and backslashes can cause parsing errors or alter the value
received by the cpack program.  Defaults to \fBFALSE\fP for backwards
compatibility.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_THREADS
Added in version 3.20.

.sp
Number of threads to use when performing parallelized operations, such
as compressing the installer package.
.sp
Some compression methods used by CPack generators such as Debian or Archive
may take advantage of multiple CPU cores to speed up compression.
\fBCPACK_THREADS\fP can be set to specify how many threads will be
used for compression.
.sp
A positive integer can be used to specify an exact desired thread count.
.sp
When given a negative integer CPack will use the absolute value
as the upper limit but may choose a lower value based on
the available hardware concurrency.
.sp
Given 0 CPack will try to use all available CPU cores.
.sp
By default \fBCPACK_THREADS\fP is set to \fB1\fP\&.
.sp
The following compression methods may take advantage of multiple cores:
.INDENT 7.0
.TP
.B \fBxz\fP
Supported if CMake is built with a \fBliblzma\fP that supports
parallel compression.
.sp
Added in version 3.21: Official CMake binaries available on \fBcmake.org\fP now ship
with a \fBliblzma\fP that supports parallel compression.
Older versions did not.

.TP
.B \fBzstd\fP
Added in version 3.24.

.sp
Supported if CMake is built with libarchive 3.6 or higher.
Official CMake binaries available on \fBcmake.org\fP support it.
.UNINDENT
.sp
Other compression methods ignore this value and use only one thread.
.UNINDENT
.SS Variables for Source Package Generators
.sp
The following CPack variables are specific to source packages, and
will not affect binary packages:
.INDENT 0.0
.TP
.B CPACK_SOURCE_PACKAGE_FILE_NAME
The name of the source package.  For example \fBcmake\-2.6.1\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_SOURCE_STRIP_FILES
List of files in the source tree that will be stripped.  Starting with
CMake 2.6.0, \fBCPACK_SOURCE_STRIP_FILES\fP will be a boolean
variable which enables stripping of all files (a list of files evaluates
to \fBTRUE\fP in CMake, so this change is compatible).
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_SOURCE_GENERATOR
List of generators used for the source packages.  As with
\fI\%CPACK_GENERATOR\fP, if this is not specified then CPack will
create a set of options (e.g. \fBCPACK_SOURCE_ZIP\fP) allowing
users to select which packages will be generated.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_SOURCE_OUTPUT_CONFIG_FILE
The name of the CPack source configuration file.  This file is the CPack
configuration generated by the CPack module for source installers.
Defaults to \fBCPackSourceConfig.cmake\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_SOURCE_IGNORE_FILES
Pattern of files in the source tree that won\(aqt be packaged when building
a source package.  This is a list of regular expression patterns (that
must be properly escaped), e.g.,
\fB/CVS/;/\e\e.svn/;\e\e.swp$;\e\e.#;/#;.*~;cscope.*\fP
.UNINDENT
.SS Variables for Advanced Use
.sp
The following variables are for advanced uses of CPack:
.INDENT 0.0
.TP
.B CPACK_CMAKE_GENERATOR
What CMake generator should be used if the project is a CMake
project.  Defaults to the value of \fI\%CMAKE_GENERATOR\fP\&.  Few users
will want to change this setting.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_INSTALL_CMAKE_PROJECTS
List of four values that specify what project to install.  The four values
are: Build directory, Project Name, Project Component, Directory.  If
omitted, CPack will build an installer that installs everything.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_SYSTEM_NAME
System name, defaults to the value of \fI\%CMAKE_SYSTEM_NAME\fP,
except on Windows where it will be \fBwin32\fP or \fBwin64\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_VERSION
Package full version, used internally.  By default, this is built from
\fI\%CPACK_PACKAGE_VERSION_MAJOR\fP,
\fI\%CPACK_PACKAGE_VERSION_MINOR\fP, and
\fI\%CPACK_PACKAGE_VERSION_PATCH\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_TOPLEVEL_TAG
Directory for the installed files.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_INSTALL_COMMANDS
Extra commands to install components.  The environment variable
\fBCMAKE_INSTALL_PREFIX\fP is set to the temporary install directory
during execution.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_INSTALL_SCRIPTS
Added in version 3.16.

.sp
Extra CMake scripts executed by CPack during its local staging
installation.  They are executed before installing the files to be packaged.
The scripts are not called by a standalone install (e.g.: \fBmake install\fP).
For every script, the following variables will be set:
\fI\%CMAKE_CURRENT_SOURCE_DIR\fP, \fI\%CMAKE_CURRENT_BINARY_DIR\fP
and \fI\%CMAKE_INSTALL_PREFIX\fP (which is set to the staging install
directory).  The singular form \fBCMAKE_INSTALL_SCRIPT\fP is supported as
an alternative variable for historical reasons, but its value is ignored if
\fBCMAKE_INSTALL_SCRIPTS\fP is set and a warning will be issued.
.sp
See also \fI\%CPACK_PRE_BUILD_SCRIPTS\fP and
\fI\%CPACK_POST_BUILD_SCRIPTS\fP which can be used to specify scripts
to be executed later in the packaging process.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PRE_BUILD_SCRIPTS
Added in version 3.19.

.sp
List of CMake scripts to execute after CPack has installed the files to
be packaged into a staging directory and before producing the package(s)
from those files. See also \fI\%CPACK_INSTALL_SCRIPTS\fP and
\fI\%CPACK_POST_BUILD_SCRIPTS\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_POST_BUILD_SCRIPTS
Added in version 3.19.

.sp
List of CMake scripts to execute after CPack has produced the resultant
packages and before copying them back to the build directory.
See also \fI\%CPACK_INSTALL_SCRIPTS\fP,
\fI\%CPACK_PRE_BUILD_SCRIPTS\fP and \fI\%CPACK_PACKAGE_FILES\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_FILES
Added in version 3.19.

.sp
List of package files created in the staging directory, with each file
provided as a full absolute path.  This variable is populated by CPack
just before invoking the post\-build scripts listed in
\fI\%CPACK_POST_BUILD_SCRIPTS\fP\&.  It is the preferred way for the
post\-build scripts to know the set of package files to operate on.
Projects should not try to set this variable themselves.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_INSTALLED_DIRECTORIES
Extra directories to install.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_PACKAGE_INSTALL_REGISTRY_KEY
Registry key used when installing this project.  This is only used by
installers for Windows.  The default value is based on the installation
directory.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_CREATE_DESKTOP_LINKS
List of desktop links to create.  Each desktop link requires a
corresponding start menu shortcut as created by
\fI\%CPACK_PACKAGE_EXECUTABLES\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_BINARY_<GENNAME>
CPack generated options for binary generators.  The \fBCPack.cmake\fP module
generates (when \fI\%CPACK_GENERATOR\fP is not set) a set of CMake
options (see CMake \fI\%option()\fP command) which may then be used to
select the CPack generator(s) to be used when building the \fBpackage\fP
target or when running \fI\%cpack\fP without the
\fI\%\-G\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_READELF_EXECUTABLE
Added in version 3.25.

.sp
Specify the \fBreadelf\fP executable path used by CPack.
The default value will be taken from the \fBCMAKE_READELF\fP variable, if set,
which may be populated CMake when enabling languages.  If \fBCMAKE_READELF\fP
is not set, CPack will use \fI\%find_program()\fP to determine the
\fBreadelf\fP path when needed.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_OBJCOPY_EXECUTABLE
Added in version 3.25.

.sp
Specify the \fBobjcopy\fP executable path used by CPack.
The default value will be taken from the \fBCMAKE_OBJCOPY\fP variable, if set,
which may be populated by CMake when enabling languages.  If \fBCMAKE_OBJCOPY\fP
is not set, CPack will use \fI\%find_program()\fP to determine the
\fBobjcopy\fP path when needed.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_OBJDUMP_EXECUTABLE
Added in version 3.25.

.sp
Specify the \fBobjdump\fP executable path used by CPack.
The default value will be taken from the \fI\%CMAKE_OBJDUMP\fP variable,
which may be populated by CMake when enabling languages.  If \fBCMAKE_OBJDUMP\fP
is not set, CPack will use \fI\%find_program()\fP to determine the
\fBobjdump\fP path when needed.
.UNINDENT
.SS CPackComponent
.sp
Configure components for binary installers and source packages.
.SS Introduction
.sp
This module is automatically included by \fI\%CPack\fP\&.
.sp
Certain binary installers (especially the graphical installers) generated
by CPack allow users to select individual application \fIcomponents\fP to install.
This module allows developers to configure the packaging of such components.
.sp
Contents is assigned to components by the \fBCOMPONENT\fP
argument of CMake\(aqs \fI\%install()\fP command.  Components can be
annotated with user\-friendly names and descriptions, inter\-component
dependencies, etc., and grouped in various ways to customize the
resulting installer, using the commands described below.
.sp
To specify different groupings for different CPack generators use
a CPACK_PROJECT_CONFIG_FILE.
.SS Variables
.sp
The following variables influence the component\-specific packaging:
.INDENT 0.0
.TP
.B CPACK_COMPONENTS_ALL
The list of component to install.
.sp
The default value of this variable is computed by CPack and contains all
components defined by the project.  The user may set it to only include the
specified components.
.sp
Instead of specifying all the desired components, it is possible to obtain a
list of all defined components and then remove the unwanted ones from the
list. The \fI\%get_cmake_property()\fP command can be used to obtain the
\fBCOMPONENTS\fP property, then the \fI\%list(REMOVE_ITEM)\fP command can be
used to remove the unwanted ones. For example, to use all defined components
except \fBfoo\fP and \fBbar\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_cmake_property(CPACK_COMPONENTS_ALL COMPONENTS)
list(REMOVE_ITEM CPACK_COMPONENTS_ALL \(dqfoo\(dq \(dqbar\(dq)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_<GENNAME>_COMPONENT_INSTALL
Enable/Disable component install for CPack generator <GENNAME>.
.sp
Each CPack Generator (RPM, DEB, ARCHIVE, NSIS, DMG, etc...) has a legacy
default behavior.  e.g.  RPM builds monolithic whereas NSIS builds
component.  One can change the default behavior by setting this variable to
0/1 or OFF/ON.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENTS_GROUPING
Specify how components are grouped for multi\-package component\-aware CPack
generators.
.sp
Some generators like RPM or ARCHIVE (TGZ, ZIP, ...) may generate
several packages files when there are components, depending
on the value of this variable:
.INDENT 7.0
.IP \(bu 2
ONE_PER_GROUP (default): create one package per component group
.IP \(bu 2
IGNORE : create one package per component (ignore the groups)
.IP \(bu 2
ALL_COMPONENTS_IN_ONE : create a single package with all requested
components
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_DISPLAY_NAME
The name to be displayed for a component.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_DESCRIPTION
The description of a component.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_GROUP
The group of a component.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_DEPENDS
The dependencies (list of components) on which this component depends.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_HIDDEN
True if this component is hidden from the user.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_REQUIRED
True if this component is required.
.UNINDENT
.INDENT 0.0
.TP
.B CPACK_COMPONENT_<compName>_DISABLED
True if this component is not selected to be installed by default.
.UNINDENT
.SS Commands
.SS Add component
.INDENT 0.0
.TP
.B cpack_add_component
.UNINDENT
.sp
Describe an installation component.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cpack_add_component(compname
                    [DISPLAY_NAME name]
                    [DESCRIPTION description]
                    [HIDDEN | REQUIRED | DISABLED ]
                    [GROUP group]
                    [DEPENDS comp1 comp2 ... ]
                    [INSTALL_TYPES type1 type2 ... ]
                    [DOWNLOADED]
                    [ARCHIVE_FILE filename]
                    [PLIST filename])
.EE
.UNINDENT
.UNINDENT
.sp
\fBcompname\fP is the name of an installation component, as defined by the
\fBCOMPONENT\fP argument of one or more CMake \fI\%install()\fP commands.
With the \fBcpack_add_component\fP command one can set a name, a description,
and other attributes of an installation component.
One can also assign a component to a component group.
.sp
DISPLAY_NAME is the displayed name of the component, used in graphical
installers to display the component name.  This value can be any
string.
.sp
DESCRIPTION is an extended description of the component, used in
graphical installers to give the user additional information about the
component.  Descriptions can span multiple lines using \fB\en\fP as the
line separator.  Typically, these descriptions should be no more than
a few lines long.
.sp
HIDDEN indicates that this component will be hidden in the graphical
installer, so that the user cannot directly change whether it is
installed or not.
.sp
REQUIRED indicates that this component is required, and therefore will
always be installed.  It will be visible in the graphical installer,
but it cannot be unselected.  (Typically, required components are
shown grayed out).
.sp
DISABLED indicates that this component should be disabled (unselected)
by default.  The user is free to select this component for
installation, unless it is also HIDDEN.
.sp
DEPENDS lists the components on which this component depends.  If this
component is selected, then each of the components listed must also be
selected.  The dependency information is encoded within the installer
itself, so that users cannot install inconsistent sets of components.
.sp
GROUP names the component group of which this component is a part.  If
not provided, the component will be a standalone component, not part
of any component group.  Component groups are described with the
cpack_add_component_group command, detailed below.
.sp
INSTALL_TYPES lists the installation types of which this component is
a part.  When one of these installations types is selected, this
component will automatically be selected.  Installation types are
described with the cpack_add_install_type command, detailed below.
.sp
DOWNLOADED indicates that this component should be downloaded
on\-the\-fly by the installer, rather than packaged in with the
installer itself.  For more information, see the
cpack_configure_downloads command.
.sp
ARCHIVE_FILE provides a name for the archive file created by CPack to
be used for downloaded components.  If not supplied, CPack will create
a file with some name based on CPACK_PACKAGE_FILE_NAME and the name of
the component.  See cpack_configure_downloads for more information.
.sp
PLIST gives a filename that is passed to pkgbuild with the
\fB\-\-component\-plist\fP argument when using the productbuild generator.
.SS Add component group
.INDENT 0.0
.TP
.B cpack_add_component_group
.UNINDENT
.sp
Describes a group of related CPack installation components.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cpack_add_component_group(groupname
                         [DISPLAY_NAME name]
                         [DESCRIPTION description]
                         [PARENT_GROUP parent]
                         [EXPANDED]
                         [BOLD_TITLE])
.EE
.UNINDENT
.UNINDENT
.sp
The cpack_add_component_group describes a group of installation
components, which will be placed together within the listing of
options.  Typically, component groups allow the user to
select/deselect all of the components within a single group via a
single group\-level option.  Use component groups to reduce the
complexity of installers with many options.  groupname is an arbitrary
name used to identify the group in the GROUP argument of the
cpack_add_component command, which is used to place a component in a
group.  The name of the group must not conflict with the name of any
component.
.sp
DISPLAY_NAME is the displayed name of the component group, used in
graphical installers to display the component group name.  This value
can be any string.
.sp
DESCRIPTION is an extended description of the component group, used in
graphical installers to give the user additional information about the
components within that group.  Descriptions can span multiple lines
using \fB\en\fP as the line separator.  Typically, these descriptions
should be no more than a few lines long.
.sp
PARENT_GROUP, if supplied, names the parent group of this group.
Parent groups are used to establish a hierarchy of groups, providing
an arbitrary hierarchy of groups.
.sp
EXPANDED indicates that, by default, the group should show up as
\(dqexpanded\(dq, so that the user immediately sees all of the components
within the group.  Otherwise, the group will initially show up as a
single entry.
.sp
BOLD_TITLE indicates that the group title should appear in bold, to
call the user\(aqs attention to the group.
.SS Add installation type
.INDENT 0.0
.TP
.B cpack_add_install_type
.UNINDENT
.sp
Add a new installation type containing
a set of predefined component selections to the graphical installer.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cpack_add_install_type(typename
                       [DISPLAY_NAME name])
.EE
.UNINDENT
.UNINDENT
.sp
The cpack_add_install_type command identifies a set of preselected
components that represents a common use case for an application.  For
example, a \(dqDeveloper\(dq install type might include an application along
with its header and library files, while an \(dqEnd user\(dq install type
might just include the application\(aqs executable.  Each component
identifies itself with one or more install types via the INSTALL_TYPES
argument to cpack_add_component.
.sp
DISPLAY_NAME is the displayed name of the install type, which will
typically show up in a drop\-down box within a graphical installer.
This value can be any string.
.SS Configure downloads
.INDENT 0.0
.TP
.B cpack_configure_downloads
.UNINDENT
.sp
Configure CPack to download
selected components on\-the\-fly as part of the installation process.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cpack_configure_downloads(site
                          [UPLOAD_DIRECTORY dirname]
                          [ALL]
                          [ADD_REMOVE|NO_ADD_REMOVE])
.EE
.UNINDENT
.UNINDENT
.sp
The cpack_configure_downloads command configures installation\-time
downloads of selected components.  For each downloadable component,
CPack will create an archive containing the contents of that
component, which should be uploaded to the given site.  When the user
selects that component for installation, the installer will download
and extract the component in place.  This feature is useful for
creating small installers that only download the requested components,
saving bandwidth.  Additionally, the installers are small enough that
they will be installed as part of the normal installation process, and
the \(dqChange\(dq button in Windows Add/Remove Programs control panel will
allow one to add or remove parts of the application after the original
installation.  On Windows, the downloaded\-components functionality
requires the ZipDLL plug\-in for NSIS, available at:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
http://nsis.sourceforge.net/ZipDLL_plug\-in
.EE
.UNINDENT
.UNINDENT
.sp
On macOS, installers that download components on\-the\-fly can only
be built and installed on system using macOS 10.5 or later.
.sp
The site argument is a URL where the archives for downloadable
components will reside, e.g.,
\X'tty: link https://cmake.org/files/v3.25/'\fI\%https://cmake.org/files/v3.25/\fP\X'tty: link' All of the archives
produced by CPack should be uploaded to that location.
.sp
UPLOAD_DIRECTORY is the local directory where CPack will create the
various archives for each of the components.  The contents of this
directory should be uploaded to a location accessible by the URL given
in the site argument.  If omitted, CPack will use the directory
CPackUploads inside the CMake binary directory to store the generated
archives.
.sp
The ALL flag indicates that all components be downloaded.  Otherwise,
only those components explicitly marked as DOWNLOADED or that have a
specified ARCHIVE_FILE will be downloaded.  Additionally, the ALL
option implies ADD_REMOVE (unless NO_ADD_REMOVE is specified).
.sp
ADD_REMOVE indicates that CPack should install a copy of the installer
that can be called from Windows\(aq Add/Remove Programs dialog (via the
\(dqModify\(dq button) to change the set of installed components.
NO_ADD_REMOVE turns off this behavior.  This option is ignored on Mac
OS X.
.SS CPackIFW
.sp
Added in version 3.1.

.sp
This module looks for the location of the command\-line utilities supplied with the
\X'tty: link https://doc.qt.io/qtinstallerframework/index.html'\fI\%Qt Installer Framework\fP\X'tty: link'
(QtIFW).
.sp
The module also defines several commands to control the behavior of the
\fI\%CPack IFW Generator\fP\&.
.SS Commands
.sp
The module defines the following commands:
.INDENT 0.0
.TP
.B cpack_ifw_configure_component
Sets the arguments specific to the CPack IFW generator.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cpack_ifw_configure_component(<compname> [COMMON] [ESSENTIAL] [VIRTUAL]
                    [FORCED_INSTALLATION] [REQUIRES_ADMIN_RIGHTS]
                    [NAME <name>]
                    [DISPLAY_NAME <display_name>] # Note: Internationalization supported
                    [DESCRIPTION <description>] # Note: Internationalization supported
                    [UPDATE_TEXT <update_text>]
                    [VERSION <version>]
                    [RELEASE_DATE <release_date>]
                    [SCRIPT <script>]
                    [PRIORITY|SORTING_PRIORITY <sorting_priority>] # Note: PRIORITY is deprecated
                    [DEPENDS|DEPENDENCIES <com_id> ...]
                    [AUTO_DEPEND_ON <comp_id> ...]
                    [LICENSES <display_name> <file_path> ...]
                    [DEFAULT <value>]
                    [USER_INTERFACES <file_path> <file_path> ...]
                    [TRANSLATIONS <file_path> <file_path> ...]
                    [REPLACES <comp_id> ...]
                    [CHECKABLE <value>])
.EE
.UNINDENT
.UNINDENT
.sp
This command should be called after \fI\%cpack_add_component()\fP command.
.INDENT 7.0
.TP
.B \fBCOMMON\fP
if set, then the component will be packaged and installed as part
of a group to which it belongs.
.TP
.B \fBESSENTIAL\fP
Added in version 3.6.

.sp
if set, then the package manager stays disabled until that
component is updated.
.TP
.B \fBVIRTUAL\fP
Added in version 3.8.

.sp
if set, then the component will be hidden from the installer.
It is a equivalent of the \fBHIDDEN\fP option from the
\fI\%cpack_add_component()\fP command.
.TP
.B \fBFORCED_INSTALLATION\fP
Added in version 3.8.

.sp
if set, then the component must always be installed.
It is a equivalent of the \fBREQUIRED\fP option from the
\fI\%cpack_add_component()\fP command.
.TP
.B \fBREQUIRES_ADMIN_RIGHTS\fP
Added in version 3.8.

.sp
set it if the component needs to be installed with elevated permissions.
.TP
.B \fBNAME\fP
is used to create domain\-like identification for this component.
By default used origin component name.
.TP
.B \fBDISPLAY_NAME\fP
Added in version 3.8.

.sp
set to rewrite original name configured by
\fI\%cpack_add_component()\fP command.
.TP
.B \fBDESCRIPTION\fP
Added in version 3.8.

.sp
set to rewrite original description configured by
\fI\%cpack_add_component()\fP command.
.TP
.B \fBUPDATE_TEXT\fP
Added in version 3.8.

.sp
will be added to the component description if this is an update to
the component.
.TP
.B \fBVERSION\fP
is version of component.
By default used \fI\%CPACK_PACKAGE_VERSION\fP\&.
.TP
.B \fBRELEASE_DATE\fP
Added in version 3.8.

.sp
keep empty to auto generate.
.TP
.B \fBSCRIPT\fP
is a relative or absolute path to operations script
for this component.
.TP
.B \fBSORTING_PRIORITY\fP
Added in version 3.8.

.sp
is priority of the component in the tree.
.TP
.B \fBPRIORITY\fP
Deprecated since version 3.8: Old name for \fBSORTING_PRIORITY\fP\&.

.TP
.B \fBDEPENDS\fP, \fBDEPENDENCIES\fP
Added in version 3.8.

.sp
list of dependency component or component group identifiers in
QtIFW style.
.sp
Added in version 3.21.

.sp
Component or group names listed as dependencies may contain hyphens.
This requires QtIFW 3.1 or later.
.TP
.B \fBAUTO_DEPEND_ON\fP
Added in version 3.8.

.sp
list of identifiers of component or component group in QtIFW style
that this component has an automatic dependency on.
.TP
.B \fBLICENSES\fP
pair of <display_name> and <file_path> of license text for this
component. You can specify more then one license.
.TP
.B \fBDEFAULT\fP
Added in version 3.8.

.sp
Possible values are: TRUE, FALSE, and SCRIPT.
Set to FALSE to disable the component in the installer or to SCRIPT
to resolved during runtime (don\(aqt forget add the file of the script
as a value of the \fBSCRIPT\fP option).
.TP
.B \fBUSER_INTERFACES\fP
Added in version 3.7.

.sp
is a list of <file_path> (\(aq.ui\(aq files) representing pages to load.
.TP
.B \fBTRANSLATIONS\fP
Added in version 3.8.

.sp
is a list of <file_path> (\(aq.qm\(aq files) representing translations to load.
.TP
.B \fBREPLACES\fP
Added in version 3.10.

.sp
list of identifiers of component or component group to replace.
.TP
.B \fBCHECKABLE\fP
Added in version 3.10.

.sp
Possible values are: TRUE, FALSE.
Set to FALSE if you want to hide the checkbox for an item.
This is useful when only a few subcomponents should be selected
instead of all.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cpack_ifw_configure_component_group
Sets the arguments specific to the CPack IFW generator.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cpack_ifw_configure_component_group(<groupname> [VIRTUAL]
                    [FORCED_INSTALLATION] [REQUIRES_ADMIN_RIGHTS]
                    [NAME <name>]
                    [DISPLAY_NAME <display_name>] # Note: Internationalization supported
                    [DESCRIPTION <description>] # Note: Internationalization supported
                    [UPDATE_TEXT <update_text>]
                    [VERSION <version>]
                    [RELEASE_DATE <release_date>]
                    [SCRIPT <script>]
                    [PRIORITY|SORTING_PRIORITY <sorting_priority>] # Note: PRIORITY is deprecated
                    [DEPENDS|DEPENDENCIES <com_id> ...]
                    [AUTO_DEPEND_ON <comp_id> ...]
                    [LICENSES <display_name> <file_path> ...]
                    [DEFAULT <value>]
                    [USER_INTERFACES <file_path> <file_path> ...]
                    [TRANSLATIONS <file_path> <file_path> ...]
                    [REPLACES <comp_id> ...]
                    [CHECKABLE <value>])
.EE
.UNINDENT
.UNINDENT
.sp
This command should be called after \fI\%cpack_add_component_group()\fP
command.
.INDENT 7.0
.TP
.B \fBVIRTUAL\fP
Added in version 3.8.

.sp
if set, then the group will be hidden from the installer.
Note that setting this on a root component does not work.
.TP
.B \fBFORCED_INSTALLATION\fP
Added in version 3.8.

.sp
if set, then the group must always be installed.
.TP
.B \fBREQUIRES_ADMIN_RIGHTS\fP
Added in version 3.8.

.sp
set it if the component group needs to be installed with elevated
permissions.
.TP
.B \fBNAME\fP
is used to create domain\-like identification for this component group.
By default used origin component group name.
.TP
.B \fBDISPLAY_NAME\fP
Added in version 3.8.

.sp
set to rewrite original name configured by
\fI\%cpack_add_component_group()\fP command.
.TP
.B \fBDESCRIPTION\fP
Added in version 3.8.

.sp
set to rewrite original description configured by
\fI\%cpack_add_component_group()\fP command.
.TP
.B \fBUPDATE_TEXT\fP
Added in version 3.8.

.sp
will be added to the component group description if this is an update to
the component group.
.TP
.B \fBVERSION\fP
is version of component group.
By default used \fI\%CPACK_PACKAGE_VERSION\fP\&.
.TP
.B \fBRELEASE_DATE\fP
Added in version 3.8.

.sp
keep empty to auto generate.
.TP
.B \fBSCRIPT\fP
is a relative or absolute path to operations script
for this component group.
.TP
.B \fBSORTING_PRIORITY\fP
is priority of the component group in the tree.
.TP
.B \fBPRIORITY\fP
Deprecated since version 3.8: Old name for \fBSORTING_PRIORITY\fP\&.

.TP
.B \fBDEPENDS\fP, \fBDEPENDENCIES\fP
Added in version 3.8.

.sp
list of dependency component or component group identifiers in
QtIFW style.
.sp
Added in version 3.21.

.sp
Component or group names listed as dependencies may contain hyphens.
This requires QtIFW 3.1 or later.
.TP
.B \fBAUTO_DEPEND_ON\fP
Added in version 3.8.

.sp
list of identifiers of component or component group in QtIFW style
that this component group has an automatic dependency on.
.TP
.B \fBLICENSES\fP
pair of <display_name> and <file_path> of license text for this
component group. You can specify more then one license.
.TP
.B \fBDEFAULT\fP
Added in version 3.8.

.sp
Possible values are: TRUE, FALSE, and SCRIPT.
Set to TRUE to preselect the group in the installer
(this takes effect only on groups that have no visible child components)
or to SCRIPT to resolved during runtime (don\(aqt forget add the file of
the script as a value of the \fBSCRIPT\fP option).
.TP
.B \fBUSER_INTERFACES\fP
Added in version 3.7.

.sp
is a list of <file_path> (\(aq.ui\(aq files) representing pages to load.
.TP
.B \fBTRANSLATIONS\fP
Added in version 3.8.

.sp
is a list of <file_path> (\(aq.qm\(aq files) representing translations to load.
.TP
.B \fBREPLACES\fP
Added in version 3.10.

.sp
list of identifiers of component or component group to replace.
.TP
.B \fBCHECKABLE\fP
Added in version 3.10.

.sp
Possible values are: TRUE, FALSE.
Set to FALSE if you want to hide the checkbox for an item.
This is useful when only a few subcomponents should be selected
instead of all.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cpack_ifw_add_repository
Add QtIFW specific remote repository to binary installer.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cpack_ifw_add_repository(<reponame> [DISABLED]
                    URL <url>
                    [USERNAME <username>]
                    [PASSWORD <password>]
                    [DISPLAY_NAME <display_name>])
.EE
.UNINDENT
.UNINDENT
.sp
This command will also add the <reponame> repository
to a variable \fI\%CPACK_IFW_REPOSITORIES_ALL\fP\&.
.INDENT 7.0
.TP
.B \fBDISABLED\fP
if set, then the repository will be disabled by default.
.TP
.B \fBURL\fP
is points to a list of available components.
.TP
.B \fBUSERNAME\fP
is used as user on a protected repository.
.TP
.B \fBPASSWORD\fP
is password to use on a protected repository.
.TP
.B \fBDISPLAY_NAME\fP
is string to display instead of the URL.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cpack_ifw_update_repository
Added in version 3.6.

.sp
Update QtIFW specific repository from remote repository.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cpack_ifw_update_repository(<reponame>
                    [[ADD|REMOVE] URL <url>]|
                     [REPLACE OLD_URL <old_url> NEW_URL <new_url>]]
                    [USERNAME <username>]
                    [PASSWORD <password>]
                    [DISPLAY_NAME <display_name>])
.EE
.UNINDENT
.UNINDENT
.sp
This command will also add the <reponame> repository
to a variable \fI\%CPACK_IFW_REPOSITORIES_ALL\fP\&.
.INDENT 7.0
.TP
.B \fBURL\fP
is points to a list of available components.
.TP
.B \fBOLD_URL\fP
is points to a list that will replaced.
.TP
.B \fBNEW_URL\fP
is points to a list that will replace to.
.TP
.B \fBUSERNAME\fP
is used as user on a protected repository.
.TP
.B \fBPASSWORD\fP
is password to use on a protected repository.
.TP
.B \fBDISPLAY_NAME\fP
is string to display instead of the URL.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cpack_ifw_add_package_resources
Added in version 3.7.

.sp
Add additional resources in the installer binary.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cpack_ifw_add_package_resources(<file_path> <file_path> ...)
.EE
.UNINDENT
.UNINDENT
.sp
This command will also add the specified files
to a variable \fI\%CPACK_IFW_PACKAGE_RESOURCES\fP\&.
.UNINDENT
.SS CPackIFWConfigureFile
.sp
Added in version 3.8.

.sp
The module defines \fI\%configure_file()\fP similar command to
configure file templates prepared in QtIFW/SDK/Creator style.
.SS Commands
.sp
The module defines the following commands:
.INDENT 0.0
.TP
.B cpack_ifw_configure_file
Copy a file to another location and modify its contents.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cpack_ifw_configure_file(<input> <output>)
.EE
.UNINDENT
.UNINDENT
.sp
Copies an \fB<input>\fP file to an \fB<output>\fP file and substitutes variable
values referenced as \fB%{VAR}\fP or \fB%VAR%\fP in the input file content.
Each variable reference will be replaced with the current value of the
variable, or the empty string if the variable is not defined.
.UNINDENT
.SS CSharpUtilities
.sp
Added in version 3.8.

.sp
This utility module is intended to simplify the configuration of CSharp/.NET
targets and provides a collection of commands for managing CSharp targets
with \fI\%Visual Studio Generators\fP, version 2010 and newer.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CSharpUtilities)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following commands:
.sp
Main Commands
.INDENT 0.0
.IP \(bu 2
\fI\%csharp_set_windows_forms_properties()\fP
.IP \(bu 2
\fI\%csharp_set_designer_cs_properties()\fP
.IP \(bu 2
\fI\%csharp_set_xaml_cs_properties()\fP
.UNINDENT
.sp
Helper Commands
.INDENT 0.0
.IP \(bu 2
\fI\%csharp_get_filename_keys()\fP
.IP \(bu 2
\fI\%csharp_get_filename_key_base()\fP
.IP \(bu 2
\fI\%csharp_get_dependentupon_name()\fP
.UNINDENT
.SS Main Commands
.INDENT 0.0
.TP
.B csharp_set_windows_forms_properties
Sets source file properties for use of Windows Forms:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
csharp_set_windows_forms_properties([<files>...])
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<files>...\fP
A list of zero or more source files which are relevant for setting the
\fI\%VS_CSHARP_<tagname>\fP source file properties. This typically
includes files with \fB\&.cs\fP, \fB\&.resx\fP, and \fB\&.Designer.cs\fP extensions.
.UNINDENT
.sp
Use this command when a CSharp target in the project uses Windows Forms.
.sp
This command searches in the provided list of files for pairs of related
files ending with \fB\&.Designer.cs\fP (\fIdesigner\fP files) or \fB\&.resx\fP
(\fIresource\fP files).  For each such file, a corresponding base \fB\&.cs\fP
file is searched (with the same base name).  When found, the
\fI\%VS_CSHARP_<tagname>\fP source file properties are set as follows:
.INDENT 7.0
.TP
For the \fB\&.cs\fP file:
.INDENT 7.0
.IP \(bu 2
\fBVS_CSHARP_SubType \(dqForm\(dq\fP
.UNINDENT
.TP
For the \fB\&.Designer.cs\fP file (if it exists):
.INDENT 7.0
.IP \(bu 2
\fBVS_CSHARP_DependentUpon <cs\-filename>\fP
.IP \(bu 2
\fBVS_CSHARP_DesignTime \(dq\(dq\fP (tag is removed if previously defined)
.IP \(bu 2
\fBVS_CSHARP_AutoGen \(dq\(dq\fP (tag is removed if previously defined)
.UNINDENT
.TP
For the \fB\&.resx\fP file (if it exists):
.INDENT 7.0
.IP \(bu 2
\fBVS_RESOURCE_GENERATOR \(dq\(dq\fP (tag is removed if previously defined)
.IP \(bu 2
\fBVS_CSHARP_DependentUpon <cs\-filename>\fP
.IP \(bu 2
\fBVS_CSHARP_SubType \(dqDesigner\(dq\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B csharp_set_designer_cs_properties
Sets source file properties for \fB\&.Designer.cs\fP files depending on
sibling filenames:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
csharp_set_designer_cs_properties([<files>...])
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<files>...\fP
A list of zero or more source files which are relevant for setting the
\fI\%VS_CSHARP_<tagname>\fP source file properties.  This typically
includes files with \fB\&.resx\fP, \fB\&.settings\fP, and \fB\&.Designer.cs\fP
extensions.
.UNINDENT
.sp
Use this command, if the CSharp target does \fBnot\fP use Windows Forms
(for Windows Forms use \fI\%csharp_set_windows_forms_properties()\fP
instead).
.sp
This command searches through the provided list for files ending in
\fB\&.Designer.cs\fP (\fIdesigner\fP files).  For each such file, it looks for
sibling files with the same base name but different extensions.  If a
matching file is found, the appropriate source file properties are set on
the corresponding \fB\&.Designer.cs\fP file based on the matched extension:
.sp
If match is \fB\&.resx\fP file:
.INDENT 7.0
.IP \(bu 2
\fBVS_CSHARP_AutoGen \(dqTrue\(dq\fP
.IP \(bu 2
\fBVS_CSHARP_DesignTime \(dqTrue\(dq\fP
.IP \(bu 2
\fBVS_CSHARP_DependentUpon <resx\-filename>\fP
.UNINDENT
.sp
If match is \fB\&.cs\fP file:
.INDENT 7.0
.IP \(bu 2
\fBVS_CSHARP_DependentUpon <cs\-filename>\fP
.UNINDENT
.sp
If match is \fB\&.settings\fP file:
.INDENT 7.0
.IP \(bu 2
\fBVS_CSHARP_AutoGen \(dqTrue\(dq\fP
.IP \(bu 2
\fBVS_CSHARP_DesignTimeSharedInput \(dqTrue\(dq\fP
.IP \(bu 2
\fBVS_CSHARP_DependentUpon <settings\-filename>\fP
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Because the source file properties of the \fB\&.Designer.cs\fP file are set
according to the found matches and every match sets the
\fI\%VS_CSHARP_DependentUpon\fP
source file property, there should only be one match for
each \fBDesigner.cs\fP file.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B csharp_set_xaml_cs_properties
Sets source file properties for use of Windows Presentation Foundation (WPF)
and XAML:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
csharp_set_xaml_cs_properties([<files>...])
.EE
.UNINDENT
.UNINDENT
.sp
Use this command, if the CSharp target uses WPF/XAML.
.INDENT 7.0
.TP
.B \fB<files>...\fP
A list of zero or more source files which are relevant for setting the
\fI\%VS_CSHARP_<tagname>\fP source file properties.  This typically
includes files with \fB\&.cs\fP, \fB\&.xaml\fP, and \fB\&.xaml.cs\fP extensions.
.UNINDENT
.sp
This command searches the provided file list for files ending with
\fB\&.xaml.cs\fP\&.  For each such XAML code\-behind file, a corresponding
\fB\&.xaml\fP file with the same base name is searched.  If found, the
following source file property is set on the \fB\&.xaml.cs\fP file:
.INDENT 7.0
.IP \(bu 2
\fBVS_CSHARP_DependentUpon <xaml\-filename>\fP
.UNINDENT
.UNINDENT
.SS Helper Commands
.sp
These commands are used by the above main commands and typically aren\(aqt
used directly:
.INDENT 0.0
.TP
.B csharp_get_filename_keys
Computes a normalized list of key values to identify source files
independently of relative or absolute paths given in CMake and eliminates
case sensitivity:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
csharp_get_filename_keys(<variable> [<files>...])
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<variable>\fP
Name of the variable in which the list of computed keys is stored.
.TP
.B \fB<files>...\fP
Zero or more source file paths as given to CSharp target using commands
like \fI\%add_library()\fP, or \fI\%add_executable()\fP\&.
.UNINDENT
.sp
This command canonicalizes file paths to ensure consistent identification
of source files.  This is useful when source files are added to a target
using different path forms.  Without normalization, CMake may treat paths
like \fBmyfile.Designer.cs\fP and
\fB${CMAKE_CURRENT_SOURCE_DIR}/myfile.Designer.cs\fP as different files,
which can cause issues when setting source file properties.
.sp
For example, the following code will fail to set properties because the
file paths do not match exactly:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_library(lib myfile.cs ${CMAKE_CURRENT_SOURCE_DIR}/myfile.Designer.cs)

set_source_files_properties(
  myfile.Designer.cs
  PROPERTIES VS_CSHARP_DependentUpon myfile.cs
)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B csharp_get_filename_key_base
Returns the full filepath and name \fBwithout\fP extension of a key:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
csharp_get_filename_key_base(<base> <key>)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<base>\fP
Name of the variable with the computed base value of the \fB<key>\fP
without the file extension.
.TP
.B \fB<key>\fP
The key of which the base will be computed.  Expected to be a
uppercase full filename from \fI\%csharp_get_filename_keys()\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B csharp_get_dependentupon_name
Computes a string which can be used as value for the source file property
\fI\%VS_CSHARP_<tagname>\fP with \fB<tagname>\fP being \fBDependentUpon\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
csharp_get_dependentupon_name(<variable> <file>)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<variable>\fP
Name of the variable with the result value.  Value contains the name
of the \fB<file>\fP without directory.
.TP
.B \fB<file>\fP
Filename to convert for using in the value of the
\fBVS_CSHARP_DependentUpon\fP source file property.
.UNINDENT
.UNINDENT
.SS CTest
.sp
Configure a project for testing with CTest/CDash
.sp
Include this module in the top CMakeLists.txt file of a project to
enable testing with CTest and dashboard submissions to CDash:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
project(MyProject)
\&...
include(CTest)
.EE
.UNINDENT
.UNINDENT
.sp
The module automatically creates the following variables:
.sp
\fI\%BUILD_TESTING\fP
.INDENT 0.0
.INDENT 3.5
Option selecting whether \fBinclude(CTest)\fP calls \fI\%enable_testing()\fP\&.
The option is \fBON\fP by default when created by the module.
.UNINDENT
.UNINDENT
.sp
After including the module, use code like:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
if(BUILD_TESTING)
  # ... CMake code to create tests ...
endif()
.EE
.UNINDENT
.UNINDENT
.sp
to creating tests when testing is enabled.
.sp
To enable submissions to a CDash server, create a \fBCTestConfig.cmake\fP
file at the top of the project with content such as:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CTEST_NIGHTLY_START_TIME \(dq01:00:00 UTC\(dq)
set(CTEST_SUBMIT_URL \(dqhttp://my.cdash.org/submit.php?project=MyProject\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
(the CDash server can provide the file to a project administrator who
configures \fBMyProject\fP).  Settings in the config file are shared by
both this \fBCTest\fP module and the \fI\%ctest(1)\fP command\-line
\fI\%Dashboard Client\fP mode (\fI\%ctest \-S\fP).
.sp
While building a project for submission to CDash, CTest scans the
build output for errors and warnings and reports them with surrounding
context from the build log.  This generic approach works for all build
tools, but does not give details about the command invocation that
produced a given problem.  One may get more detailed reports by setting
the \fI\%CTEST_USE_LAUNCHERS\fP variable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CTEST_USE_LAUNCHERS 1)
.EE
.UNINDENT
.UNINDENT
.sp
in the \fBCTestConfig.cmake\fP file.
.SS CTestCoverageCollectGCOV
.sp
Added in version 3.2.

.sp
This module is intended for use in CTest dashboard scripts and provides a
command to generate a tarball containing code coverage reports.
.sp
Load this module in a CTest script with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CTestCoverageCollectGCOV)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B ctest_coverage_collect_gcov
Runs \fBgcov\fP and packages a tar file for CDash:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ctest_coverage_collect_gcov(
  TARBALL <tar\-file>
  [TARBALL_COMPRESSION <compression>]
  [SOURCE <source\-dir>]
  [BUILD <build\-dir>]
  [GCOV_COMMAND <gcov\-command>]
  [GCOV_OPTIONS <options>...]
  [GLOB]
  [DELETE]
  [QUIET]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command runs \fBgcov\fP on all \fB\&.gcda\fP files found in the binary tree
and packages the resulting \fB\&.gcov\fP files into a tar file, along with the
following:
.INDENT 7.0
.IP \(bu 2
\fIdata.json\fP file that defines the source and build directories for use
by CDash.
.IP \(bu 2
\fILabels.json\fP files that indicate any \fI\%LABELS\fP that have been
set on the source files.
.IP \(bu 2
The \fIuncovered\fP directory containing any uncovered files found by
\fI\%CTEST_EXTRA_COVERAGE_GLOB\fP\&.
.UNINDENT
.sp
The resulting tar file can be submitted to CDash for display using the
\fI\%ctest_submit(CDASH_UPLOAD)\fP command.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fBTARBALL <tar\-file>\fP
Specify the location of the \fB\&.tar\fP file to be created for later
upload to CDash.  Relative paths will be interpreted with respect
to the top\-level build directory.
.TP
.B \fBTARBALL_COMPRESSION <compression>\fP
Added in version 3.18.

.sp
Specify a compression algorithm for the
\fBTARBALL\fP data file.  Using this option reduces the size of the data file
before it is submitted to CDash.  \fB<compression>\fP must be one of \fBGZIP\fP,
\fBBZIP2\fP, \fBXZ\fP, \fBZSTD\fP, \fBFROM_EXT\fP, or an expression that CMake
evaluates as \fBFALSE\fP\&.  The default value is \fBBZIP2\fP\&.
.sp
If \fBFROM_EXT\fP is specified, the resulting file will be compressed based on
the file extension of the \fB<tar\-file>\fP (i.e. \fB\&.tar.gz\fP will use \fBGZIP\fP
compression). File extensions that will produce compressed output include
\fB\&.tar.gz\fP, \fB\&.tgz\fP, \fB\&.tar.bzip2\fP, \fB\&.tbz\fP, \fB\&.tar.xz\fP, and \fB\&.txz\fP\&.
.TP
.B \fBSOURCE <source\-dir>\fP
Specify the top\-level source directory for the build.
Default is the value of \fI\%CTEST_SOURCE_DIRECTORY\fP\&.
.TP
.B \fBBUILD <build\-dir>\fP
Specify the top\-level build directory for the build.
Default is the value of \fI\%CTEST_BINARY_DIRECTORY\fP\&.
.TP
.B \fBGCOV_COMMAND <gcov\-command>\fP
Specify the full path to the \fBgcov\fP command on the machine.
Default is the value of \fI\%CTEST_COVERAGE_COMMAND\fP\&.
.TP
.B \fBGCOV_OPTIONS <options>...\fP
Specify options to be passed to gcov.  The \fBgcov\fP command
is run as \fBgcov <options>... \-o <gcov\-dir> <file>.gcda\fP\&.
If not specified, the default option is just \fB\-b \-x\fP\&.
.TP
.B \fBGLOB\fP
Added in version 3.6.

.sp
Recursively search for \fB\&.gcda\fP files in \fB<build\-dir>\fP rather than
determining search locations by reading \fBCMakeFiles/TargetDirectories.txt\fP
(file generated by CMake at the generation phase).
.TP
.B \fBDELETE\fP
Added in version 3.6.

.sp
Delete coverage files after they\(aqve been packaged into the \fB\&.tar\fP\&.
.TP
.B \fBQUIET\fP
Suppress non\-error messages that otherwise would have been
printed out by this command.
.UNINDENT
.sp
Added in version 3.3: Added support for the \fI\%CTEST_CUSTOM_COVERAGE_EXCLUDE\fP variable.

.UNINDENT
.SS Examples
.sp
Generating code coverage data packaged as a \fB\&.tar.gz\fP file in a
\fI\%ctest \-S\fP script:
.sp
\fBscript.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CTestCoverageCollectGCOV)

ctest_coverage_collect_gcov(
  TARBALL \(dq${CTEST_BINARY_DIRECTORY}/gcov.tar.gz\(dq
  TARBALL_COMPRESSION \(dqGZIP\(dq
)
.EE
.UNINDENT
.UNINDENT
.SS CTestScriptMode
.sp
This file is read by ctest in script mode (\-S)
.SS CTestUseLaunchers
.sp
This module sets the \fBRULE_LAUNCH_*\fP global properties when the
\fI\%CTEST_USE_LAUNCHERS\fP variable is set to a true\-like value (e.g.,
\fBON\fP):
.INDENT 0.0
.IP \(bu 2
\fI\%RULE_LAUNCH_COMPILE\fP
.IP \(bu 2
\fI\%RULE_LAUNCH_CUSTOM\fP
.IP \(bu 2
\fI\%RULE_LAUNCH_LINK\fP
.UNINDENT
.sp
The \fBCTestUseLaunchers\fP module is automatically included by the
\fI\%CTest\fP module when \fBinclude(CTest)\fP is called.  However, it is
provided as a separate module so that projects can use the
\fBCTEST_USE_LAUNCHERS\fP functionality independently.
.sp
To use launchers, set the \fBCTEST_USE_LAUNCHERS\fP variable to a true\-like value
in a \fI\%ctest \-S\fP dashboard script, and then also set the
\fBCTEST_USE_LAUNCHERS\fP cache variable in the configured project.  Both
\fBcmake\fP and \fBctest\fP must be aware of its value for the launchers to function
correctly:
.INDENT 0.0
.IP \(bu 2
\fBcmake\fP needs it to generate the appropriate build rules
.IP \(bu 2
\fBctest\fP requires it for accurate error and warning analysis
.UNINDENT
.sp
For convenience, the environment variable \fI\%CTEST_USE_LAUNCHERS_DEFAULT\fP
may be set in the \fI\%ctest \-S\fP script.  Then, as long as the
\fBCMakeLists.txt\fP includes the \fBCTest\fP or \fBCTestUseLaunchers\fP module, it
will use the value of the environment variable to initialize a
\fBCTEST_USE_LAUNCHERS\fP cache variable.  This cache variable initialization only
occurs if \fBCTEST_USE_LAUNCHERS\fP is not already defined.
.sp
Added in version 3.8: If \fBCTEST_USE_LAUNCHERS\fP is set to a true\-like value in a
\fI\%ctest \-S\fP script, the \fI\%ctest_configure()\fP command will add
\fB\-DCTEST_USE_LAUNCHERS:BOOL=TRUE\fP to the \fBcmake\fP command when configuring
the project.

.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CTEST_USE_LAUNCHERS ON)
include(CTestUseLaunchers)
.EE
.UNINDENT
.UNINDENT
.SS DeployQt4
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is for Qt version 4.  New code should follow the
\fI\%cmake\-qt(7)\fP instead of using this module.
.UNINDENT
.UNINDENT
.sp
This module provides a collection of CMake utility commands useful for
assembling and deploying standalone Qt4 executables.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(DeployQt4)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following commands:
.INDENT 0.0
.IP \(bu 2
\fI\%write_qt4_conf()\fP
.IP \(bu 2
\fI\%resolve_qt4_paths()\fP
.IP \(bu 2
\fI\%fixup_qt4_executable()\fP
.IP \(bu 2
\fI\%install_qt4_plugin_path()\fP
.IP \(bu 2
\fI\%install_qt4_plugin()\fP
.IP \(bu 2
\fI\%install_qt4_executable()\fP
.UNINDENT
.INDENT 0.0
.TP
.B write_qt4_conf
Creates a Qt configuration file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
write_qt4_conf(<qt\-conf\-dir> <qt\-conf\-contents>)
.EE
.UNINDENT
.UNINDENT
.sp
This command writes a \fBqt.conf\fP file with the \fB<qt\-conf\-contents>\fP into
the \fB<qt\-conf\-dir>\fP directory.
.UNINDENT
.INDENT 0.0
.TP
.B resolve_qt4_paths
Resolves relative paths to absolute:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
resolve_qt4_paths(<paths\-var> [<executable\-path>])
.EE
.UNINDENT
.UNINDENT
.sp
This command loops through the \fB<paths\-var>\fP list and if any path doesn\(aqt
exist, it resolves them relative to the \fB<executable\-path>\fP (if supplied)
or the \fI\%CMAKE_INSTALL_PREFIX\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B fixup_qt4_executable
Fixes up a Qt4 executable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
fixup_qt4_executable(
  <executable>
  [<qtplugins> <libs> <dirs> <plugins\-dir> <request\-qt\-conf>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command copies Qt plugins, writes a Qt configuration file (if needed)
and fixes up a Qt4 executable using the \fI\%BundleUtilities\fP module
so it is standalone and can be drag\-and\-drop copied to another machine as
long as all of the system libraries are compatible.
.sp
\fB<executable>\fP should point to the executable to be fixed\-up.
.sp
\fB<qtplugins>\fP should contain a list of the names or paths of any Qt plugins
to be installed.
.sp
\fB<libs>\fP will be passed to the \fI\%BundleUtilities\fP module and should
be a list of any already installed plugins, libraries or executables to also
be fixed\-up.
.sp
\fB<dirs>\fP will be passed to the \fI\%BundleUtilities\fP module and should
contain directories to be searched to find library dependencies.
.sp
\fB<plugins\-dir>\fP allows a custom plugins directory to be used.
.sp
\fB<request\-qt\-conf>\fP will force a \fBqt.conf\fP file to be written even if not
needed.
.UNINDENT
.INDENT 0.0
.TP
.B install_qt4_plugin_path
Installs a resolved Qt4 plugin:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
install_qt4_plugin_path(
  <plugin>
  <executable>
  <copy>
  <installed\-plugin\-path\-var>
  [<plugins\-dir> <component> <configurations>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command installs (or copies) a resolved \fB<plugin>\fP to the default
plugins directory (or \fB<plugins\-dir>\fP) relative to \fB<executable>\fP and
stores the result in a variable \fB<installed\-plugin\-path\-var>\fP\&.
.sp
If \fB<copy>\fP is set to \fBTRUE\fP then the plugins will be copied rather than
installed.  This is to allow this module to be used at CMake time rather than
install time.
.sp
If \fB<component>\fP is set then anything installed will use this COMPONENT.
.UNINDENT
.INDENT 0.0
.TP
.B install_qt4_plugin
Installs an unresolved Qt4 plugin:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
install_qt4_plugin(
  <plugin>
  <executable>
  <copy>
  <installed\-plugin\-path\-var>
  [<plugins\-dir> <component>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command installs (or copies) an unresolved \fB<plugin>\fP to the default
plugins directory (or \fB<plugins\-dir>\fP) relative to \fB<executable>\fP and
stores the result in a variable \fB<installed\-plugin\-path\-var>\fP\&.  For other
arguments, see also \fI\%install_qt4_plugin_path()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B install_qt4_executable
Installs Qt plugins, writes a Qt configuration file (if needed) and fixes
up a Qt4 executable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
install_qt4_executable(
  <executable>
  [<qtplugins> <libs> <dirs> <plugins\-dir> <request\-qt\-conf> <component>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command uses the \fI\%BundleUtilities\fP module so executable is
standalone and can be drag\-and\-drop copied to another machine as long as
all of the system libraries are compatible.  The executable will be fixed\-up
at install time.  The \fB<component>\fP is the COMPONENT used for bundle fixup
and plugin installation.  For other arguments, see also
\fI\%fixup_qt4_executable()\fP\&.
.UNINDENT
.SS ExternalData
.sp
Manage data files stored outside source tree
.SS Introduction
.sp
Use this module to unambiguously reference data files stored outside
the source tree and fetch them at build time from arbitrary local and
remote content\-addressed locations.  Functions provided by this module
recognize arguments with the syntax \fBDATA{<name>}\fP as references to
external data, replace them with full paths to local copies of those
data, and create build rules to fetch and update the local copies.
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(ExternalData)
set(ExternalData_URL_TEMPLATES \(dqfile:///local/%(algo)/%(hash)\(dq
                               \(dqfile:////host/share/%(algo)/%(hash)\(dq
                               \(dqhttp://data.org/%(algo)/%(hash)\(dq)
ExternalData_Add_Test(MyData
  NAME MyTest
  COMMAND MyExe DATA{MyInput.png}
  )
ExternalData_Add_Target(MyData)
.EE
.UNINDENT
.UNINDENT
.sp
When test \fBMyTest\fP runs the \fBDATA{MyInput.png}\fP argument will be
replaced by the full path to a real instance of the data file
\fBMyInput.png\fP on disk.  If the source tree contains a content link
such as \fBMyInput.png.md5\fP then the \fBMyData\fP target creates a real
\fBMyInput.png\fP in the build tree.
.SS Module Functions
.INDENT 0.0
.TP
.B ExternalData_Expand_Arguments
The \fBExternalData_Expand_Arguments\fP function evaluates \fBDATA{}\fP
references in its arguments and constructs a new list of arguments:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalData_Expand_Arguments(
  <target>   # Name of data management target
  <outVar>   # Output variable
  [args...]  # Input arguments, DATA{} allowed
  )
.EE
.UNINDENT
.UNINDENT
.sp
It replaces each \fBDATA{}\fP reference in an argument with the full path of
a real data file on disk that will exist after the \fB<target>\fP builds.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_Add_Test
The \fBExternalData_Add_Test\fP function wraps around the CMake
\fI\%add_test()\fP command but supports \fBDATA{}\fP references in
its arguments:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalData_Add_Test(
  <target>   # Name of data management target
  ...        # Arguments of add_test(), DATA{} allowed
  )
.EE
.UNINDENT
.UNINDENT
.sp
It passes its arguments through \fBExternalData_Expand_Arguments\fP and then
invokes the \fI\%add_test()\fP command using the results.
.sp
Changed in version 3.31: If the arguments after \fB<target>\fP define a test with an executable
that is a CMake target, empty values in the \fI\%TEST_LAUNCHER\fP
and \fI\%CROSSCOMPILING_EMULATOR\fP properties of that target are
preserved.  See policy \fI\%CMP0178\fP\&.

.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_Add_Target
The \fBExternalData_Add_Target\fP function creates a custom target to
manage local instances of data files stored externally:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalData_Add_Target(
  <target>                  # Name of data management target
  [SHOW_PROGRESS <ON|OFF>]  # Show progress during the download
  )
.EE
.UNINDENT
.UNINDENT
.sp
It creates custom commands in the target as necessary to make data
files available for each \fBDATA{}\fP reference previously evaluated by
other functions provided by this module.
Data files may be fetched from one of the URL templates specified in
the \fBExternalData_URL_TEMPLATES\fP variable, or may be found locally
in one of the paths specified in the \fBExternalData_OBJECT_STORES\fP
variable.
.sp
Added in version 3.20: The \fBSHOW_PROGRESS\fP argument may be passed to suppress progress information
during the download of objects. If not provided, it defaults to \fBOFF\fP for
\fI\%Ninja\fP and \fI\%Ninja Multi\-Config\fP generators and \fBON\fP
otherwise.

.sp
Typically only one target is needed to manage all external data within
a project.  Call this function once at the end of configuration after
all data references have been processed.
.UNINDENT
.SS Module Variables
.sp
The following variables configure behavior.  They should be set before
calling any of the functions provided by this module.
.INDENT 0.0
.TP
.B ExternalData_BINARY_ROOT
The \fBExternalData_BINARY_ROOT\fP variable may be set to the directory to
hold the real data files named by expanded \fBDATA{}\fP references.  The
default is \fBCMAKE_BINARY_DIR\fP\&.  The directory layout will mirror that of
content links under \fBExternalData_SOURCE_ROOT\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_CUSTOM_SCRIPT_<key>
Added in version 3.2.

.sp
Specify a full path to a \fB\&.cmake\fP custom fetch script identified by
\fB<key>\fP in entries of the \fBExternalData_URL_TEMPLATES\fP list.
See \fI\%Custom Fetch Scripts\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_HTTPHEADERS
Added in version 4.0.

.sp
The \fBExternalData_HTTPHEADERS\fP variable may be used to supply a list of
headers, each element containing one header with the form \fBKey: Value\fP\&.
See the \fI\%file(DOWNLOAD)\fP command\(aqs \fBHTTPHEADER\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_LINK_CONTENT
The \fBExternalData_LINK_CONTENT\fP variable may be set to the name of a
supported hash algorithm to enable automatic conversion of real data
files referenced by the \fBDATA{}\fP syntax into content links.  For each
such \fB<file>\fP a content link named \fB<file><ext>\fP is created.  The
original file is renamed to the form \fB\&.ExternalData_<algo>_<hash>\fP to
stage it for future transmission to one of the locations in the list
of URL templates (by means outside the scope of this module).  The
data fetch rule created for the content link will use the staged
object if it cannot be found using any URL template.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_NO_SYMLINKS
Added in version 3.3.

.sp
The real data files named by expanded \fBDATA{}\fP references may be made
available under \fBExternalData_BINARY_ROOT\fP using symbolic links on
some platforms.  The \fBExternalData_NO_SYMLINKS\fP variable may be set
to disable use of symbolic links and enable use of copies instead.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_OBJECT_STORES
The \fBExternalData_OBJECT_STORES\fP variable may be set to a list of local
directories that store objects using the layout \fB<dir>/%(algo)/%(hash)\fP\&.
These directories will be searched first for a needed object.  If the
object is not available in any store then it will be fetched remotely
using the URL templates and added to the first local store listed.  If
no stores are specified the default is a location inside the build
tree.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_SERIES_PARSE
.TP
.B ExternalData_SERIES_PARSE_PREFIX
.TP
.B ExternalData_SERIES_PARSE_NUMBER
.TP
.B ExternalData_SERIES_PARSE_SUFFIX
.TP
.B ExternalData_SERIES_MATCH
See \fI\%Referencing File Series\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_SOURCE_ROOT
The \fBExternalData_SOURCE_ROOT\fP variable may be set to the highest source
directory containing any path named by a \fBDATA{}\fP reference.  The
default is \fBCMAKE_SOURCE_DIR\fP\&.  \fBExternalData_SOURCE_ROOT\fP and
\fBCMAKE_SOURCE_DIR\fP must refer to directories within a single source
distribution (e.g.  they come together in one tarball).
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_TIMEOUT_ABSOLUTE
The \fBExternalData_TIMEOUT_ABSOLUTE\fP variable sets the download
absolute timeout, in seconds, with a default of \fB300\fP seconds.
Set to \fB0\fP to disable enforcement.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_TIMEOUT_INACTIVITY
The \fBExternalData_TIMEOUT_INACTIVITY\fP variable sets the download
inactivity timeout, in seconds, with a default of \fB60\fP seconds.
Set to \fB0\fP to disable enforcement.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_URL_ALGO_<algo>_<key>
Added in version 3.3.

.sp
Specify a custom URL component to be substituted for URL template
placeholders of the form \fB%(algo:<key>)\fP, where \fB<key>\fP is a
valid C identifier, when fetching an object referenced via hash
algorithm \fB<algo>\fP\&.  If not defined, the default URL component
is just \fB<algo>\fP for any \fB<key>\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_URL_TEMPLATES
The \fBExternalData_URL_TEMPLATES\fP may be set to provide a list
of URL templates using the placeholders \fB%(algo)\fP and \fB%(hash)\fP
in each template.  Data fetch rules try each URL template in order
by substituting the hash algorithm name for \fB%(algo)\fP and the hash
value for \fB%(hash)\fP\&.  Alternatively one may use \fB%(algo:<key>)\fP
with \fBExternalData_URL_ALGO_<algo>_<key>\fP variables to gain more
flexibility in remote URLs.
.UNINDENT
.SS Referencing Files
.SS Referencing Single Files
.sp
The \fBDATA{}\fP syntax is literal and the \fB<name>\fP is a full or relative path
within the source tree.  The source tree must contain either a real
data file at \fB<name>\fP or a \(dqcontent link\(dq at \fB<name><ext>\fP containing a
hash of the real file using a hash algorithm corresponding to \fB<ext>\fP\&.
For example, the argument \fBDATA{img.png}\fP may be satisfied by either a
real \fBimg.png\fP file in the current source directory or a \fBimg.png.md5\fP
file containing its MD5 sum.
.sp
Added in version 3.8: Multiple content links of the same name with different hash algorithms
are supported (e.g. \fBimg.png.sha256\fP and \fBimg.png.sha1\fP) so long as
they all correspond to the same real file.  This allows objects to be
fetched from sources indexed by different hash algorithms.

.SS Referencing File Series
.sp
The \fBDATA{}\fP syntax can be told to fetch a file series using the form
\fBDATA{<name>,:}\fP, where the \fB:\fP is literal.  If the source tree
contains a group of files or content links named like a series then a
reference to one member adds rules to fetch all of them.  Although all
members of a series are fetched, only the file originally named by the
\fBDATA{}\fP argument is substituted for it.  The default configuration
recognizes file series names ending with \fB#.ext\fP, \fB_#.ext\fP, \fB\&.#.ext\fP,
or \fB\-#.ext\fP where \fB#\fP is a sequence of decimal digits and \fB\&.ext\fP is
any single extension.  Configure it with a regex that parses \fB<number>\fP
and \fB<suffix>\fP parts from the end of \fB<name>\fP:
.INDENT 0.0
.INDENT 3.5
\fBExternalData_SERIES_PARSE\fP \- regex of the form \fB(<number>)(<suffix>)$\fP\&.
.UNINDENT
.UNINDENT
.sp
For more complicated cases set:
.INDENT 0.0
.IP \(bu 2
\fBExternalData_SERIES_PARSE\fP \- regex with at least two \fB()\fP groups.
.IP \(bu 2
\fBExternalData_SERIES_PARSE_PREFIX\fP \- regex group number of the \fB<prefix>\fP, if any.
.IP \(bu 2
\fBExternalData_SERIES_PARSE_NUMBER\fP \- regex group number of the \fB<number>\fP\&.
.IP \(bu 2
\fBExternalData_SERIES_PARSE_SUFFIX\fP \- regex group number of the \fB<suffix>\fP\&.
.UNINDENT
.sp
Configure series number matching with a regex that matches the
\fB<number>\fP part of series members named \fB<prefix><number><suffix>\fP:
.INDENT 0.0
.INDENT 3.5
\fBExternalData_SERIES_MATCH\fP \- regex matching \fB<number>\fP in all series
members
.UNINDENT
.UNINDENT
.sp
Note that the \fB<suffix>\fP of a series does not include a hash\-algorithm
extension.
.SS Referencing Associated Files
.sp
The \fBDATA{}\fP syntax can alternatively match files associated with the
named file and contained in the same directory.  Associated files may
be specified by options using the syntax
\fBDATA{<name>,<opt1>,<opt2>,...}\fP\&.  Each option may specify one file by
name or specify a regular expression to match file names using the
syntax \fBREGEX:<regex>\fP\&.  For example, the arguments:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
DATA{MyData/MyInput.mhd,MyInput.img}                   # File pair
DATA{MyData/MyFrames00.png,REGEX:MyFrames[0\-9]+\e\e.png} # Series
.EE
.UNINDENT
.UNINDENT
.sp
will pass \fBMyInput.mha\fP and \fBMyFrames00.png\fP on the command line but
ensure that the associated files are present next to them.
.SS Referencing Directories
.sp
The \fBDATA{}\fP syntax may reference a directory using a trailing slash and
a list of associated files.  The form \fBDATA{<name>/,<opt1>,<opt2>,...}\fP
adds rules to fetch any files in the directory that match one of the
associated file options.  For example, the argument
\fBDATA{MyDataDir/,REGEX:.*}\fP will pass the full path to a \fBMyDataDir\fP
directory on the command line and ensure that the directory contains
files corresponding to every file or content link in the \fBMyDataDir\fP
source directory.
.sp
Added in version 3.3: In order to match associated files in subdirectories,
specify a \fBRECURSE:\fP option, e.g. \fBDATA{MyDataDir/,RECURSE:,REGEX:.*}\fP\&.

.SS Hash Algorithms
.sp
The following hash algorithms are supported:
.INDENT 0.0
.INDENT 3.5
.TS
box center;
l|l|l.
T{
%(algo)
T}	T{
<ext>
T}	T{
Description
T}
_
T{
\fBMD5\fP
T}	T{
\fB\&.md5\fP
T}	T{
Message\-Digest Algorithm 5, RFC 1321
T}
_
T{
\fBSHA1\fP
T}	T{
\fB\&.sha1\fP
T}	T{
US Secure Hash Algorithm 1, RFC 3174
T}
_
T{
\fBSHA224\fP
T}	T{
\fB\&.sha224\fP
T}	T{
US Secure Hash Algorithms, RFC 4634
T}
_
T{
\fBSHA256\fP
T}	T{
\fB\&.sha256\fP
T}	T{
US Secure Hash Algorithms, RFC 4634
T}
_
T{
\fBSHA384\fP
T}	T{
\fB\&.sha384\fP
T}	T{
US Secure Hash Algorithms, RFC 4634
T}
_
T{
\fBSHA512\fP
T}	T{
\fB\&.sha512\fP
T}	T{
US Secure Hash Algorithms, RFC 4634
T}
_
T{
\fBSHA3_224\fP
T}	T{
\fB\&.sha3\-224\fP
T}	T{
Keccak SHA\-3
T}
_
T{
\fBSHA3_256\fP
T}	T{
\fB\&.sha3\-256\fP
T}	T{
Keccak SHA\-3
T}
_
T{
\fBSHA3_384\fP
T}	T{
\fB\&.sha3\-384\fP
T}	T{
Keccak SHA\-3
T}
_
T{
\fBSHA3_512\fP
T}	T{
\fB\&.sha3\-512\fP
T}	T{
Keccak SHA\-3
T}
.TE
.UNINDENT
.UNINDENT
.sp
Added in version 3.8: Added the \fBSHA3_*\fP hash algorithms.

.sp
Note that the hashes are used only for unique data identification and
download verification.
.SS Custom Fetch Scripts
.sp
Added in version 3.2.

.sp
When a data file must be fetched from one of the URL templates
specified in the \fBExternalData_URL_TEMPLATES\fP variable, it is
normally downloaded using the \fI\%file(DOWNLOAD)\fP command.
One may specify usage of a custom fetch script by using a URL
template of the form \fBExternalDataCustomScript://<key>/<loc>\fP\&.
The \fB<key>\fP must be a C identifier, and the \fB<loc>\fP must
contain the \fB%(algo)\fP and \fB%(hash)\fP placeholders.
A variable corresponding to the key, \fBExternalData_CUSTOM_SCRIPT_<key>\fP,
must be set to the full path to a \fB\&.cmake\fP script file.  The script
will be included to perform the actual fetch, and provided with
the following variables:
.INDENT 0.0
.TP
.B ExternalData_CUSTOM_LOCATION
When a custom fetch script is loaded, this variable is set to the
location part of the URL, which will contain the substituted hash
algorithm name and content hash value.
.UNINDENT
.INDENT 0.0
.TP
.B ExternalData_CUSTOM_FILE
When a custom fetch script is loaded, this variable is set to the
full path to a file in which the script must store the fetched
content.  The name of the file is unspecified and should not be
interpreted in any way.
.UNINDENT
.sp
The custom fetch script is expected to store fetched content in the
file or set a variable:
.INDENT 0.0
.TP
.B ExternalData_CUSTOM_ERROR
When a custom fetch script fails to fetch the requested content,
it must set this variable to a short one\-line message describing
the reason for failure.
.UNINDENT
.SS ExternalProject
.SS External Project Definition
.INDENT 0.0
.TP
.B ExternalProject_Add
The \fBExternalProject_Add()\fP function creates a custom target to drive
download, update/patch, configure, build, install and test steps of an
external project:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add(<name> [<option>...])
.EE
.UNINDENT
.UNINDENT
.sp
The individual steps within the process can be driven independently if
required (e.g. for CDash submission) and extra custom steps can be defined,
along with the ability to control the step dependencies. The directory
structure used for the management of the external project can also be
customized. The function supports a large number of options which can be used
to tailor the external project behavior.
.UNINDENT
.SS Directory Options
.sp
Most of the time, the default directory layout is sufficient. It is largely
an implementation detail that the main project usually doesn\(aqt need to
change. In some circumstances, however, control over the directory layout
can be useful or necessary. The directory options are potentially more
useful from the point of view that the main build can use the
\fI\%ExternalProject_Get_Property()\fP command to retrieve their values,
thereby allowing the main project to refer to build artifacts of the
external project.
.INDENT 0.0
.TP
.B \fBPREFIX <dir>\fP
Root directory for the external project. Unless otherwise noted below,
all other directories associated with the external project will be
created under here.
.TP
.B \fBTMP_DIR <dir>\fP
Directory in which to store temporary files.
.TP
.B \fBSTAMP_DIR <dir>\fP
Directory in which to store the timestamps of each step. Log files from
individual steps are also created in here unless overridden by LOG_DIR
(see \fILogging Options\fP below).
.TP
.B \fBLOG_DIR <dir>\fP
Added in version 3.14.

.sp
Directory in which to store the logs of each step.
.TP
.B \fBDOWNLOAD_DIR <dir>\fP
Directory in which to store downloaded files before unpacking them. This
directory is only used by the URL download method, all other download
methods use \fBSOURCE_DIR\fP directly instead.
.TP
.B \fBSOURCE_DIR <dir>\fP
Source directory into which downloaded contents will be unpacked, or for
non\-URL download methods, the directory in which the repository should be
checked out, cloned, etc. If no download method is specified, this must
point to an existing directory where the external project has already
been unpacked or cloned/checked out.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If a download method is specified, any existing contents of the source
directory may be deleted. Only the URL download method checks whether
this directory is either missing or empty before initiating the
download, stopping with an error if it is not empty. All other
download methods silently discard any previous contents of the source
directory.
.UNINDENT
.UNINDENT
.TP
.B \fBBINARY_DIR <dir>\fP
Specify the build directory location. This option is ignored if
\fBBUILD_IN_SOURCE\fP is enabled.
.TP
.B \fBINSTALL_DIR <dir>\fP
Installation prefix to be placed in the \fB<INSTALL_DIR>\fP placeholder.
This does not actually configure the external project to install to
the given prefix. That must be done by passing appropriate arguments
to the external project configuration step, e.g. using \fB<INSTALL_DIR>\fP\&.
.UNINDENT
.sp
If any of the above \fB\&..._DIR\fP options are not specified, their defaults
are computed as follows. If the \fBPREFIX\fP option is given or the
\fBEP_PREFIX\fP directory property is set, then an external project is built
and installed under the specified prefix:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
TMP_DIR      = <prefix>/tmp
STAMP_DIR    = <prefix>/src/<name>\-stamp
DOWNLOAD_DIR = <prefix>/src
SOURCE_DIR   = <prefix>/src/<name>
BINARY_DIR   = <prefix>/src/<name>\-build
INSTALL_DIR  = <prefix>
LOG_DIR      = <STAMP_DIR>
.EE
.UNINDENT
.UNINDENT
.sp
Otherwise, if the \fBEP_BASE\fP directory property is set then components
of an external project are stored under the specified base:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
TMP_DIR      = <base>/tmp/<name>
STAMP_DIR    = <base>/Stamp/<name>
DOWNLOAD_DIR = <base>/Download/<name>
SOURCE_DIR   = <base>/Source/<name>
BINARY_DIR   = <base>/Build/<name>
INSTALL_DIR  = <base>/Install/<name>
LOG_DIR      = <STAMP_DIR>
.EE
.UNINDENT
.UNINDENT
.sp
If no \fBPREFIX\fP, \fBEP_PREFIX\fP, or \fBEP_BASE\fP is specified, then the
default is to set \fBPREFIX\fP to \fB<name>\-prefix\fP\&. Relative paths are
interpreted with respect to \fI\%CMAKE_CURRENT_BINARY_DIR\fP at the
point where \fBExternalProject_Add()\fP is called.
.SS Download Step Options
.sp
A download method can be omitted if the \fBSOURCE_DIR\fP option is used to
point to an existing non\-empty directory. Otherwise, one of the download
methods below must be specified (multiple download methods should not be
given) or a custom \fBDOWNLOAD_COMMAND\fP provided.
.INDENT 0.0
.TP
.B \fBDOWNLOAD_COMMAND <cmd>...\fP
Overrides the command used for the download step
(\fI\%generator expressions\fP are
supported). If this option is specified, all other download options will
be ignored. Providing an empty string for \fB<cmd>\fP effectively disables
the download step.
.UNINDENT
.SS URL
.INDENT 0.0
.TP
.B \fBURL <url1> [<url2>...]\fP
List of paths and/or URL(s) of the external project\(aqs source. When more
than one URL is given, they are tried in turn until one succeeds. A URL
may be an ordinary path in the local file system (in which case it
must be the only URL provided) or any downloadable URL supported by the
\fI\%file(DOWNLOAD)\fP command. A local filesystem path may refer to
either an existing directory or to an archive file, whereas a URL is
expected to point to a file which can be treated as an archive. When an
archive is used, it will be unpacked automatically unless the
\fBDOWNLOAD_NO_EXTRACT\fP option is set to prevent it. The archive type
is determined by inspecting the actual content rather than using logic
based on the file extension.
.sp
Changed in version 3.7: Multiple URLs are allowed.

.TP
.B \fBURL_HASH <algo>=<hashValue>\fP
Hash of the archive file to be downloaded. The argument should be of
the form \fB<algo>=<hashValue>\fP where \fBalgo\fP can be any of the hashing
algorithms supported by the \fI\%file()\fP command. Specifying this
option is strongly recommended for URL downloads, as it ensures the
integrity of the downloaded content. It is also used as a check for a
previously downloaded file, allowing connection to the remote location
to be avoided altogether if the local directory already has a file from
an earlier download that matches the specified hash.
.TP
.B \fBURL_MD5 <md5>\fP
Equivalent to \fBURL_HASH MD5=<md5>\fP\&.
.TP
.B \fBDOWNLOAD_NAME <fname>\fP
File name to use for the downloaded file. If not given, the end of the
URL is used to determine the file name. This option is rarely needed,
the default name is generally suitable and is not normally used outside
of code internal to the \fBExternalProject\fP module.
.TP
.B \fBDOWNLOAD_EXTRACT_TIMESTAMP <bool>\fP
Added in version 3.24.

.sp
When specified with a true value, the timestamps of the extracted
files will match those in the archive. When false, the timestamps of
the extracted files will reflect the time at which the extraction
was performed. If the download URL changes, timestamps based off
those in the archive can result in dependent targets not being rebuilt
when they potentially should have been. Therefore, unless the file
timestamps are significant to the project in some way, use a false
value for this option. If \fBDOWNLOAD_EXTRACT_TIMESTAMP\fP is not given,
the default is false. See policy \fI\%CMP0135\fP\&.
.TP
.B \fBDOWNLOAD_NO_EXTRACT <bool>\fP
Added in version 3.6.

.sp
Allows the extraction part of the download step to be disabled by
passing a boolean true value for this option. If this option is not
given, the downloaded contents will be unpacked automatically if
required. If extraction has been disabled, the full path to the
downloaded file is available as \fB<DOWNLOADED_FILE>\fP in subsequent
steps or as the property \fBDOWNLOADED_FILE\fP with the
\fI\%ExternalProject_Get_Property()\fP command.
.TP
.B \fBDOWNLOAD_NO_PROGRESS <bool>\fP
Can be used to disable logging the download progress. If this option is
not given, download progress messages will be logged.
.TP
.B \fBTIMEOUT <seconds>\fP
Maximum time allowed for file download operations.
.TP
.B \fBINACTIVITY_TIMEOUT <seconds>\fP
Added in version 3.19.

.sp
Terminate the operation after a period of inactivity.
.TP
.B \fBHTTP_USERNAME <username>\fP
Added in version 3.7.

.sp
Username for the download operation if authentication is required.
.TP
.B \fBHTTP_PASSWORD <password>\fP
Added in version 3.7.

.sp
Password for the download operation if authentication is required.
.TP
.B \fBHTTP_HEADER <header1> [<header2>...]\fP
Added in version 3.7.

.sp
Provides an arbitrary list of HTTP headers for the download operation.
This can be useful for accessing content in systems like AWS, etc.
.TP
.B \fBTLS_VERSION <min>\fP
Added in version 3.30.

.sp
Specify minimum TLS version for \fBhttps://\fP URLs.  If this option is
not provided, the value of the \fI\%CMAKE_TLS_VERSION\fP variable
or the \fI\%CMAKE_TLS_VERSION\fP environment variable will be used
instead (see \fI\%file(DOWNLOAD)\fP).
.sp
This option also applies to \fBgit clone\fP invocations, although the
default behavior is different.  If none of the \fBTLS_VERSION\fP option,
\fI\%CMAKE_TLS_VERSION\fP variable, or \fI\%CMAKE_TLS_VERSION\fP
environment variable is specified, the behavior will be determined by
git\(aqs default or a \fBhttp.sslVersion\fP git config option the user may
have set at a global level.
.TP
.B \fBTLS_VERIFY <bool>\fP
Specifies whether certificate verification should be performed for
\fBhttps://\fP URLs.  If this option is not provided, the value of the
\fI\%CMAKE_TLS_VERIFY\fP variable or the \fI\%CMAKE_TLS_VERIFY\fP
environment variable will be used instead (see \fI\%file(DOWNLOAD)\fP).
If neither of those is set, certificate verification will not be performed.
In situations where \fBURL_HASH\fP cannot be provided, this option can
be an alternative verification measure.
.sp
This option also applies to \fBgit clone\fP invocations, although the
default behavior is different.  If none of the \fBTLS_VERIFY\fP option,
\fI\%CMAKE_TLS_VERIFY\fP variable, or \fI\%CMAKE_TLS_VERIFY\fP
environment variable is specified, the behavior will be determined by
git\(aqs default (true) or a \fBhttp.sslVerify\fP git config option the
user may have set at a global level.
.sp
Changed in version 3.6: Previously this option did not apply to \fBgit clone\fP invocations.

.sp
Changed in version 3.30: Previously the \fI\%CMAKE_TLS_VERIFY\fP environment variable
was not checked.

.TP
.B \fBTLS_CAINFO <file>\fP
Specify a custom certificate authority file to use if \fBTLS_VERIFY\fP
is enabled. If this option is not specified, the value of the
\fI\%CMAKE_TLS_CAINFO\fP variable will be used instead (see
\fI\%file(DOWNLOAD)\fP)
.TP
.B \fBNETRC <level>\fP
Added in version 3.11.

.sp
Specify whether the \fB\&.netrc\fP file is to be used for operation.
If this option is not specified, the value of the
\fI\%CMAKE_NETRC\fP variable will be used instead
(see \fI\%file(DOWNLOAD)\fP).  Valid levels are:
.INDENT 7.0
.TP
.B \fBIGNORED\fP
The \fB\&.netrc\fP file is ignored.
This is the default.
.TP
.B \fBOPTIONAL\fP
The \fB\&.netrc\fP file is optional, and information in the URL
is preferred.  The file will be scanned to find which ever
information is not specified in the URL.
.TP
.B \fBREQUIRED\fP
The \fB\&.netrc\fP file is required, and information in the URL
is ignored.
.UNINDENT
.TP
.B \fBNETRC_FILE <file>\fP
Added in version 3.11.

.sp
Specify an alternative \fB\&.netrc\fP file to the one in your home directory
if the \fBNETRC\fP level is \fBOPTIONAL\fP or \fBREQUIRED\fP\&. If this option
is not specified, the value of the \fI\%CMAKE_NETRC_FILE\fP variable
will be used instead (see \fI\%file(DOWNLOAD)\fP)
.UNINDENT
.sp
Added in version 3.1: Added support for \fItbz2\fP, \fI\&.tar.xz\fP, \fI\&.txz\fP, and \fI\&.7z\fP extensions.

.sp
Added in version 4.1: All archive types that \fI\%cmake \-E tar\fP can extract
are supported regardless of file extension.

.SS Git
.sp
NOTE: A git version of 1.6.5 or later is required if this download method
is used.
.INDENT 0.0
.TP
.B \fBGIT_REPOSITORY <url>\fP
URL of the git repository. Any URL understood by the \fBgit\fP command
may be used.
.sp
Changed in version 3.27: A relative URL will be resolved based on the parent project\(aqs
remote, subject to \fI\%CMP0150\fP\&.  See the policy documentation
for how the remote is selected, including conditions where the
remote selection can fail.  Local filesystem remotes should
always use absolute paths.

.TP
.B \fBGIT_TAG <tag>\fP
Git branch name, tag or commit hash. Note that branch names and tags
should generally be specified as remote names (i.e. \fBorigin/myBranch\fP
rather than simply \fBmyBranch\fP). This ensures that if the remote end
has its tag moved or branch rebased or history rewritten, the local
clone will still be updated correctly. In general, however, specifying
a commit hash should be preferred for a number of reasons:
.INDENT 7.0
.IP \(bu 2
If the local clone already has the commit corresponding to the hash,
no \fBgit fetch\fP needs to be performed to check for changes each time
CMake is re\-run. This can result in a significant speed up if many
external projects are being used.
.IP \(bu 2
Using a specific git hash ensures that the main project\(aqs own history
is fully traceable to a specific point in the external project\(aqs
evolution. If a branch or tag name is used instead, then checking out
a specific commit of the main project doesn\(aqt necessarily pin the
whole build to a specific point in the life of the external project.
The lack of such deterministic behavior makes the main project lose
traceability and repeatability.
.UNINDENT
.sp
If \fBGIT_SHALLOW\fP is enabled then \fBGIT_TAG\fP works only with
branch names and tags.  A commit hash is not allowed.
.sp
Note that if not provided, \fBGIT_TAG\fP defaults to \fBmaster\fP, not the
default Git branch name.
.TP
.B \fBGIT_REMOTE_NAME <name>\fP
The optional name of the remote. If this option is not specified, it
defaults to \fBorigin\fP\&.
.TP
.B \fBGIT_SUBMODULES <module>...\fP
Specific git submodules that should also be updated. If this option is
not provided, all git submodules will be updated.
.sp
Changed in version 3.16: When \fI\%CMP0097\fP is set to \fBNEW\fP, if this value is set
to an empty string then no submodules are initialized or updated.

.TP
.B \fBGIT_SUBMODULES_RECURSE <bool>\fP
Added in version 3.17.

.sp
Specify whether git submodules (if any) should update recursively by
passing the \fB\-\-recursive\fP flag to \fBgit submodule update\fP\&.
If not specified, the default is on.
.TP
.B \fBGIT_SHALLOW <bool>\fP
Added in version 3.6.

.sp
When this option is enabled, the \fBgit clone\fP operation will be given
the \fB\-\-depth 1\fP option. This performs a shallow clone, which avoids
downloading the whole history and instead retrieves just the commit
denoted by the \fBGIT_TAG\fP option.
.TP
.B \fBGIT_PROGRESS <bool>\fP
Added in version 3.8.

.sp
When enabled, this option instructs the \fBgit clone\fP operation to
report its progress by passing it the \fB\-\-progress\fP option. Without
this option, the clone step for large projects may appear to make the
build stall, since nothing will be logged until the clone operation
finishes. While this option can be used to provide progress to prevent
the appearance of the build having stalled, it may also make the build
overly noisy if lots of external projects are used.
.TP
.B \fBGIT_CONFIG <option1> [<option2>...]\fP
Added in version 3.8.

.sp
Specify a list of config options to pass to \fBgit clone\fP\&. Each option
listed will be transformed into its own \fB\-\-config <option>\fP on the
\fBgit clone\fP command line, with each option required to be in the
form \fBkey=value\fP\&.
.TP
.B \fBGIT_REMOTE_UPDATE_STRATEGY <strategy>\fP
Added in version 3.18.

.sp
When \fBGIT_TAG\fP refers to a remote branch, this option can be used to
specify how the update step behaves.  The \fB<strategy>\fP must be one of
the following:
.INDENT 7.0
.TP
.B \fBCHECKOUT\fP
Ignore the local branch and always checkout the branch specified by
\fBGIT_TAG\fP\&.
.TP
.B \fBREBASE\fP
Try to rebase the current branch to the one specified by \fBGIT_TAG\fP\&.
If there are local uncommitted changes, they will be stashed first
and popped again after rebasing.  If rebasing or popping stashed
changes fail, abort the rebase and halt with an error.
When \fBGIT_REMOTE_UPDATE_STRATEGY\fP is not present, this is the
default strategy unless the default has been overridden with
\fBCMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY\fP (see below).
Note that if the branch specified in \fBGIT_TAG\fP is different to
the upstream branch currently being tracked, it is not safe to
perform a rebase. In that situation, \fBREBASE\fP will silently be
treated as \fBCHECKOUT\fP instead.
.TP
.B \fBREBASE_CHECKOUT\fP
Same as \fBREBASE\fP except if the rebase fails, an annotated tag will
be created at the original \fBHEAD\fP position from before the rebase
and then checkout \fBGIT_TAG\fP just like the \fBCHECKOUT\fP strategy.
The message stored on the annotated tag will give information about
what was attempted and the tag name will include a timestamp so that
each failed run will add a new tag.  This strategy ensures no changes
will be lost, but updates should always succeed if \fBGIT_TAG\fP refers
to a valid ref unless there are uncommitted changes that cannot be
popped successfully.
.UNINDENT
.sp
The variable \fBCMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY\fP can be set to
override the default strategy.  This variable should not be set by a
project, it is intended for the user to set.  It is primarily intended
for use in continuous integration scripts to ensure that when history
is rewritten on a remote branch, the build doesn\(aqt end up with
unintended changes or failed builds resulting from conflicts during
rebase operations.
.UNINDENT
.SS Subversion
.INDENT 0.0
.TP
.B \fBSVN_REPOSITORY <url>\fP
URL of the Subversion repository.
.TP
.B \fBSVN_REVISION \-r<rev>\fP
Revision to checkout from the Subversion repository.
.TP
.B \fBSVN_USERNAME <username>\fP
Username for the Subversion checkout and update.
.TP
.B \fBSVN_PASSWORD <password>\fP
Password for the Subversion checkout and update.
.TP
.B \fBSVN_TRUST_CERT <bool>\fP
Specifies whether to trust the Subversion server site certificate. If
enabled, the \fB\-\-trust\-server\-cert\fP option is passed to the \fBsvn\fP
checkout and update commands.
.UNINDENT
.SS Mercurial
.INDENT 0.0
.TP
.B \fBHG_REPOSITORY <url>\fP
URL of the mercurial repository.
.TP
.B \fBHG_TAG <tag>\fP
Mercurial branch name, tag or commit id.
.UNINDENT
.SS CVS
.INDENT 0.0
.TP
.B \fBCVS_REPOSITORY <cvsroot>\fP
CVSROOT of the CVS repository.
.TP
.B \fBCVS_MODULE <mod>\fP
Module to checkout from the CVS repository.
.TP
.B \fBCVS_TAG <tag>\fP
Tag to checkout from the CVS repository.
.UNINDENT
.SS Update Step Options
.sp
Whenever CMake is re\-run, by default the external project\(aqs sources will be
updated if the download method supports updates (e.g. a git repository
would be checked if the \fBGIT_TAG\fP does not refer to a specific commit).
.INDENT 0.0
.TP
.B \fBUPDATE_COMMAND <cmd>...\fP
Overrides the download method\(aqs update step with a custom command.
The command may use
\fI\%generator expressions\fP\&.
.TP
.B \fBUPDATE_DISCONNECTED <bool>\fP
Added in version 3.2.

.sp
When enabled, this option causes the update step to be skipped (but see
below for changed behavior where this is not the case). It does not
prevent the download step. The update step can still be
added as a step target (see \fI\%ExternalProject_Add_StepTargets()\fP)
and called manually. This is useful if you want to allow developers to
build the project when disconnected from the network (the network may
still be needed for the download step though).
.sp
Changed in version 3.27: When \fBUPDATE_DISCONNECTED\fP is true, the update step will be executed
if any details about the update or download step are changed.
Furthermore, if using the git download/update method, the update
logic will be modified to skip attempts to contact the remote.
If the \fBGIT_TAG\fP mentions a ref that is not known locally, the
update step will halt with a fatal error.

.sp
When this option is present, it is generally advisable to make the value
a cache variable under the developer\(aqs control rather than hard\-coding
it. If this option is not present, the default value is taken from the
\fBEP_UPDATE_DISCONNECTED\fP directory property. If that is also not
defined, updates are performed as normal. The \fBEP_UPDATE_DISCONNECTED\fP
directory property is intended as a convenience for controlling the
\fBUPDATE_DISCONNECTED\fP behavior for an entire section of a project\(aqs
directory hierarchy and may be a more convenient method of giving
developers control over whether or not to perform updates (assuming the
project also provides a cache variable or some other convenient method
for setting the directory property).
.sp
This may cause a step target to be created automatically for the
\fBdownload\fP step.  See policy \fI\%CMP0114\fP\&.
.UNINDENT
.SS Patch Step Options
.INDENT 0.0
.TP
.B \fBPATCH_COMMAND <cmd>...\fP
Specifies a custom command to patch the sources after an update. By
default, no patch command is defined. Note that it can be quite difficult
to define an appropriate patch command that performs robustly, especially
for download methods such as git where changing the \fBGIT_TAG\fP will not
discard changes from a previous patch, but the patch command will be
called again after updating to the new tag.
.UNINDENT
.SS Configure Step Options
.sp
The configure step is run after the download and update steps. By default,
the external project is assumed to be a CMake project, but this can be
overridden if required.
.INDENT 0.0
.TP
.B \fBCONFIGURE_COMMAND <cmd>...\fP
The default configure command runs CMake with a few options based on
the main project.  The options added are typically only those needed to
use the same generator as the main project, but the \fBCMAKE_GENERATOR\fP
option can be given to override this.  The project is responsible for
adding any toolchain details, flags or other settings it wants to
reuse from the main project or otherwise specify (see \fBCMAKE_ARGS\fP,
\fBCMAKE_CACHE_ARGS\fP and \fBCMAKE_CACHE_DEFAULT_ARGS\fP below).
.sp
For non\-CMake external projects, the \fBCONFIGURE_COMMAND\fP option must
be used to override the default configure command
(\fI\%generator expressions\fP are
supported). For projects that require no configure step, specify this
option with an empty string as the command to execute.
.TP
.B \fBCMAKE_COMMAND /.../cmake\fP
Specify an alternative cmake executable for the configure step (use an
absolute path). This is generally not recommended, since it is
usually desirable to use the same CMake version throughout the whole
build. This option is ignored if a custom configure command has been
specified with \fBCONFIGURE_COMMAND\fP\&.
.TP
.B \fBCMAKE_GENERATOR <gen>\fP
Override the CMake generator used for the configure step. Without this
option, the same generator as the main build will be used. This option is
ignored if a custom configure command has been specified with the
\fBCONFIGURE_COMMAND\fP option.
.TP
.B \fBCMAKE_GENERATOR_PLATFORM <platform>\fP
Added in version 3.1.

.sp
Pass a generator\-specific platform name to the CMake command (see
\fI\%CMAKE_GENERATOR_PLATFORM\fP). It is an error to provide this
option without the \fBCMAKE_GENERATOR\fP option.
.TP
.B \fBCMAKE_GENERATOR_TOOLSET <toolset>\fP
Pass a generator\-specific toolset name to the CMake command (see
\fI\%CMAKE_GENERATOR_TOOLSET\fP). It is an error to provide this
option without the \fBCMAKE_GENERATOR\fP option.
.TP
.B \fBCMAKE_GENERATOR_INSTANCE <instance>\fP
Added in version 3.11.

.sp
Pass a generator\-specific instance selection to the CMake command (see
\fI\%CMAKE_GENERATOR_INSTANCE\fP). It is an error to provide this
option without the \fBCMAKE_GENERATOR\fP option.
.TP
.B \fBCMAKE_ARGS <arg>...\fP
The specified arguments are passed to the \fBcmake\fP command line.
They can be any argument the \fBcmake\fP command understands, not just
cache values defined by \fB\-D...\fP arguments (see also
\fI\%CMake Options\fP).
.sp
Added in version 3.3: Arguments may use
\fI\%generator expressions\fP\&.

.TP
.B \fBCMAKE_CACHE_ARGS <arg>...\fP
This is an alternate way of specifying cache variables where command line
length issues may become a problem. The arguments are expected to be in
the form \fB\-Dvar:STRING=value\fP, which are then transformed into
CMake \fI\%set()\fP commands with the \fBFORCE\fP option used. These
\fBset()\fP commands are written to a pre\-load script which is then applied
using the \fI\%cmake \-C\fP command line option.
.sp
Added in version 3.3: Arguments may use
\fI\%generator expressions\fP\&.

.TP
.B \fBCMAKE_CACHE_DEFAULT_ARGS <arg>...\fP
Added in version 3.2.

.sp
This is the same as the \fBCMAKE_CACHE_ARGS\fP option except the \fBset()\fP
commands do not include the \fBFORCE\fP keyword. This means the values act
as initial defaults only and will not override any variables already set
from a previous run. Use this option with care, as it can lead to
different behavior depending on whether the build starts from a fresh
build directory or reuses previous build contents.
.sp
Added in version 3.15: If the CMake generator is the \fBGreen Hills MULTI\fP and not overridden,
the original project\(aqs settings for the GHS toolset and target system
customization cache variables are propagated into the external project.

.TP
.B \fBSOURCE_SUBDIR <dir>\fP
Added in version 3.7.

.sp
When no \fBCONFIGURE_COMMAND\fP option is specified, the configure step
assumes the external project has a \fBCMakeLists.txt\fP file at the top of
its source tree (i.e. in \fBSOURCE_DIR\fP). The \fBSOURCE_SUBDIR\fP option
can be used to point to an alternative directory within the source tree
to use as the top of the CMake source tree instead. This must be a
relative path and it will be interpreted as being relative to
\fBSOURCE_DIR\fP\&.
.sp
Added in version 3.14: When \fBBUILD_IN_SOURCE\fP option is enabled, the \fBBUILD_COMMAND\fP
is used to point to an alternative directory within the source tree.

.TP
.B \fBCONFIGURE_HANDLED_BY_BUILD <bool>\fP
Added in version 3.20.

.sp
Enabling this option relaxes the dependencies of the configure step on
other external projects to order\-only. This means the configure step will
be executed after its external project dependencies are built but it will
not be marked dirty when one of its external project dependencies is
rebuilt. This option can be enabled when the build step is smart enough
to figure out if the configure step needs to be rerun. CMake and Meson are
examples of build systems whose build step is smart enough to know if the
configure step needs to be rerun.
.UNINDENT
.SS Build Step Options
.sp
If the configure step assumed the external project uses CMake as its build
system, the build step will also. Otherwise, the build step will assume a
Makefile\-based build and simply run \fBmake\fP with no arguments as the
default build step. This can be overridden with custom build commands if
required.
.sp
If both the main project and the external project use make as their build
tool, the build step of the external project is invoked as a recursive
make using \fB$(MAKE)\fP\&.  This will communicate some build tool settings
from the main project to the external project.  If either the main project
or external project is not using make, no build tool settings will be
passed to the external project other than those established by the
configure step (i.e. running \fBninja \-v\fP in the main project will not
pass \fB\-v\fP to the external project\(aqs build step, even if it also uses
\fBninja\fP as its build tool).
.INDENT 0.0
.TP
.B \fBBUILD_COMMAND <cmd>...\fP
Overrides the default build command
(\fI\%generator expressions\fP are
supported). If this option is not given, the default build command will
be chosen to integrate with the main build in the most appropriate way
(e.g. using recursive \fBmake\fP for Makefile generators or
\fI\%cmake \-\-build\fP if the project uses a CMake build). This option
can be specified with an empty string as the command to make the build
step do nothing.
.TP
.B \fBBUILD_IN_SOURCE <bool>\fP
When this option is enabled, the build will be done directly within the
external project\(aqs source tree. This should generally be avoided, the use
of a separate build directory is usually preferred, but it can be useful
when the external project assumes an in\-source build. The \fBBINARY_DIR\fP
option should not be specified if building in\-source.
.TP
.B \fBBUILD_ALWAYS <bool>\fP
Enabling this option forces the build step to always be run. This can be
the easiest way to robustly ensure that the external project\(aqs own build
dependencies are evaluated rather than relying on the default
success timestamp\-based method. This option is not normally needed unless
developers are expected to modify something the external project\(aqs build
depends on in a way that is not detectable via the step target
dependencies (e.g. \fBSOURCE_DIR\fP is used without a download method and
developers might modify the sources in \fBSOURCE_DIR\fP).
.TP
.B \fBBUILD_BYPRODUCTS <file>...\fP
Added in version 3.2.

.sp
Specifies files that will be generated by the build command but which
might or might not have their modification time updated by subsequent
builds. This may also be required to explicitly declare dependencies
when using the \fI\%Ninja\fP generator.
These ultimately get passed through as \fBBYPRODUCTS\fP to the
build step\(aqs own underlying call to \fI\%add_custom_command()\fP, which
has additional documentation.
.TP
.B \fBBUILD_JOB_SERVER_AWARE <bool>\fP
Added in version 3.28.

.sp
Specifies that the build step is aware of the GNU Make job server.
See the \fI\%add_custom_command()\fP documentation of its
\fBJOB_SERVER_AWARE\fP option for details.  This option is relevant
only when an explicit \fBBUILD_COMMAND\fP is specified.
.UNINDENT
.SS Install Step Options
.sp
If the configure step assumed the external project uses CMake as its build
system, the install step will also. Otherwise, the install step will assume
a Makefile\-based build and simply run \fBmake install\fP as the default build
step. This can be overridden with custom install commands if required.
.INDENT 0.0
.TP
.B \fBINSTALL_COMMAND <cmd>...\fP
The external project\(aqs own install step is invoked as part of the main
project\(aqs \fIbuild\fP\&. It is done after the external project\(aqs build step
and may be before or after the external project\(aqs test step (see the
\fBTEST_BEFORE_INSTALL\fP option below). The external project\(aqs install
rules are not part of the main project\(aqs install rules, so if anything
from the external project should be installed as part of the main build,
these need to be specified in the main build as additional
\fI\%install()\fP commands. The default install step builds the
\fBinstall\fP target of the external project, but this can be overridden
with a custom command using this option
(\fI\%generator expressions\fP are
supported). Passing an empty string as the \fB<cmd>\fP makes the install
step do nothing.
.TP
.B \fBINSTALL_BYPRODUCTS <file>...\fP
Added in version 3.26.

.sp
Specifies files that will be generated by the install command but which
might or might not have their modification time updated by subsequent
installs. This may also be required to explicitly declare dependencies
when using the \fI\%Ninja\fP generator.
These ultimately get passed through as \fBBYPRODUCTS\fP to the
install step\(aqs own underlying call to \fI\%add_custom_command()\fP, which
has additional documentation.
.TP
.B \fBINSTALL_JOB_SERVER_AWARE <bool>\fP
Added in version 4.0.

.sp
Specifies that the install step is aware of the GNU Make job server.
See the \fI\%add_custom_command()\fP documentation of its
\fBJOB_SERVER_AWARE\fP option for details.  This option is relevant
only when an explicit \fBINSTALL_COMMAND\fP is specified.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If the \fI\%CMAKE_INSTALL_MODE\fP environment variable is set when the
main project is built, it will only have an effect if the following
conditions are met:
.INDENT 0.0
.IP \(bu 2
The main project\(aqs configure step assumed the external project uses
CMake as its build system.
.IP \(bu 2
The external project\(aqs install command actually runs. Note that due
to the way \fBExternalProject\fP may use timestamps internally, if
nothing the install step depends on needs to be re\-executed, the
install command might also not need to run.
.UNINDENT
.sp
Note also that \fBExternalProject\fP does not check whether the
\fI\%CMAKE_INSTALL_MODE\fP environment variable changes from one run
to another.
.UNINDENT
.UNINDENT
.SS Test Step Options
.sp
The test step is only defined if at least one of the following \fBTEST_...\fP
options are provided.
.INDENT 0.0
.TP
.B \fBTEST_COMMAND <cmd>...\fP
Overrides the default test command
(\fI\%generator expressions\fP are
supported). If this option is not given, the default behavior of the test
step is to build the external project\(aqs own \fBtest\fP target. This option
can be specified with \fB<cmd>\fP as an empty string, which allows the test
step to still be defined, but it will do nothing. Do not specify any of
the other \fBTEST_...\fP options if providing an empty string as the test
command, but prefer to omit all \fBTEST_...\fP options altogether if the
test step target is not needed.
.TP
.B \fBTEST_BEFORE_INSTALL <bool>\fP
When this option is enabled, the test step will be executed before the
install step. The default behavior is for the test step to run after the
install step.
.TP
.B \fBTEST_AFTER_INSTALL <bool>\fP
This option is mainly useful as a way to indicate that the test step is
desired but all default behavior is sufficient. Specifying this option
with a boolean true value ensures the test step is defined and that it
comes after the install step. If both \fBTEST_BEFORE_INSTALL\fP and
\fBTEST_AFTER_INSTALL\fP are enabled, the latter is silently ignored.
.TP
.B \fBTEST_EXCLUDE_FROM_MAIN <bool>\fP
Added in version 3.2.

.sp
If enabled, the main build\(aqs default ALL target will not depend on the
test step. This can be a useful way of ensuring the test step is defined
but only gets invoked when manually requested.
This may cause a step target to be created automatically for either
the \fBinstall\fP or \fBbuild\fP step.  See policy \fI\%CMP0114\fP\&.
.UNINDENT
.SS Output Logging Options
.sp
Each of the following \fBLOG_...\fP options can be used to wrap the relevant
step in a script to capture its output to files. The log files will be
created in \fBLOG_DIR\fP if supplied or otherwise the \fBSTAMP_DIR\fP
directory with step\-specific file names.
.INDENT 0.0
.TP
.B \fBLOG_DOWNLOAD <bool>\fP
When enabled, the output of the download step is logged to files.
.TP
.B \fBLOG_UPDATE <bool>\fP
When enabled, the output of the update step is logged to files.
.TP
.B \fBLOG_PATCH <bool>\fP
Added in version 3.14.

.sp
When enabled, the output of the patch step is logged to files.
.TP
.B \fBLOG_CONFIGURE <bool>\fP
When enabled, the output of the configure step is logged to files.
.TP
.B \fBLOG_BUILD <bool>\fP
When enabled, the output of the build step is logged to files.
.TP
.B \fBLOG_INSTALL <bool>\fP
When enabled, the output of the install step is logged to files.
.TP
.B \fBLOG_TEST <bool>\fP
When enabled, the output of the test step is logged to files.
.TP
.B \fBLOG_MERGED_STDOUTERR <bool>\fP
Added in version 3.14.

.sp
When enabled, stdout and stderr will be merged for any step whose
output is being logged to files.
.TP
.B \fBLOG_OUTPUT_ON_FAILURE <bool>\fP
Added in version 3.14.

.sp
This option only has an effect if at least one of the other \fBLOG_<step>\fP
options is enabled.  If an error occurs for a step which has logging to
file enabled, that step\(aqs output will be printed to the console if
\fBLOG_OUTPUT_ON_FAILURE\fP is set to true.  For cases where a large amount
of output is recorded, just the end of that output may be printed to the
console.
.UNINDENT
.SS Terminal Access Options
.sp
Added in version 3.4.

.sp
Steps can be given direct access to the terminal in some cases. Giving a
step access to the terminal may allow it to receive terminal input if
required, such as for authentication details not provided by other options.
With the \fI\%Ninja\fP generator, these options place the steps in the
\fBconsole\fP \fI\%job pool\fP\&. Each step can be given access
to the terminal individually via the following options:
.INDENT 0.0
.TP
.B \fBUSES_TERMINAL_DOWNLOAD <bool>\fP
Give the download step access to the terminal.
.TP
.B \fBUSES_TERMINAL_UPDATE <bool>\fP
Give the update step access to the terminal.
.TP
.B \fBUSES_TERMINAL_PATCH <bool>\fP
Added in version 3.23.

.sp
Give the patch step access to the terminal.
.TP
.B \fBUSES_TERMINAL_CONFIGURE <bool>\fP
Give the configure step access to the terminal.
.TP
.B \fBUSES_TERMINAL_BUILD <bool>\fP
Give the build step access to the terminal.
.TP
.B \fBUSES_TERMINAL_INSTALL <bool>\fP
Give the install step access to the terminal.
.TP
.B \fBUSES_TERMINAL_TEST <bool>\fP
Give the test step access to the terminal.
.UNINDENT
.SS Target Options
.INDENT 0.0
.TP
.B \fBDEPENDS <targets>...\fP
Specify other targets on which the external project depends. The other
targets will be brought up to date before any of the external project\(aqs
steps are executed. Because the external project uses additional custom
targets internally for each step, the \fBDEPENDS\fP option is the most
convenient way to ensure all of those steps depend on the other targets.
Simply doing
\fI\%add_dependencies(<name> <targets>)\fP will
not make any of the steps dependent on \fB<targets>\fP\&.
.TP
.B \fBEXCLUDE_FROM_ALL <bool>\fP
When enabled, this option excludes the external project from the default
ALL target of the main build.
.TP
.B \fBSTEP_TARGETS <step\-target>...\fP
Generate custom targets for the specified steps. This is required if the
steps need to be triggered manually or if they need to be used as
dependencies of other targets. If this option is not specified, the
default value is taken from the \fBEP_STEP_TARGETS\fP directory property.
See \fI\%ExternalProject_Add_StepTargets()\fP below for further
discussion of the effects of this option.
.TP
.B \fBINDEPENDENT_STEP_TARGETS <step\-target>...\fP
Deprecated since version 3.19: This is allowed only if policy \fI\%CMP0114\fP is not set to \fBNEW\fP\&.

.sp
Generates custom targets for the specified steps and prevent these targets
from having the usual dependencies applied to them. If this option is not
specified, the default value is taken from the
\fBEP_INDEPENDENT_STEP_TARGETS\fP directory property. This option is mostly
useful for allowing individual steps to be driven independently, such as
for a CDash setup where each step should be initiated and reported
individually rather than as one whole build. See
\fI\%ExternalProject_Add_StepTargets()\fP below for further discussion
of the effects of this option.
.UNINDENT
.SS Miscellaneous Options
.INDENT 0.0
.TP
.B \fBLIST_SEPARATOR <sep>\fP
For any of the various \fB\&..._COMMAND\fP options, and \fBCMAKE_ARGS\fP,
\fBExternalProject\fP will replace \fB<sep>\fP with \fB;\fP in the specified
command lines. This can be used to ensure a command has a literal \fB;\fP in it
where direct usage would otherwise be interpreted as argument separators to
CMake APIs instead. Note that the separator should be chosen to avoid being
confused for non\-list\-separator usages of the sequence. For example, using
\fBLIST_SEPARATOR\fP allows for passing list values to CMake cache variables on
the command line:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add(example
  ... # Download options, etc.
  LIST_SEPARATOR \(dq,\(dq
  CMAKE_ARGS \(dq\-DCMAKE_PREFIX_PATH:STRING=${first_prefix},${second_prefix}\(dq
)
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBCOMMAND <cmd>...\fP
Any of the other \fB\&..._COMMAND\fP options can have additional commands
appended to them by following them with as many \fBCOMMAND ...\fP options
as needed
(\fI\%generator expressions\fP are
supported). For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add(example
  ... # Download options, etc.
  BUILD_COMMAND ${CMAKE_COMMAND} \-E echo \(dqStarting $<CONFIG> build\(dq
  COMMAND       ${CMAKE_COMMAND} \-\-build <BINARY_DIR> \-\-config $<CONFIG>
  COMMAND       ${CMAKE_COMMAND} \-E echo \(dq$<CONFIG> build complete\(dq
)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.sp
It should also be noted that each build step is created via a call to
\fI\%ExternalProject_Add_Step()\fP\&. See that command\(aqs documentation for the
automatic substitutions that are supported for some options.
.SS Obtaining Project Properties
.INDENT 0.0
.TP
.B ExternalProject_Get_Property
The \fBExternalProject_Get_Property()\fP function retrieves external project
target properties:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Get_Property(<name> <prop1> [<prop2>...])
.EE
.UNINDENT
.UNINDENT
.sp
The function stores property values in variables of the same name. Property
names correspond to the keyword argument names of \fBExternalProject_Add()\fP\&.
For example, the source directory might be retrieved like so:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Get_property(myExtProj SOURCE_DIR)
message(\(dqSource dir of myExtProj = ${SOURCE_DIR}\(dq)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS Explicit Step Management
.sp
The \fBExternalProject_Add()\fP function on its own is often sufficient for
incorporating an external project into the main build. Certain scenarios
require additional work to implement desired behavior, such as adding in a
custom step or making steps available as manually triggerable targets. The
\fBExternalProject_Add_Step()\fP, \fBExternalProject_Add_StepTargets()\fP and
\fBExternalProject_Add_StepDependencies\fP functions provide the lower level
control needed to implement such step\-level capabilities.
.INDENT 0.0
.TP
.B ExternalProject_Add_Step
The \fBExternalProject_Add_Step()\fP function specifies an additional custom
step for an external project defined by an earlier call to
\fI\%ExternalProject_Add()\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add_Step(<name> <step> [<option>...])
.EE
.UNINDENT
.UNINDENT
.sp
\fB<name>\fP is the same as the name passed to the original call to
\fI\%ExternalProject_Add()\fP\&. The specified \fB<step>\fP must not be one of
the pre\-defined steps (\fBmkdir\fP, \fBdownload\fP, \fBupdate\fP,
\fBpatch\fP, \fBconfigure\fP, \fBbuild\fP, \fBinstall\fP or \fBtest\fP). The supported
options are:
.INDENT 7.0
.TP
.B \fBCOMMAND <cmd>...\fP
The command line to be executed by this custom step
(\fI\%generator expressions\fP are
supported). This option can be repeated multiple times to specify multiple
commands to be executed in order.
.TP
.B \fBCOMMENT \(dq<text>...\(dq\fP
Text to be printed when the custom step executes.
.TP
.B \fBDEPENDEES <step>...\fP
Other steps (custom or pre\-defined) on which this step depends.
.TP
.B \fBDEPENDERS <step>...\fP
Other steps (custom or pre\-defined) that depend on this new custom step.
.TP
.B \fBDEPENDS <file>...\fP
Files on which this custom step depends.
.TP
.B \fBINDEPENDENT <bool>\fP
Added in version 3.19.

.sp
Specifies whether this step is independent of the external dependencies
specified by the \fI\%ExternalProject_Add()\fP\(aqs \fBDEPENDS\fP option.
The default is \fBFALSE\fP\&.  Steps marked as independent may depend only
on other steps marked independent.  See policy \fI\%CMP0114\fP\&.
.sp
Note that this use of the term \(dqindependent\(dq refers only to independence
from external targets specified by the \fBDEPENDS\fP option and is
orthogonal to a step\(aqs dependencies on other steps.
.sp
If a step target is created for an independent step by the
\fI\%ExternalProject_Add()\fP \fBSTEP_TARGETS\fP option or by the
\fI\%ExternalProject_Add_StepTargets()\fP function, it will not depend
on the external targets, but may depend on targets for other steps.
.TP
.B \fBBYPRODUCTS <file>...\fP
Added in version 3.2.

.sp
Files that will be generated by this custom step but which might or might
not have their modification time updated by subsequent builds.
This may also be required to explicitly declare dependencies
when using the \fI\%Ninja\fP generator. This list of
files will ultimately be passed through as the \fBBYPRODUCTS\fP option to the
\fI\%add_custom_command()\fP used to implement the custom step internally,
which has additional documentation.
.TP
.B \fBALWAYS <bool>\fP
When enabled, this option specifies that the custom step should always be
run (i.e. that it is always considered out of date).
.TP
.B \fBJOB_SERVER_AWARE <bool>\fP
Added in version 3.28.

.sp
Specifies that the custom step is aware of the GNU Make job server.
See the \fI\%add_custom_command()\fP documentation of its
\fBJOB_SERVER_AWARE\fP option for details.
.TP
.B \fBEXCLUDE_FROM_MAIN <bool>\fP
When enabled, this option specifies that the external project\(aqs main target
does not depend on the custom step.
This may cause step targets to be created automatically for the steps on
which this step depends.  See policy \fI\%CMP0114\fP\&.
.TP
.B \fBWORKING_DIRECTORY <dir>\fP
Specifies the working directory to set before running the custom step\(aqs
command. If this option is not specified, the directory will be the value
of the \fI\%CMAKE_CURRENT_BINARY_DIR\fP at the point where
\fBExternalProject_Add_Step()\fP was called.
.TP
.B \fBLOG <bool>\fP
If set, this causes the output from the custom step to be captured to files
in the external project\(aqs \fBLOG_DIR\fP if supplied or \fBSTAMP_DIR\fP\&.
.TP
.B \fBUSES_TERMINAL <bool>\fP
If enabled, this gives the custom step direct access to the terminal if
possible.
.UNINDENT
.sp
The command line, comment, working directory and byproducts of every
standard and custom step are processed to replace the tokens
\fB<SOURCE_DIR>\fP, \fB<SOURCE_SUBDIR>\fP, \fB<BINARY_DIR>\fP, \fB<INSTALL_DIR>\fP
\fB<TMP_DIR>\fP, \fB<DOWNLOAD_DIR>\fP and \fB<DOWNLOADED_FILE>\fP with their
corresponding property values defined in the original call to
\fI\%ExternalProject_Add()\fP\&.
.sp
Added in version 3.3: Token replacement is extended to byproducts.

.sp
Added in version 3.11: The \fB<DOWNLOAD_DIR>\fP substitution token.

.UNINDENT
.INDENT 0.0
.TP
.B ExternalProject_Add_StepTargets
The \fBExternalProject_Add_StepTargets()\fP function generates targets for the
steps listed. The name of each created target will be of the form
\fB<name>\-<step>\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add_StepTargets(<name> <step1> [<step2>...])
.EE
.UNINDENT
.UNINDENT
.sp
Creating a target for a step allows it to be used as a dependency of another
target or to be triggered manually. Having targets for specific steps also
allows them to be driven independently of each other by specifying targets on
build command lines. For example, you may be submitting to a sub\-project
based dashboard where you want to drive the configure portion of the build,
then submit to the dashboard, followed by the build portion, followed
by tests. If you invoke a custom target that depends on a step halfway
through the step dependency chain, then all the previous steps will also run
to ensure everything is up to date.
.sp
Internally, \fI\%ExternalProject_Add()\fP calls
\fI\%ExternalProject_Add_Step()\fP to create each step. If any
\fBSTEP_TARGETS\fP were specified, then \fBExternalProject_Add_StepTargets()\fP
will also be called after \fI\%ExternalProject_Add_Step()\fP\&.  Even if a
step is not mentioned in the \fBSTEP_TARGETS\fP option,
\fBExternalProject_Add_StepTargets()\fP can still be called later to manually
define a target for the step.
.sp
The \fBSTEP_TARGETS\fP option for \fI\%ExternalProject_Add()\fP is generally
the easiest way to ensure targets are created for specific steps of interest.
For custom steps, \fBExternalProject_Add_StepTargets()\fP must be called
explicitly if a target should also be created for that custom step.
An alternative to these two options is to populate the \fBEP_STEP_TARGETS\fP
directory property.  It acts as a default for the step target options and
can save having to repeatedly specify the same set of step targets when
multiple external projects are being defined.
.sp
Added in version 3.19: If \fI\%CMP0114\fP is set to \fBNEW\fP, step targets are fully responsible
for holding the custom commands implementing their steps.  The primary
target created by \fBExternalProject_Add\fP depends on the step targets, and
the step targets depend on each other.  The target\-level dependencies match
the file\-level dependencies used by the custom commands for each step.
The targets for steps created with \fI\%ExternalProject_Add_Step()\fP\(aqs
\fBINDEPENDENT\fP option do not depend on the external targets specified
by \fI\%ExternalProject_Add()\fP\(aqs \fBDEPENDS\fP option.  The predefined
steps \fBmkdir\fP, \fBdownload\fP, \fBupdate\fP, and \fBpatch\fP are independent.

.sp
If \fI\%CMP0114\fP is not \fBNEW\fP, the following deprecated behavior
is available:
.INDENT 7.0
.IP \(bu 2
A deprecated \fBNO_DEPENDS\fP option may be specified immediately after the
\fB<name>\fP and before the first step.
If the \fBNO_DEPENDS\fP option is specified, the step target will not depend
on the dependencies of the external project (i.e. on any dependencies of the
\fB<name>\fP custom target created by \fI\%ExternalProject_Add()\fP). This is
usually safe for the \fBdownload\fP, \fBupdate\fP and \fBpatch\fP steps, since
they do not typically require that the dependencies are updated and built.
Using \fBNO_DEPENDS\fP for any of the other pre\-defined steps, however, may
break parallel builds. Only use \fBNO_DEPENDS\fP where it is certain that the
named steps genuinely do not have dependencies. For custom steps, consider
whether or not the custom commands require the dependencies to be
configured, built and installed.
.IP \(bu 2
The \fBINDEPENDENT_STEP_TARGETS\fP option for \fI\%ExternalProject_Add()\fP,
or the \fBEP_INDEPENDENT_STEP_TARGETS\fP directory property, tells the
function to call \fBExternalProject_Add_StepTargets()\fP internally
using the \fBNO_DEPENDS\fP option for the specified steps.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ExternalProject_Add_StepDependencies
Added in version 3.2.

.sp
The \fBExternalProject_Add_StepDependencies()\fP function can be used to add
dependencies to a step. The dependencies added must be targets CMake already
knows about (these can be ordinary executable or library targets, custom
targets or even step targets of another external project):
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add_StepDependencies(<name> <step> <target1> [<target2>...])
.EE
.UNINDENT
.UNINDENT
.sp
This function takes care to set both target and file level dependencies and
will ensure that parallel builds will not break. It should be used instead of
\fI\%add_dependencies()\fP whenever adding a dependency for some of the step
targets generated by the \fBExternalProject\fP module.
.UNINDENT
.SS Examples
.sp
The following example shows how to download and build a hypothetical project
called \fIFooBar\fP from github:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(ExternalProject)
ExternalProject_Add(foobar
  GIT_REPOSITORY    git@github.com:FooCo/FooBar.git
  GIT_TAG           origin/release/1.2.3
)
.EE
.UNINDENT
.UNINDENT
.sp
For the sake of the example, also define a second hypothetical external project
called \fISecretSauce\fP, which is downloaded from a web server. Two URLs are given
to take advantage of a faster internal network if available, with a fallback to
a slower external server. The project is a typical \fBMakefile\fP project with no
configure step, so some of the default commands are overridden. The build is
only required to build the \fIsauce\fP target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_program(MAKE_EXE NAMES gmake nmake make)
ExternalProject_Add(secretsauce
  URL               http://intranet.somecompany.com/artifacts/sauce\-2.7.tgz
                    https://www.somecompany.com/downloads/sauce\-2.7.zip
  URL_HASH          MD5=d41d8cd98f00b204e9800998ecf8427e
  CONFIGURE_COMMAND \(dq\(dq
  BUILD_COMMAND     ${MAKE_EXE} sauce
)
.EE
.UNINDENT
.UNINDENT
.sp
Suppose the build step of \fBsecretsauce\fP requires that \fBfoobar\fP must already
be built. This could be enforced like so:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add_StepDependencies(secretsauce build foobar)
.EE
.UNINDENT
.UNINDENT
.sp
Another alternative would be to create a custom target for \fBfoobar\fP\(aqs build
step and make \fBsecretsauce\fP depend on that rather than the whole \fBfoobar\fP
project. This would mean \fBfoobar\fP only needs to be built, it doesn\(aqt need to
run its install or test steps before \fBsecretsauce\fP can be built. The
dependency can also be defined along with the \fBsecretsauce\fP project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add_StepTargets(foobar build)
ExternalProject_Add(secretsauce
  URL               http://intranet.somecompany.com/artifacts/sauce\-2.7.tgz
                    https://www.somecompany.com/downloads/sauce\-2.7.zip
  URL_HASH          MD5=d41d8cd98f00b204e9800998ecf8427e
  CONFIGURE_COMMAND \(dq\(dq
  BUILD_COMMAND     ${MAKE_EXE} sauce
  DEPENDS           foobar\-build
)
.EE
.UNINDENT
.UNINDENT
.sp
Instead of calling \fI\%ExternalProject_Add_StepTargets()\fP, the target could
be defined along with the \fBfoobar\fP project itself:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add(foobar
  GIT_REPOSITORY git@github.com:FooCo/FooBar.git
  GIT_TAG        origin/release/1.2.3
  STEP_TARGETS   build
)
.EE
.UNINDENT
.UNINDENT
.sp
If many external projects should have the same set of step targets, setting a
directory property may be more convenient. The \fBbuild\fP step target could be
created automatically by setting the \fBEP_STEP_TARGETS\fP directory property
before creating the external projects with \fI\%ExternalProject_Add()\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set_property(DIRECTORY PROPERTY EP_STEP_TARGETS build)
.EE
.UNINDENT
.UNINDENT
.sp
Lastly, suppose that \fBsecretsauce\fP provides a script called \fBmakedoc\fP which
can be used to generate its own documentation. Further suppose that the script
expects the output directory to be provided as the only parameter and that it
should be run from the \fBsecretsauce\fP source directory. A custom step and a
custom target to trigger the script can be defined like so:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
ExternalProject_Add_Step(secretsauce docs
  COMMAND           <SOURCE_DIR>/makedoc <BINARY_DIR>
  WORKING_DIRECTORY <SOURCE_DIR>
  COMMENT           \(dqBuilding secretsauce docs\(dq
  ALWAYS            TRUE
  EXCLUDE_FROM_MAIN TRUE
)
ExternalProject_Add_StepTargets(secretsauce docs)
.EE
.UNINDENT
.UNINDENT
.sp
The custom step could then be triggered from the main build like so:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake \-\-build . \-\-target secretsauce\-docs
.EE
.UNINDENT
.UNINDENT
.SS FeatureSummary
.sp
Functions for generating a summary of enabled/disabled features.
.sp
These functions can be used to generate a summary of enabled and disabled
packages and/or features for a build tree such as:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\-\- The following features have been enabled:

 * Example, usage example

\-\- The following OPTIONAL packages have been found:

 * LibXml2 (required version >= 2.4), XML library, <http://xmlsoft.org>
   Enables HTML\-import in MyWordProcessor
   Enables odt\-export in MyWordProcessor
 * PNG, image library, <http://www.libpng.org/pub/png/>
   Enables saving screenshots

\-\- The following OPTIONAL packages have not been found:

 * Lua, the Lua scripting language, <https://www.lua.org>
   Enables macros in MyWordProcessor
 * OpenGL, Open Graphics Library
.EE
.UNINDENT
.UNINDENT
.SS Global Properties
.INDENT 0.0
.TP
.B FeatureSummary_PKG_TYPES
Added in version 3.8.

.sp
This global property defines a
\fI\%semicolon\-separated list\fP of package types used
by the \fBFeatureSummary\fP module.
.sp
The order in this list is important, the first package type in the list has
the lowest importance, while the last has the highest importance.  The type of
a package can only be changed to a type with higher importance.
.sp
The default package types are \fBRUNTIME\fP, \fBOPTIONAL\fP, \fBRECOMMENDED\fP and
\fBREQUIRED\fP, with their importance ranked as
\fBRUNTIME < OPTIONAL < RECOMMENDED < REQUIRED\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B FeatureSummary_REQUIRED_PKG_TYPES
Added in version 3.8.

.sp
This global property defines a
\fI\%semicolon\-separated list\fP of package types that
are considered required.
.sp
If one or more packages in these categories are not found, CMake will abort
when the \fI\%feature_summary()\fP command is called with the
\fBFATAL_ON_MISSING_REQUIRED_PACKAGES\fP option enabled.
.sp
The default value for this global property is \fBREQUIRED\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B FeatureSummary_DEFAULT_PKG_TYPE
Added in version 3.8.

.sp
This global property defines the default package type.
.sp
When the \fI\%feature_summary()\fP command is called, and the user has not
explicitly set a type of some package, its type will be set to this value.
.sp
This value must be one of the types defined in the
\fI\%FeatureSummary_PKG_TYPES\fP global property.
.sp
The default value for this global property is \fBOPTIONAL\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B FeatureSummary_<TYPE>_DESCRIPTION
Added in version 3.9.

.sp
This global property can be defined for each package \fB<TYPE>\fP to a string
that will be used in the output titles of the
\fI\%feature_summary()\fP command.  For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
The following <FeatureSummary_<TYPE>_DESCRIPTION> have been found:
.EE
.UNINDENT
.UNINDENT
.sp
If not set, default string \fB<TYPE> packages\fP is used.
.UNINDENT
.SS Functions
.INDENT 0.0
.TP
.B feature_summary
.INDENT 7.0
.INDENT 3.5
.sp
.EX
feature_summary([FILENAME <file>]
                [APPEND]
                [VAR <variable_name>]
                [INCLUDE_QUIET_PACKAGES]
                [FATAL_ON_MISSING_REQUIRED_PACKAGES]
                [DESCRIPTION <description> | DEFAULT_DESCRIPTION]
                [QUIET_ON_EMPTY]
                WHAT (ALL
                     | PACKAGES_FOUND | PACKAGES_NOT_FOUND
                     | <TYPE>_PACKAGES_FOUND | <TYPE>_PACKAGES_NOT_FOUND
                     | ENABLED_FEATURES | DISABLED_FEATURES)
               )
.EE
.UNINDENT
.UNINDENT
.sp
This function can be used to print information about
enabled or disabled packages and features of a project.  By default,
only the names of the features/packages will be printed and their
required version when one was specified.  Use
\fI\%set_package_properties()\fP to add more useful information, like e.g.
a homepage URL for the respective package or their purpose in the project.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBWHAT\fP
This is the only mandatory option.  It specifies what information will be
printed:
.INDENT 7.0
.TP
.B \fBALL\fP
Print everything.
.TP
.B \fBENABLED_FEATURES\fP
The list of all features which are enabled.
.TP
.B \fBDISABLED_FEATURES\fP
The list of all features which are disabled.
.TP
.B \fBPACKAGES_FOUND\fP
The list of all packages which have been found.
.TP
.B \fBPACKAGES_NOT_FOUND\fP
The list of all packages which have not been found.
.UNINDENT
.sp
For each package type \fB<TYPE>\fP defined by the
\fI\%FeatureSummary_PKG_TYPES\fP global property, the following
information can also be used:
.INDENT 7.0
.TP
.B \fB<TYPE>_PACKAGES_FOUND\fP
The list of only packages of type \fB<TYPE>\fP which have been found.
.TP
.B \fB<TYPE>_PACKAGES_NOT_FOUND\fP
The list of only packages of type \fB<TYPE>\fP which have not been found.
.UNINDENT
.sp
Changed in version 3.1: The \fBWHAT\fP option is now a multi\-value keyword, so that these values can
be combined, with the exception of the \fBALL\fP value, in order to
customize the output.  For example:

.INDENT 7.0
.INDENT 3.5
.sp
.EX
feature_summary(WHAT ENABLED_FEATURES DISABLED_FEATURES)
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBFILENAME <file>\fP
If this option is given, the information is printed into this file instead
of the terminal.  Relative \fB<file>\fP path is interpreted as being relative
to the current source directory (i.e. \fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.TP
.B \fBAPPEND\fP
If this option is given, the output is appended to the \fB<file>\fP provided
by the \fBFILENAME\fP option, otherwise the file is overwritten if it already
exists.
.TP
.B \fBVAR <variable_name>\fP
If this option is given, the information is stored into the specified
variable \fB<variable_name>\fP instead of the terminal.
.TP
.B \fBDESCRIPTION <description>\fP
A description or headline which will be printed above the actual content.
Without this option, if only one package type was requested, no title is
printed, unless a custom string is explicitly set using this option or
\fBDEFAULT_DESCRIPTION\fP option is used that outputs a default title for the
requested type.
.TP
.B \fBDEFAULT_DESCRIPTION\fP
Added in version 3.9.

.sp
The default description or headline to be printed above the content as
opposed to the customizable \fBDESCRIPTION <description>\fP\&.
.TP
.B \fBINCLUDE_QUIET_PACKAGES\fP
If this option is given, packages which have been searched with
\fI\%find_package(... QUIET)\fP will also be listed.  By default they are
skipped.
.TP
.B \fBFATAL_ON_MISSING_REQUIRED_PACKAGES\fP
If this option is given, CMake will abort with fatal error if a package
which is marked as one of the package types listed in the
\fI\%FeatureSummary_REQUIRED_PKG_TYPES\fP global property has not been
found.
.UNINDENT
.sp
The \fI\%FeatureSummary_DEFAULT_PKG_TYPE\fP global property can be
modified to change the default package type assigned when not explicitly
assigned by the user.
.INDENT 7.0
.TP
.B \fBQUIET_ON_EMPTY\fP
Added in version 3.8.

.sp
If this option is given, when only one package type was requested, and no
packages belonging to that category were found, then no output (including
the \fBDESCRIPTION\fP) is printed nor added to the \fBFILENAME\fP, or the
\fBVAR\fP variable.
.UNINDENT
.sp
Example 1, append everything to a file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(FeatureSummary)
feature_summary(WHAT ALL
                FILENAME ${CMAKE_BINARY_DIR}/all.log APPEND)
.EE
.UNINDENT
.UNINDENT
.sp
Example 2, print the enabled features into the variable
\fBenabledFeaturesText\fP, including the \fBQUIET\fP packages:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(FeatureSummary)
feature_summary(WHAT ENABLED_FEATURES
               INCLUDE_QUIET_PACKAGES
               DESCRIPTION \(dqEnabled Features:\(dq
               VAR enabledFeaturesText)
message(STATUS \(dq${enabledFeaturesText}\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
Example 3, add custom package type and print only the categories that are not
empty:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(FeatureSummary)
set_property(GLOBAL APPEND PROPERTY FeatureSummary_PKG_TYPES BUILD)
find_package(FOO)
set_package_properties(FOO PROPERTIES TYPE BUILD)
feature_summary(WHAT BUILD_PACKAGES_FOUND
                DESCRIPTION \(dqBuild tools found:\(dq
                QUIET_ON_EMPTY)
feature_summary(WHAT BUILD_PACKAGES_NOT_FOUND
                DESCRIPTION \(dqBuild tools not found:\(dq
                QUIET_ON_EMPTY)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B set_package_properties
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_package_properties(<name> PROPERTIES
                       [URL <url>]
                       [DESCRIPTION <description>]
                       [TYPE (RUNTIME|OPTIONAL|RECOMMENDED|REQUIRED)]
                       [PURPOSE <purpose>]
                      )
.EE
.UNINDENT
.UNINDENT
.sp
Use this function to configure and provide information about the package named
\fB<name>\fP, which can then be displayed using the
\fI\%feature_summary()\fP command.  This can be performed either directly
within the corresponding \fI\%Find module\fP or in the project
that uses the module after invoking the \fI\%find_package()\fP call.  The
features for which information can be set are determined automatically after
the \fI\%find_package()\fP command.
.INDENT 7.0
.TP
.B \fBURL <url>\fP
This should be the homepage of the package, or something similar.
Ideally this is set already directly in the
\fI\%Find module\fP\&.
.TP
.B \fBDESCRIPTION <description>\fP
A short description what that package is, at most one sentence.
Ideally this is set already directly in the
\fI\%Find module\fP\&.
.TP
.B \fBTYPE <type>\fP
What type of dependency has the using project on that package.
Default is \fBOPTIONAL\fP\&.  In this case it is a package which can be used
by the project when available at buildtime, but it also work without.
\fBRECOMMENDED\fP is similar to \fBOPTIONAL\fP, i.e.  the project will build if
the package is not present, but the functionality of the resulting
binaries will be severely limited.  If a \fBREQUIRED\fP package is not
available at buildtime, the project may not even build.  This can be
combined with the
\fI\%feature_summary(FATAL_ON_MISSING_REQUIRED_PACKAGES)\fP command
option.  Last, a \fBRUNTIME\fP package is a package which is actually not used
at all during the build, but which is required for actually running the
resulting binaries.  So if such a package is
missing, the project can still be built, but it may not work later on.
If \fBset_package_properties()\fP is called multiple times for the same
package with different TYPEs, the \fBTYPE\fP is only changed to higher
TYPEs (\fBRUNTIME < OPTIONAL < RECOMMENDED < REQUIRED\fP), lower TYPEs are
ignored.  The \fBTYPE\fP property is project\-specific, so it cannot be set
by the \fI\%Find module\fP, but must be set in the project.
The accepted types can be changed by setting the
\fI\%FeatureSummary_PKG_TYPES\fP global property.
.TP
.B \fBPURPOSE <purpose>\fP
This describes which features this package enables in the
project, i.e.  it tells the user what functionality they get in the
resulting binaries.  If \fBset_package_properties()\fP is called multiple
times for a package, all \fBPURPOSE\fP properties are appended to a list of
purposes of the package in the project.  As the \fBTYPE\fP property, also
the \fBPURPOSE\fP property is project\-specific, so it cannot be set by the
\fI\%Find module\fP, but must be set in the project.
.UNINDENT
.sp
Example for setting the info for a package:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(FeatureSummary)
find_package(LibXml2)
set_package_properties(LibXml2 PROPERTIES
                       DESCRIPTION \(dqXML library\(dq
                       URL \(dqhttp://xmlsoft.org\(dq)
# or
set_package_properties(LibXml2 PROPERTIES
                       TYPE RECOMMENDED
                       PURPOSE \(dqEnables HTML\-import in MyWordProcessor\(dq)
# or
set_package_properties(LibXml2 PROPERTIES
                       TYPE OPTIONAL
                       PURPOSE \(dqEnables odt\-export in MyWordProcessor\(dq)

find_package(DBUS)
set_package_properties(DBUS PROPERTIES
  TYPE RUNTIME
  PURPOSE \(dqNecessary to disable the screensaver during a presentation\(dq)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B add_feature_info
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_feature_info(<name> <enabled> <description>)
.EE
.UNINDENT
.UNINDENT
.sp
Use this function to add information about a feature identified with a given
\fB<name>\fP\&.  The \fB<enabled>\fP contains whether this feature is enabled or
not.  It can be a variable or a list of conditions.
\fB<description>\fP is a text describing the feature.  The information can
be displayed using \fI\%feature_summary()\fP for \fBENABLED_FEATURES\fP and
\fBDISABLED_FEATURES\fP respectively.
.sp
Changed in version 3.8: \fB<enabled>\fP can be a list of conditions.

.sp
Changed in version 4.0: Full \fI\%Condition Syntax\fP is now supported for \fB<enabled>\fP\&.
See policy \fI\%CMP0183\fP\&.

.sp
Example for setting the info for a feature:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(FeatureSummary)

option(WITH_FOO \(dqHelp for foo\(dq ON)
add_feature_info(Foo WITH_FOO \(dqthis feature provides very cool stuff\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
Example for setting feature info based on a list of conditions:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
option(WITH_FOO \(dqHelp for foo\(dq ON)
option(WITH_BAR \(dqHelp for bar\(dq OFF)
add_feature_info(
  FooBar
  \(dqWITH_FOO;NOT WITH_BAR\(dq
  \(dqthis feature is enabled when WITH_FOO is ON and WITH_BAR turned OFF\(dq
)
.EE
.UNINDENT
.UNINDENT
.sp
Example for setting feature info depending on a full condition syntax:
.sp
Unlike semicolon\-separated list of conditions, this enables using entire
condition syntax as being the \fBif\fP clause argument, such as grouping
conditions with parens and similar.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
option(WITH_FOO \(dqHelp for foo\(dq ON)
option(WITH_BAR \(dqHelp for bar\(dq ON)
option(WITH_BAZ \(dqHelp for baz\(dq OFF)
add_feature_info(
  FooBarBaz
  \(dqWITH_FOO AND (WITH_BAR OR WITH_BAZ)\(dq
  \(dqthis feature is enabled when the entire condition is true\(dq
)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS Deprecated Functions
.sp
The following legacy and deprecated functions are provided for backward
compatibility with previous CMake versions:
.INDENT 0.0
.TP
.B set_package_info
Deprecated since version 3.8.

.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_package_info(<name> <description> [ <url> [<purpose>] ])
.EE
.UNINDENT
.UNINDENT
.sp
Set up information about the package \fB<name>\fP, which can then be displayed
via \fI\%feature_summary()\fP\&.  This can be done either directly in the
\fI\%Find module\fP or in the project which uses the
\fBFeatureSummary\fP module after the \fI\%find_package()\fP call.  The
features for which information can be set are added automatically by the
\fBfind_package()\fP command.
.sp
This function is deprecated.  Use the \fI\%set_package_properties()\fP, and
\fI\%add_feature_info()\fP functions instead.
.UNINDENT
.INDENT 0.0
.TP
.B set_feature_info
Deprecated since version 3.8.

.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_feature_info(<name> <description> [<url>])
.EE
.UNINDENT
.UNINDENT
.sp
Does the same as:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_package_info(<name> <description> [<url>])
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B print_enabled_features
Deprecated since version 3.8.

.INDENT 7.0
.INDENT 3.5
.sp
.EX
print_enabled_features()
.EE
.UNINDENT
.UNINDENT
.sp
Does the same as:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
feature_summary(WHAT ENABLED_FEATURES DESCRIPTION \(dqEnabled features:\(dq)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B print_disabled_features
Deprecated since version 3.8.

.INDENT 7.0
.INDENT 3.5
.sp
.EX
print_disabled_features()
.EE
.UNINDENT
.UNINDENT
.sp
Does the same as:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
feature_summary(WHAT DISABLED_FEATURES DESCRIPTION \(dqDisabled features:\(dq)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS FetchContent
.sp
Added in version 3.11.

.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fI\%Using Dependencies Guide\fP provides a high\-level
introduction to this general topic. It provides a broader overview of
where the \fBFetchContent\fP module fits into the bigger picture,
including its relationship to the \fI\%find_package()\fP command.
The guide is recommended pre\-reading before moving on to the details below.
.UNINDENT
.UNINDENT
.SS Overview
.sp
This module enables populating content at configure time via any method
supported by the \fI\%ExternalProject\fP module.  Whereas
\fI\%ExternalProject_Add()\fP downloads at build time, the
\fBFetchContent\fP module makes content available immediately, allowing the
configure step to use the content in commands like \fI\%add_subdirectory()\fP,
\fI\%include()\fP or \fI\%file()\fP operations.
.sp
Content population details should be defined separately from the command that
performs the actual population.  This separation ensures that all the
dependency details are defined before anything might try to use them to
populate content.  This is particularly important in more complex project
hierarchies where dependencies may be shared between multiple projects.
.sp
The following shows a typical example of declaring content details for some
dependencies and then ensuring they are populated with a separate call:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release\-1.10.0
)
FetchContent_Declare(
  myCompanyIcons
  URL      https://intranet.mycompany.com/assets/iconset_1.12.tar.gz
  URL_HASH MD5=5588a7b18261c20068beabfb4f530b87
)

FetchContent_MakeAvailable(googletest myCompanyIcons)
.EE
.UNINDENT
.UNINDENT
.sp
The \fI\%FetchContent_MakeAvailable()\fP command ensures the named
dependencies have been populated, either by an earlier call, or by populating
them itself.  When performing the population, it will also add them to the
main build, if possible, so that the main build can use the populated
projects\(aq targets, etc.  See the command\(aqs documentation for how these steps
are performed.
.sp
When using a hierarchical project arrangement, projects at higher levels in
the hierarchy are able to override the declared details of content specified
anywhere lower in the project hierarchy.  The first details to be declared
for a given dependency take precedence, regardless of where in the project
hierarchy that occurs.  Similarly, the first call that tries to populate a
dependency \(dqwins\(dq, with subsequent populations reusing the result of the
first instead of repeating the population again.
See the \fI\%Examples\fP which demonstrate
this scenario.
.sp
The \fBFetchContent\fP module also supports defining and populating
content in a single call, with no check for whether the content has been
populated elsewhere already.  This should not be done in projects, but may
be appropriate for populating content in
\fI\%CMake script mode\fP\&.
See \fI\%FetchContent_Populate()\fP for details.
.SS Commands
.INDENT 0.0
.TP
.B FetchContent_Declare
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FetchContent_Declare(
  <name>
  <contentOptions>...
  [EXCLUDE_FROM_ALL]
  [SYSTEM]
  [OVERRIDE_FIND_PACKAGE |
   FIND_PACKAGE_ARGS args...]
)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBFetchContent_Declare()\fP function records the options that describe
how to populate the specified content.  If such details have already
been recorded earlier in this project (regardless of where in the project
hierarchy), this and all later calls for the same content \fB<name>\fP are
ignored.  This \(dqfirst to record, wins\(dq approach is what allows hierarchical
projects to have parent projects override content details of child projects.
.sp
The content \fB<name>\fP can be any string without spaces, but good practice
would be to use only letters, numbers, and underscores.  The name will be
treated case\-insensitively, and it should be obvious for the content it
represents. It is often the name of the child project, or the value given
to its top level \fI\%project()\fP command (if it is a CMake project).
For well\-known public projects, the name should generally be the official
name of the project.  Choosing an unusual name makes it unlikely that other
projects needing that same content will use the same name, leading to
the content being populated multiple times.
.sp
The \fB<contentOptions>\fP can be any of the download, update, or patch options
that the \fI\%ExternalProject_Add()\fP command understands.  The configure,
build, install, and test steps are explicitly disabled, so options related
to those steps will be ignored.  The \fBSOURCE_SUBDIR\fP option is an
exception, see \fI\%FetchContent_MakeAvailable()\fP for details on how that
affects behavior.
.sp
Changed in version 3.30: When policy \fI\%CMP0168\fP is set to \fBNEW\fP, some output\-related and
directory\-related options are ignored.  See the policy documentation for
details.

.sp
In most cases, \fB<contentOptions>\fP will just be a couple of options defining
the download method and method\-specific details like a commit tag or archive
hash.  For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release\-1.10.0
)

FetchContent_Declare(
  myCompanyIcons
  URL      https://intranet.mycompany.com/assets/iconset_1.12.tar.gz
  URL_HASH MD5=5588a7b18261c20068beabfb4f530b87
)

FetchContent_Declare(
  myCompanyCertificates
  SVN_REPOSITORY svn+ssh://svn.mycompany.com/srv/svn/trunk/certs
  SVN_REVISION   \-r12345
)
.EE
.UNINDENT
.UNINDENT
.sp
Where contents are being fetched from a remote location and you do not
control that server, it is advisable to use a hash for \fBGIT_TAG\fP rather
than a branch or tag name.  A commit hash is more secure and helps to
confirm that the downloaded contents are what you expected.
.sp
Changed in version 3.14: Commands for the download, update, or patch steps can access the terminal.
This may be needed for things like password prompts or real\-time display
of command progress.

.sp
Added in version 3.22: The \fI\%CMAKE_TLS_VERIFY\fP, \fI\%CMAKE_TLS_CAINFO\fP,
\fI\%CMAKE_NETRC\fP, and \fI\%CMAKE_NETRC_FILE\fP variables now
provide the defaults for their corresponding content options, just like
they do for \fI\%ExternalProject_Add()\fP\&. Previously, these variables
were ignored by the \fBFetchContent\fP module.

.sp
Added in version 3.24: 
.INDENT 7.0
.TP
.B \fBFIND_PACKAGE_ARGS\fP
This option is for scenarios where the
\fI\%FetchContent_MakeAvailable()\fP command may first try a call to
\fI\%find_package()\fP to satisfy the dependency for \fB<name>\fP\&.
By default, such a call would be simply \fBfind_package(<name>)\fP, but
\fBFIND_PACKAGE_ARGS\fP can be used to provide additional arguments to be
appended after the \fB<name>\fP\&.  \fBFIND_PACKAGE_ARGS\fP can also be given
with nothing after it, which indicates that \fI\%find_package()\fP can
still be called if \fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP is
set to \fBOPT_IN\fP, or is not set.
.sp
It would not normally be appropriate to specify \fBREQUIRED\fP as one of
the additional arguments after \fBFIND_PACKAGE_ARGS\fP\&.  Doing so would
mean the \fI\%find_package()\fP call must succeed, so none of the other
details specified in the \fBFetchContent_Declare()\fP call would get a
chance to be used as a fall\-back.
.sp
Everything after the \fBFIND_PACKAGE_ARGS\fP keyword is appended to the
\fI\%find_package()\fP call, so all other \fB<contentOptions>\fP must
come before the \fBFIND_PACKAGE_ARGS\fP keyword.  If the
\fI\%CMAKE_FIND_PACKAGE_TARGETS_GLOBAL\fP variable is set to true
at the time \fBFetchContent_Declare()\fP is called, a \fBGLOBAL\fP keyword
will be appended to the \fI\%find_package()\fP arguments if it was
not already specified.  It will also be appended if
\fBFIND_PACKAGE_ARGS\fP was not given, but
\fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP was set to \fBALWAYS\fP\&.
.sp
\fBOVERRIDE_FIND_PACKAGE\fP cannot be used when \fBFIND_PACKAGE_ARGS\fP is
given.
.sp
\fI\%Dependency Providers\fP discusses another way that
\fI\%FetchContent_MakeAvailable()\fP calls can be redirected.
\fBFIND_PACKAGE_ARGS\fP is intended for project control, whereas
dependency providers allow users to override project behavior.
.TP
.B \fBOVERRIDE_FIND_PACKAGE\fP
When a \fBFetchContent_Declare(<name> ...)\fP call includes this option,
subsequent calls to \fBfind_package(<name> ...)\fP will ensure that
\fBFetchContent_MakeAvailable(<name>)\fP has been called, then use the
config package files in the \fI\%CMAKE_FIND_PACKAGE_REDIRECTS_DIR\fP
directory (which are usually created by \fBFetchContent_MakeAvailable()\fP).
This effectively makes \fI\%FetchContent_MakeAvailable()\fP override
\fI\%find_package()\fP for the named dependency, allowing the former to
satisfy the package requirements of the latter.  \fBFIND_PACKAGE_ARGS\fP
cannot be used when \fBOVERRIDE_FIND_PACKAGE\fP is given.
.sp
If a \fI\%dependency provider\fP has been set
and the project calls \fI\%find_package()\fP for the \fB<name>\fP
dependency, \fBOVERRIDE_FIND_PACKAGE\fP will not prevent the provider
from seeing that call.  Dependency providers always have the opportunity
to intercept any direct call to \fI\%find_package()\fP, except if that
call contains the \fBBYPASS_PROVIDER\fP option.
.UNINDENT

.sp
Added in version 3.25: 
.INDENT 7.0
.TP
.B \fBSYSTEM\fP
If the \fBSYSTEM\fP argument is provided, the \fI\%SYSTEM\fP directory
property of a subdirectory added by
\fI\%FetchContent_MakeAvailable()\fP will be set to true.  This will
affect non\-imported targets created as part of that command.
See the \fI\%SYSTEM\fP target property documentation for a more
detailed discussion of the effects.
.UNINDENT

.sp
Added in version 3.28: 
.INDENT 7.0
.TP
.B \fBEXCLUDE_FROM_ALL\fP
If the \fBEXCLUDE_FROM_ALL\fP argument is provided, then targets in the
subdirectory added by \fI\%FetchContent_MakeAvailable()\fP will not be
included in the \fBALL\fP target by default, and may be excluded from IDE
project files. See the documentation for the directory property
\fI\%EXCLUDE_FROM_ALL\fP for a detailed discussion of the effects.
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B FetchContent_MakeAvailable
Added in version 3.14.

.INDENT 7.0
.INDENT 3.5
.sp
.EX
FetchContent_MakeAvailable(<name1> [<name2>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command ensures that each of the named dependencies are made available
to the project by the time it returns.  There must have been a call to
\fI\%FetchContent_Declare()\fP for each dependency, and the first such call
will control how that dependency will be made available, as described below.
.sp
If \fB<lowercaseName>_SOURCE_DIR\fP is not set:
.INDENT 7.0
.IP \(bu 2
Added in version 3.24: If a \fI\%dependency provider\fP is set, call the
provider\(aqs command with \fBFETCHCONTENT_MAKEAVAILABLE_SERIAL\fP as the
first argument, followed by the arguments of the first call to
\fI\%FetchContent_Declare()\fP for \fB<name>\fP\&.  If \fBSOURCE_DIR\fP or
\fBBINARY_DIR\fP were not part of the original declared arguments, they
will be added with their default values.
If \fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP was set to \fBNEVER\fP
when the details were declared, any \fBFIND_PACKAGE_ARGS\fP will be
omitted.  The \fBOVERRIDE_FIND_PACKAGE\fP keyword is also always omitted.
If the provider fulfilled the request, \fBFetchContent_MakeAvailable()\fP
will consider that dependency handled, skip the remaining steps below,
and move on to the next dependency in the list.

.IP \(bu 2
Added in version 3.24: If permitted, \fI\%find_package(<name> [<args>...])\fP
will be called, where \fB<args>...\fP may be provided by the
\fBFIND_PACKAGE_ARGS\fP option in \fI\%FetchContent_Declare()\fP\&.
The value of the \fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP variable
at the time \fI\%FetchContent_Declare()\fP was called determines whether
\fBFetchContent_MakeAvailable()\fP can call \fI\%find_package()\fP\&.
If the \fI\%CMAKE_FIND_PACKAGE_TARGETS_GLOBAL\fP variable is set to
true when \fBFetchContent_MakeAvailable()\fP is called, it still affects
any imported targets created when that in turn calls
\fI\%find_package()\fP, even if that variable was false when the
corresponding details were declared.

.UNINDENT
.sp
If the dependency was not satisfied by a provider or a
\fI\%find_package()\fP call, \fBFetchContent_MakeAvailable()\fP then uses
the following logic to make the dependency available:
.INDENT 7.0
.IP \(bu 2
If the dependency has already been populated earlier in this run, set
the \fB<lowercaseName>_POPULATED\fP, \fB<lowercaseName>_SOURCE_DIR\fP, and
\fB<lowercaseName>_BINARY_DIR\fP variables in the same way as a call to
\fI\%FetchContent_GetProperties()\fP, then skip the remaining steps
below and move on to the next dependency in the list.
.IP \(bu 2
Populate the dependency using the details recorded by an earlier call
to \fI\%FetchContent_Declare()\fP\&.
Halt with a fatal error if no such details have been recorded.
\fI\%FETCHCONTENT_SOURCE_DIR_<uppercaseName>\fP can be used to override
the declared details and use content provided at the specified location
instead.
.IP \(bu 2
Added in version 3.24: Ensure the \fI\%CMAKE_FIND_PACKAGE_REDIRECTS_DIR\fP directory
contains a \fB<lowercaseName>\-config.cmake\fP and a
\fB<lowercaseName>\-config\-version.cmake\fP file (or equivalently,
\fB<name>Config.cmake\fP and \fB<name>ConfigVersion.cmake\fP).
The directory that the \fI\%CMAKE_FIND_PACKAGE_REDIRECTS_DIR\fP
variable points to is cleared at the start of every CMake run.
If no config file exists after populating the dependency in the previous
step, a minimal one will be written which \fI\%includes\fP
any \fB<lowercaseName>\-extra.cmake\fP or \fB<name>Extra.cmake\fP file with
the \fBOPTIONAL\fP flag (so the files can be missing and won\(aqt generate a
warning).  Similarly, if no config version file exists, a very simple
one will be written which sets \fBPACKAGE_VERSION_COMPATIBLE\fP and
\fBPACKAGE_VERSION_EXACT\fP to true.  This ensures all future calls to
\fI\%find_package()\fP for the dependency will use the redirected
config file, regardless of any version requirements.
CMake cannot automatically determine an arbitrary dependency\(aqs version,
so it cannot set \fBPACKAGE_VERSION\fP\&.
When a dependency is pulled in via \fI\%add_subdirectory()\fP in the
next step, it may choose to overwrite the generated config version file
in \fI\%CMAKE_FIND_PACKAGE_REDIRECTS_DIR\fP with one that also sets
\fBPACKAGE_VERSION\fP\&.
The dependency may also write a \fB<lowercaseName>\-extra.cmake\fP or
\fB<name>Extra.cmake\fP file to perform custom processing, or define any
variables that their normal (installed) package config file would
otherwise usually define (many projects don\(aqt do any custom processing
or set any variables and therefore have no need to do this).
If required, the main project can write these files instead if the
dependency project doesn\(aqt do so.  This allows the main project to
add missing details from older dependencies that haven\(aqt or can\(aqt be
updated to support this functionality.
See \fI\%Integrating With find_package()\fP for examples.

.IP \(bu 2
If the top directory of the populated content contains a \fBCMakeLists.txt\fP
file, call \fI\%add_subdirectory()\fP to add it to the main build.
It is not an error for there to be no \fBCMakeLists.txt\fP file, which
allows the command to be used for dependencies that make downloaded
content available at a known location, but which do not need or support
being added directly to the build.
.sp
Added in version 3.18: The \fBSOURCE_SUBDIR\fP option can be given in the declared details to
look somewhere below the top directory instead (i.e. the same way that
\fBSOURCE_SUBDIR\fP is used by the \fI\%ExternalProject_Add()\fP
command).  The path provided with \fBSOURCE_SUBDIR\fP must be relative,
and it will be treated as relative to the top directory.  It can also
point to a directory that does not contain a \fBCMakeLists.txt\fP file,
or even to a directory that doesn\(aqt exist.  This can be used to avoid
adding a project that contains a \fBCMakeLists.txt\fP file in its top
directory.

.sp
Added in version 3.25: If the \fBSYSTEM\fP keyword was included in the call to
\fI\%FetchContent_Declare()\fP, the \fBSYSTEM\fP keyword will be
added to the \fI\%add_subdirectory()\fP command.

.sp
Added in version 3.28: If the \fBEXCLUDE_FROM_ALL\fP keyword was included in the call to
\fI\%FetchContent_Declare()\fP, the \fBEXCLUDE_FROM_ALL\fP keyword will
be added to the \fI\%add_subdirectory()\fP command.

.sp
Added in version 3.29: \fI\%CMAKE_EXPORT_FIND_PACKAGE_NAME\fP is set to the dependency name
before calling \fI\%add_subdirectory()\fP\&.

.UNINDENT
.sp
Projects should aim to declare the details of all dependencies they might
use before they call \fBFetchContent_MakeAvailable()\fP for any of them.
This ensures that if any of the dependencies are also sub\-dependencies of
one or more of the others, the main project still controls the details
that will be used (because it will declare them first before the
dependencies get a chance to).  In the following code samples, assume that
the \fBuses_other\fP dependency also uses \fBFetchContent\fP to add the \fBother\fP
dependency internally:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
# WRONG: Should declare all details first
FetchContent_Declare(uses_other ...)
FetchContent_MakeAvailable(uses_other)

FetchContent_Declare(other ...)    # Will be ignored, uses_other beat us to it
FetchContent_MakeAvailable(other)  # Would use details declared by uses_other
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.EX
# CORRECT: All details declared first, so they will take priority
FetchContent_Declare(uses_other ...)
FetchContent_Declare(other ...)
FetchContent_MakeAvailable(uses_other other)
.EE
.UNINDENT
.UNINDENT
.sp
Note that \fI\%CMAKE_VERIFY_INTERFACE_HEADER_SETS\fP is explicitly set
to false upon entry to \fBFetchContent_MakeAvailable()\fP, and is restored to
its original value before the command returns.  Developers typically only
want to verify header sets from the main project, not those from any
dependencies.  This local manipulation of the
\fI\%CMAKE_VERIFY_INTERFACE_HEADER_SETS\fP variable provides that
intuitive behavior.  You can use variables like
\fI\%CMAKE_PROJECT_INCLUDE\fP or
\fI\%CMAKE_PROJECT_<PROJECT\-NAME>_INCLUDE\fP to turn verification back
on for all or some dependencies.  You can also set the
\fI\%VERIFY_INTERFACE_HEADER_SETS\fP property of individual targets.
.UNINDENT
.INDENT 0.0
.TP
.B FetchContent_Populate
The \fBFetchContent_Populate()\fP command is a self\-contained call which can
be used to perform content population as an isolated operation.
It is rarely the right command to use, projects should almost always use
\fI\%FetchContent_Declare()\fP and \fI\%FetchContent_MakeAvailable()\fP
instead. The main use case for \fBFetchContent_Populate()\fP is in
\fI\%CMake script mode\fP as part of implementing
some other higher level custom feature.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FetchContent_Populate(
  <name>
  [QUIET]
  [SUBBUILD_DIR <subBuildDir>]
  [SOURCE_DIR <srcDir>]
  [BINARY_DIR <binDir>]
  ...
)
.EE
.UNINDENT
.UNINDENT
.sp
At least one option must be specified after \fI<name>\fP, otherwise the call
is interpreted differently (see \fI\%below\fP).
The supported options for \fBFetchContent_Populate()\fP are the same as those
for \fI\%FetchContent_Declare()\fP, with a few exceptions. The following
do not relate to populating content with \fBFetchContent_Populate()\fP and
therefore are not supported:
.INDENT 7.0
.IP \(bu 2
\fBEXCLUDE_FROM_ALL\fP
.IP \(bu 2
\fBSYSTEM\fP
.IP \(bu 2
\fBOVERRIDE_FIND_PACKAGE\fP
.IP \(bu 2
\fBFIND_PACKAGE_ARGS\fP
.UNINDENT
.sp
The few options shown in the signature above are either specific to
\fBFetchContent_Populate()\fP, or their behavior is slightly modified from how
\fI\%ExternalProject_Add()\fP treats them:
.INDENT 7.0
.TP
.B \fBQUIET\fP
The \fBQUIET\fP option can be given to hide the output associated with
populating the specified content.  If the population fails, the output will
be shown regardless of whether this option was given or not so that the
cause of the failure can be diagnosed.  The \fI\%FETCHCONTENT_QUIET\fP
variable has no effect on \fBFetchContent_Populate()\fP calls of this form
where the content details are provided directly.
.sp
Changed in version 3.30: The \fBQUIET\fP option and \fI\%FETCHCONTENT_QUIET\fP variable have no
effect when policy \fI\%CMP0168\fP is set to \fBNEW\fP\&. The output is
still quiet by default in that case, but verbosity is controlled by the
message logging level (see \fI\%CMAKE_MESSAGE_LOG_LEVEL\fP and
\fI\%\-\-log\-level\fP).

.TP
.B \fBSUBBUILD_DIR\fP
The \fBSUBBUILD_DIR\fP argument can be provided to change the location of the
sub\-build created to perform the population.  The default value is
\fB${CMAKE_CURRENT_BINARY_DIR}/<lowercaseName>\-subbuild\fP, and it would be
unusual to need to override this default.  If a relative path is specified,
it will be interpreted as relative to \fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
This option should not be confused with the \fBSOURCE_SUBDIR\fP option, which
only affects the \fI\%FetchContent_MakeAvailable()\fP command.
.sp
Changed in version 3.30: \fBSUBBUILD_DIR\fP is ignored when policy \fI\%CMP0168\fP is set to
\fBNEW\fP, since there is no sub\-build in that case.

.TP
.B \fBSOURCE_DIR\fP, \fBBINARY_DIR\fP
The \fBSOURCE_DIR\fP and \fBBINARY_DIR\fP arguments are supported by
\fI\%ExternalProject_Add()\fP, but different default values are used by
\fBFetchContent_Populate()\fP\&.  \fBSOURCE_DIR\fP defaults to
\fB${CMAKE_CURRENT_BINARY_DIR}/<lowercaseName>\-src\fP, and \fBBINARY_DIR\fP
defaults to \fB${CMAKE_CURRENT_BINARY_DIR}/<lowercaseName>\-build\fP\&.
If a relative path is specified, it will be interpreted as relative to
\fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
.UNINDENT
.sp
In addition to the above explicit options, any other unrecognized options are
passed through unmodified to \fI\%ExternalProject_Add()\fP to set up the
download, patch, and update steps.  The following options are explicitly
prohibited (they are disabled by the \fBFetchContent_Populate()\fP command):
.INDENT 7.0
.IP \(bu 2
\fBCONFIGURE_COMMAND\fP
.IP \(bu 2
\fBBUILD_COMMAND\fP
.IP \(bu 2
\fBINSTALL_COMMAND\fP
.IP \(bu 2
\fBTEST_COMMAND\fP
.UNINDENT
.sp
With this form, the \fI\%FETCHCONTENT_FULLY_DISCONNECTED\fP and
\fI\%FETCHCONTENT_UPDATES_DISCONNECTED\fP variables and policy
\fI\%CMP0170\fP are ignored.
.sp
When this form of \fBFetchContent_Populate()\fP returns, the following
variables will be set in the scope of the caller:
.INDENT 7.0
.TP
.B \fB<lowercaseName>_SOURCE_DIR\fP
The location where the populated content can be found upon return.
.TP
.B \fB<lowercaseName>_BINARY_DIR\fP
A directory originally intended for use as a corresponding build directory,
but is unlikely to be relevant when using this form of the command.
.UNINDENT
.sp
If using \fBFetchContent_Populate()\fP within
\fI\%CMake script mode\fP, be aware that the
implementation sets up a sub\-build which therefore requires a CMake
generator and build tool to be available. If these cannot be found by
default, then the \fI\%CMAKE_GENERATOR\fP and potentially the
\fI\%CMAKE_MAKE_PROGRAM\fP variables will need to be set appropriately
on the command line invoking the script.
.sp
Changed in version 3.30: If policy \fI\%CMP0168\fP is set to \fBNEW\fP, no sub\-build is used.
Within \fI\%CMake script mode\fP, that allows
\fBFetchContent_Populate()\fP to be called without any build tool or
CMake generator.

.sp
Added in version 3.18: Added support for the \fBDOWNLOAD_NO_EXTRACT\fP option.

.UNINDENT
.INDENT 0.0
.INDENT 3.5
The command supports another form, although it should no longer be used:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
FetchContent_Populate(<name>)
.EE
.UNINDENT
.UNINDENT
.sp
Changed in version 3.30: This form is deprecated. Policy \fI\%CMP0169\fP provides backward
compatibility for projects that still need to use this form, but projects
should be updated to use \fI\%FetchContent_MakeAvailable()\fP instead.

.sp
In this form, the only argument given to \fBFetchContent_Populate()\fP is the
\fB<name>\fP\&.  When used this way, the command assumes the content details have
been recorded by an earlier call to \fI\%FetchContent_Declare()\fP\&.  The
details are stored in a global property, so they are unaffected by things
like variable or directory scope.  Therefore, it doesn\(aqt matter where in the
project the details were previously declared, as long as they have been
declared before the call to \fBFetchContent_Populate()\fP\&.  Those saved details
are then used to populate the content using a method based on
\fI\%ExternalProject_Add()\fP (see policy \fI\%CMP0168\fP for important
behavioral aspects of how that is done).
.sp
When this form of \fBFetchContent_Populate()\fP returns, the following
variables will be set in the scope of the caller:
.INDENT 0.0
.TP
.B \fB<lowercaseName>_POPULATED\fP
This will always be set to \fBTRUE\fP by the call.
.TP
.B \fB<lowercaseName>_SOURCE_DIR\fP
The location where the populated content can be found upon return.
.TP
.B \fB<lowercaseName>_BINARY_DIR\fP
A directory intended for use as a corresponding build directory.
.UNINDENT
.sp
The values of the three variables can also be retrieved from anywhere in the
project hierarchy using the \fI\%FetchContent_GetProperties()\fP command.
.sp
The implementation ensures that if the content has already been populated
in a previous CMake run, that content will be reused rather than repopulating
again.  For the common case where population involves downloading content,
the cost of the download is only paid once. But note that it is an error to
call \fBFetchContent_Populate(<name>)\fP with the same \fB<name>\fP more than
once within a single CMake run. See \fI\%FetchContent_GetProperties()\fP
for how to determine if population of a \fB<name>\fP has already been
performed in the current run.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B FetchContent_GetProperties
When using saved content details, a call to
\fI\%FetchContent_MakeAvailable()\fP or \fI\%FetchContent_Populate()\fP
records information in global properties which can be queried at any time.
This information may include the source and binary directories associated with
the content, and also whether or not the content population has been processed
during the current configure run.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FetchContent_GetProperties(
  <name>
  [SOURCE_DIR <srcDirVar>]
  [BINARY_DIR <binDirVar>]
  [POPULATED <doneVar>]
)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBSOURCE_DIR\fP, \fBBINARY_DIR\fP, and \fBPOPULATED\fP options can be used to
specify which properties should be retrieved.  Each option accepts a value
which is the name of the variable in which to store that property.  Most of
the time though, only \fB<name>\fP is given, in which case the call will then
set the same variables as a call to
\fI\%FetchContent_MakeAvailable(name)\fP or
\fI\%FetchContent_Populate(name)\fP\&.
Note that the \fBSOURCE_DIR\fP and \fBBINARY_DIR\fP values can be empty if the
call is fulfilled by a \fI\%dependency provider\fP\&.
.sp
This command is rarely needed when using
\fI\%FetchContent_MakeAvailable()\fP\&.  It is more commonly used as part of
implementing the deprecated pattern with \fI\%FetchContent_Populate()\fP,
which ensures that the relevant variables will always be defined regardless
of whether or not the population has been performed elsewhere in the project
already:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
# WARNING: This pattern is deprecated, don\(aqt use it!
#
# Check if population has already been performed
FetchContent_GetProperties(depname)
if(NOT depname_POPULATED)
  # Fetch the content using previously declared details
  FetchContent_Populate(depname)

  # Set custom variables, policies, etc.
  # ...

  # Bring the populated content into the build
  add_subdirectory(${depname_SOURCE_DIR} ${depname_BINARY_DIR})
endif()
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B FetchContent_SetPopulated
Added in version 3.24.

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command should only be called by
\fI\%dependency providers\fP\&.  Calling it in any
other context is unsupported and future CMake versions may halt with a
fatal error in such cases.
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FetchContent_SetPopulated(
  <name>
  [SOURCE_DIR <srcDir>]
  [BINARY_DIR <binDir>]
)
.EE
.UNINDENT
.UNINDENT
.sp
If a provider command fulfills a \fBFETCHCONTENT_MAKEAVAILABLE_SERIAL\fP
request, it must call this function before returning.  The \fBSOURCE_DIR\fP
and \fBBINARY_DIR\fP arguments can be used to specify the values that
\fI\%FetchContent_GetProperties()\fP should return for its corresponding
arguments.  Only provide \fBSOURCE_DIR\fP and \fBBINARY_DIR\fP if they have
the same meaning as if they had been populated by the built\-in
\fI\%FetchContent_MakeAvailable()\fP implementation.
.UNINDENT
.SS Variables
.sp
A number of cache variables can influence the behavior where details from a
\fI\%FetchContent_Declare()\fP call are used to populate content.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
All of these variables are intended for the developer to customize behavior.
They should not normally be set by the project.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B FETCHCONTENT_BASE_DIR
In most cases, the saved details do not specify any options relating to the
directories to use for the internal sub\-build, final source, and build areas.
It is generally best to leave these decisions up to the \fBFetchContent\fP
module to handle on the project\(aqs behalf.  The \fBFETCHCONTENT_BASE_DIR\fP
cache variable controls the point under which all content population
directories are collected, but in most cases, developers would not need to
change this.  The default location is \fB${CMAKE_BINARY_DIR}/_deps\fP, but if
developers change this value, they should aim to keep the path short and
just below the top level of the build tree to avoid running into path
length problems on Windows.
.UNINDENT
.INDENT 0.0
.TP
.B FETCHCONTENT_QUIET
The logging output during population can be quite verbose, making the
configure stage quite noisy.  This cache option (\fBON\fP by default) hides
all population output unless an error is encountered.  If experiencing
problems with hung downloads, temporarily switching this option off may
help diagnose which content population is causing the issue.
.sp
Changed in version 3.30: \fBFETCHCONTENT_QUIET\fP is ignored if policy \fI\%CMP0168\fP is set to
\fBNEW\fP\&.  The output is still quiet by default in that case, but verbosity
is controlled by the message logging level (see
\fI\%CMAKE_MESSAGE_LOG_LEVEL\fP and
\fI\%\-\-log\-level\fP).

.UNINDENT
.INDENT 0.0
.TP
.B FETCHCONTENT_FULLY_DISCONNECTED
When this option is enabled, no attempt is made to download or update
any content.  It is assumed that all content has already been populated in
a previous run, or the source directories have been pointed at existing
contents the developer has provided manually (using options described
further below).  When the developer knows that no changes have been made to
any content details, turning this option \fBON\fP can speed up
the configure stage.  It is \fBOFF\fP by default.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The \fBFETCHCONTENT_FULLY_DISCONNECTED\fP variable is not an appropriate way
to prevent any network access on the first run in a build directory.
Doing so can break projects, lead to misleading error messages, and hide
subtle population failures.  This variable is specifically intended to
only be turned on \fIafter\fP the first time CMake has been run.
If you want to prevent network access even on the first run, use a
\fI\%dependency provider\fP and populate the
dependency from local content instead.
.UNINDENT
.UNINDENT
.sp
Changed in version 3.30: The constraint that the source directory has already been populated when
\fBFETCHCONTENT_FULLY_DISCONNECTED\fP is true is now enforced.
See policy \fI\%CMP0170\fP\&.

.UNINDENT
.INDENT 0.0
.TP
.B FETCHCONTENT_UPDATES_DISCONNECTED
This is a less severe download/update control compared to
\fI\%FETCHCONTENT_FULLY_DISCONNECTED\fP\&.  Instead of bypassing all
download and update logic, \fBFETCHCONTENT_UPDATES_DISCONNECTED\fP only
prevents the update step from making connections to remote servers
when using the git or hg download methods.  Updates still occur if details
about the update step change, but the update is attempted with only the
information already available locally (so switching to a different tag or
commit that is already fetched locally will succeed, but switching to an
unknown commit hash will fail).  The download step is not affected, so if
content has not been downloaded previously, it will still be downloaded
when this option is enabled.  This can speed up the configure step, but
not as much as \fI\%FETCHCONTENT_FULLY_DISCONNECTED\fP\&.
\fBFETCHCONTENT_UPDATES_DISCONNECTED\fP is \fBOFF\fP by default.
.UNINDENT
.INDENT 0.0
.TP
.B FETCHCONTENT_TRY_FIND_PACKAGE_MODE
Added in version 3.24.

.sp
This variable modifies the details that \fI\%FetchContent_Declare()\fP
records for a given dependency.  While it ultimately controls the behavior
of \fI\%FetchContent_MakeAvailable()\fP, it is the variable\(aqs value when
\fI\%FetchContent_Declare()\fP is called that gets used.  It makes no
difference what the variable is set to when
\fI\%FetchContent_MakeAvailable()\fP is called.  Since the variable should
only be set by the user and not by projects directly, it will typically have
the same value throughout anyway, so this distinction is not usually
noticeable.
.sp
\fBFETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP ultimately controls whether
\fI\%FetchContent_MakeAvailable()\fP is allowed to call
\fI\%find_package()\fP to satisfy a dependency.  The variable can be set
to one of the following values:
.INDENT 7.0
.TP
.B \fBOPT_IN\fP
\fI\%FetchContent_MakeAvailable()\fP will only call
\fI\%find_package()\fP if the \fI\%FetchContent_Declare()\fP call
included a \fBFIND_PACKAGE_ARGS\fP keyword.  This is also the default
behavior if \fBFETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP is not set.
.TP
.B \fBALWAYS\fP
\fI\%find_package()\fP can be called by
\fI\%FetchContent_MakeAvailable()\fP regardless of whether the
\fI\%FetchContent_Declare()\fP call included a \fBFIND_PACKAGE_ARGS\fP
keyword or not.  If no \fBFIND_PACKAGE_ARGS\fP keyword was given, the
behavior will be as though \fBFIND_PACKAGE_ARGS\fP had been provided,
with no additional arguments after it.
.TP
.B \fBNEVER\fP
\fI\%FetchContent_MakeAvailable()\fP will not call
\fI\%find_package()\fP\&.  Any \fBFIND_PACKAGE_ARGS\fP given to the
\fI\%FetchContent_Declare()\fP call will be ignored.
.UNINDENT
.sp
As a special case, if the \fI\%FETCHCONTENT_SOURCE_DIR_<uppercaseName>\fP
variable has a non\-empty value for a dependency, it is assumed that the
user is overriding all other methods of making that dependency available.
\fBFETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP will have no effect on that
dependency and \fI\%FetchContent_MakeAvailable()\fP will not try to call
\fI\%find_package()\fP for it.
.UNINDENT
.sp
In addition to the above, the following variables are also defined for each
content name:
.INDENT 0.0
.TP
.B FETCHCONTENT_SOURCE_DIR_<uppercaseName>
If this is set, no download or update steps are performed for the specified
content and the \fB<lowercaseName>_SOURCE_DIR\fP variable returned to the
caller is pointed at this location.  This gives developers a way to have a
separate checkout of the content that they can modify freely without
interference from the build.  The build simply uses that existing source,
but it still defines \fB<lowercaseName>_BINARY_DIR\fP to point inside its own
build area.  Developers are strongly encouraged to use this mechanism rather
than editing the sources populated in the default location, as changes to
sources in the default location can be lost when content population details
are changed by the project.
.UNINDENT
.INDENT 0.0
.TP
.B FETCHCONTENT_UPDATES_DISCONNECTED_<uppercaseName>
This is the per\-content equivalent of
\fI\%FETCHCONTENT_UPDATES_DISCONNECTED\fP\&.  If the global option or
this option is \fBON\fP, then updates for the git and hg methods will not
contact any remote for the named content.  They will only use information
already available locally.  Disabling updates for individual content can
be useful for content whose details rarely change, while still leaving
other frequently changing content with updates enabled.
.UNINDENT
.SS Examples
.SS Typical Case
.sp
This first fairly straightforward example ensures that some popular testing
frameworks are available to the main build:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release\-1.10.0
)
FetchContent_Declare(
  Catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG        605a34765aa5d5ecbf476b4598a862ada971b0cc # v3.0.1
)

# After the following call, the CMake targets defined by googletest and
# Catch2 will be available to the rest of the build
FetchContent_MakeAvailable(googletest Catch2)
.EE
.UNINDENT
.UNINDENT
.SS Integrating With find_package()
.sp
For the previous example, if the user wanted to try to find \fBgoogletest\fP
and \fBCatch2\fP via \fI\%find_package()\fP first before trying to download
and build them from source, they could set the
\fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP variable to \fBALWAYS\fP\&.
This would also affect any other calls to \fI\%FetchContent_Declare()\fP
throughout the project, which might not be acceptable.  The behavior can be
enabled for just these two dependencies instead by adding \fBFIND_PACKAGE_ARGS\fP
to the declared details and leaving
\fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP unset, or set to \fBOPT_IN\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release\-1.10.0
  FIND_PACKAGE_ARGS NAMES GTest
)
FetchContent_Declare(
  Catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG        605a34765aa5d5ecbf476b4598a862ada971b0cc # v3.0.1
  FIND_PACKAGE_ARGS
)

# This will try calling find_package() first for both dependencies
FetchContent_MakeAvailable(googletest Catch2)
.EE
.UNINDENT
.UNINDENT
.sp
For \fBCatch2\fP, no additional arguments to \fI\%find_package()\fP are needed,
so no additional arguments are provided after the \fBFIND_PACKAGE_ARGS\fP
keyword.  For \fBgoogletest\fP, its package is more commonly called \fBGTest\fP,
so arguments are added to support it being found by that name.
.sp
If the user wanted to disable \fI\%FetchContent_MakeAvailable()\fP from
calling \fI\%find_package()\fP for any dependency, even if it provided
\fBFIND_PACKAGE_ARGS\fP in its declared details, they could set
\fI\%FETCHCONTENT_TRY_FIND_PACKAGE_MODE\fP to \fBNEVER\fP\&.
.sp
If the project wanted to indicate that these two dependencies should be
downloaded and built from source and that \fI\%find_package()\fP calls
should be redirected to use the built dependencies, the
\fBOVERRIDE_FIND_PACKAGE\fP option should be used when declaring the content
details:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release\-1.10.0
  OVERRIDE_FIND_PACKAGE
)
FetchContent_Declare(
  Catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG        605a34765aa5d5ecbf476b4598a862ada971b0cc # v3.0.1
  OVERRIDE_FIND_PACKAGE
)

# The following will automatically forward through to FetchContent_MakeAvailable()
find_package(googletest)
find_package(Catch2)
.EE
.UNINDENT
.UNINDENT
.sp
CMake provides a FindGTest module which defines some variables that older
projects may use instead of linking to the imported targets.  To support
those cases, we can provide an extra file.  In keeping with the
\(dqfirst to define, wins\(dq philosophy of \fBFetchContent\fP, we only write out
that file if something else hasn\(aqt already done so.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
FetchContent_MakeAvailable(googletest)

if(NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/googletest\-extra.cmake AND
   NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/googletestExtra.cmake)
  file(WRITE ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/googletest\-extra.cmake
[=[
if(\(dq${GTEST_LIBRARIES}\(dq STREQUAL \(dq\(dq AND TARGET GTest::gtest)
  set(GTEST_LIBRARIES GTest::gtest)
endif()
if(\(dq${GTEST_MAIN_LIBRARIES}\(dq STREQUAL \(dq\(dq AND TARGET GTest::gtest_main)
  set(GTEST_MAIN_LIBRARIES GTest::gtest_main)
endif()
if(\(dq${GTEST_BOTH_LIBRARIES}\(dq STREQUAL \(dq\(dq)
  set(GTEST_BOTH_LIBRARIES ${GTEST_LIBRARIES} ${GTEST_MAIN_LIBRARIES})
endif()
]=])
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Projects will also likely be using \fBfind_package(GTest)\fP rather than
\fBfind_package(googletest)\fP, but it is possible to make use of the
\fI\%CMAKE_FIND_PACKAGE_REDIRECTS_DIR\fP area to pull in the latter as
a dependency of the former.  This is likely to be sufficient to satisfy
a typical \fBfind_package(GTest)\fP call.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
FetchContent_MakeAvailable(googletest)

if(NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest\-config.cmake AND
   NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/GTestConfig.cmake)
  file(WRITE ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest\-config.cmake
[=[
include(CMakeFindDependencyMacro)
find_dependency(googletest)
]=])
endif()

if(NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest\-config\-version.cmake AND
   NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/GTestConfigVersion.cmake)
  file(WRITE ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest\-config\-version.cmake
[=[
include(${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/googletest\-config\-version.cmake OPTIONAL)
if(NOT PACKAGE_VERSION_COMPATIBLE)
  include(${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/googletestConfigVersion.cmake OPTIONAL)
endif()
]=])
endif()
.EE
.UNINDENT
.UNINDENT
.SS Overriding Where To Find CMakeLists.txt
.sp
If the sub\-project\(aqs \fBCMakeLists.txt\fP file is not at the top level of its
source tree, the \fBSOURCE_SUBDIR\fP option can be used to tell \fBFetchContent\fP
where to find it.  The following example shows how to use that option, and
it also sets a variable which is meaningful to the subproject before pulling
it into the main build (set as an \fBINTERNAL\fP cache variable to avoid
problems with policy \fI\%CMP0077\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  protobuf
  GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git
  GIT_TAG        ae50d9b9902526efd6c7a1907d09739f959c6297 # v3.15.0
  SOURCE_SUBDIR  cmake
)
set(protobuf_BUILD_TESTS OFF CACHE INTERNAL \(dq\(dq)
FetchContent_MakeAvailable(protobuf)
.EE
.UNINDENT
.UNINDENT
.SS Complex Dependency Hierarchies
.sp
In more complex project hierarchies, the dependency relationships can be more
complicated.  Consider a hierarchy where \fBprojA\fP is the top level project and
it depends directly on projects \fBprojB\fP and \fBprojC\fP\&.  Both \fBprojB\fP and
\fBprojC\fP can be built standalone and they also both depend on another project
\fBprojD\fP\&.  \fBprojB\fP additionally depends on \fBprojE\fP\&.  This example assumes
that all five projects are available on a company git server.  The
\fBCMakeLists.txt\fP of each project might have sections like the following:
.sp
\fIprojA\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  projB
  GIT_REPOSITORY git@mycompany.com:git/projB.git
  GIT_TAG        4a89dc7e24ff212a7b5167bef7ab079d
)
FetchContent_Declare(
  projC
  GIT_REPOSITORY git@mycompany.com:git/projC.git
  GIT_TAG        4ad4016bd1d8d5412d135cf8ceea1bb9
)
FetchContent_Declare(
  projD
  GIT_REPOSITORY git@mycompany.com:git/projD.git
  GIT_TAG        origin/integrationBranch
)
FetchContent_Declare(
  projE
  GIT_REPOSITORY git@mycompany.com:git/projE.git
  GIT_TAG        v2.3\-rc1
)

# Order is important, see notes in the discussion further below
FetchContent_MakeAvailable(projD projB projC)
.EE
.UNINDENT
.UNINDENT
.sp
\fIprojB\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  projD
  GIT_REPOSITORY git@mycompany.com:git/projD.git
  GIT_TAG        20b415f9034bbd2a2e8216e9a5c9e632
)
FetchContent_Declare(
  projE
  GIT_REPOSITORY git@mycompany.com:git/projE.git
  GIT_TAG        68e20f674a48be38d60e129f600faf7d
)

FetchContent_MakeAvailable(projD projE)
.EE
.UNINDENT
.UNINDENT
.sp
\fIprojC\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FetchContent)
FetchContent_Declare(
  projD
  GIT_REPOSITORY git@mycompany.com:git/projD.git
  GIT_TAG        7d9a17ad2c962aa13e2fbb8043fb6b8a
)

FetchContent_MakeAvailable(projD)
.EE
.UNINDENT
.UNINDENT
.sp
A few key points should be noted in the above:
.INDENT 0.0
.IP \(bu 2
\fBprojB\fP and \fBprojC\fP define different content details for \fBprojD\fP,
but \fBprojA\fP also defines a set of content details for \fBprojD\fP\&.
Because \fBprojA\fP will define them first, the details from \fBprojB\fP and
\fBprojC\fP will not be used.  The override details defined by \fBprojA\fP
are not required to match either of those from \fBprojB\fP or \fBprojC\fP, but
it is up to the higher level project to ensure that the details it does
define still make sense for the child projects.
.IP \(bu 2
In the \fBprojA\fP call to \fI\%FetchContent_MakeAvailable()\fP, \fBprojD\fP
is listed ahead of \fBprojB\fP and \fBprojC\fP, so it will be populated before
either \fBprojB\fP or \fBprojC\fP\&. It isn\(aqt required for \fBprojA\fP to do this,
doing so ensures that \fBprojA\fP fully controls the environment in which
\fBprojD\fP is brought into the build (directory properties are particularly
relevant).
.IP \(bu 2
While \fBprojA\fP defines content details for \fBprojE\fP, it does not need
to explicitly call \fBFetchContent_MakeAvailable(projE)\fP or
\fBFetchContent_Populate(projD)\fP itself.  Instead, it leaves that to the
child \fBprojB\fP\&.  For higher level projects, it is often enough to just
define the override content details and leave the actual population to the
child projects.  This saves repeating the same thing at each level of the
project hierarchy unnecessarily, but it should only be done if directory
properties set by dependencies are not expected to influence the population
of the shared dependency (\fBprojE\fP in this case).
.UNINDENT
.SS Populating Content Without Adding It To The Build
.sp
Projects don\(aqt always need to add the populated content to the build.
Sometimes the project just wants to make the downloaded content available at
a predictable location.  The next example ensures that a set of standard
company toolchain files (and potentially even the toolchain binaries
themselves) is available early enough to be used for that same build.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake_minimum_required(VERSION 3.14)

include(FetchContent)
FetchContent_Declare(
  mycom_toolchains
  URL  https://intranet.mycompany.com//toolchains_1.3.2.tar.gz
)
FetchContent_MakeAvailable(mycom_toolchains)

project(CrossCompileExample)
.EE
.UNINDENT
.UNINDENT
.sp
The project could be configured to use one of the downloaded toolchains like
so:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake \-DCMAKE_TOOLCHAIN_FILE=_deps/mycom_toolchains\-src/toolchain_arm.cmake /path/to/src
.EE
.UNINDENT
.UNINDENT
.sp
When CMake processes the \fBCMakeLists.txt\fP file, it will download and unpack
the tarball into \fB_deps/mycompany_toolchains\-src\fP relative to the build
directory.  The \fI\%CMAKE_TOOLCHAIN_FILE\fP variable is not used until
the \fI\%project()\fP command is reached, at which point CMake looks for the
named toolchain file relative to the build directory.  Because the tarball has
already been downloaded and unpacked by then, the toolchain file will be in
place, even the very first time that \fBcmake\fP is run in the build directory.
.SS Populating Content In CMake Script Mode
.sp
This last example demonstrates how one might download and unpack a
firmware tarball using CMake\(aqs \fI\%script mode\fP\&.
The call to \fI\%FetchContent_Populate()\fP specifies all the content details
and the unpacked firmware will be placed in a \fBfirmware\fP directory below the
current working directory.
.sp
\fBgetFirmware.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# NOTE: Intended to be run in script mode with cmake \-P
include(FetchContent)
FetchContent_Populate(
  firmware
  URL        https://mycompany.com/assets/firmware\-1.23\-arm.tar.gz
  URL_HASH   MD5=68247684da89b608d466253762b0ff11
  SOURCE_DIR firmware
)
.EE
.UNINDENT
.UNINDENT
.SS FindPackageHandleStandardArgs
.sp
This module provides functions intended to be used in \fI\%Find Modules\fP
implementing \fI\%find_package(<PackageName>)\fP calls.
.INDENT 0.0
.TP
.B find_package_handle_standard_args
This command handles the \fBREQUIRED\fP, \fBQUIET\fP and version\-related
arguments of \fI\%find_package()\fP\&.  It also sets the
\fB<PackageName>_FOUND\fP variable.  The package is considered found if all
variables listed contain valid results, e.g. valid filepaths.
.sp
There are two signatures:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package_handle_standard_args(<PackageName>
  (DEFAULT_MSG|<custom\-failure\-message>)
  <required\-var>...
  )

find_package_handle_standard_args(<PackageName>
  [FOUND_VAR <result\-var>]
  [REQUIRED_VARS <required\-var>...]
  [VERSION_VAR <version\-var>]
  [HANDLE_VERSION_RANGE]
  [HANDLE_COMPONENTS]
  [CONFIG_MODE]
  [NAME_MISMATCHED]
  [REASON_FAILURE_MESSAGE <reason\-failure\-message>]
  [FAIL_MESSAGE <custom\-failure\-message>]
  )
.EE
.UNINDENT
.UNINDENT
.sp
The \fB<PackageName>_FOUND\fP variable will be set to \fBTRUE\fP if all
the variables \fB<required\-var>...\fP are valid and any optional
constraints are satisfied, and \fBFALSE\fP otherwise.  A success or
failure message may be displayed based on the results and on
whether the \fBREQUIRED\fP and/or \fBQUIET\fP option was given to
the \fI\%find_package()\fP call.
.sp
The options are:
.INDENT 7.0
.TP
.B \fB(DEFAULT_MSG|<custom\-failure\-message>)\fP
In the simple signature this specifies the failure message.
Use \fBDEFAULT_MSG\fP to ask for a default message to be computed
(recommended).  Not valid in the full signature.
.TP
.B \fBFOUND_VAR <result\-var>\fP
Deprecated since version 3.3.

.sp
Specifies either \fB<PackageName>_FOUND\fP or
\fB<PACKAGENAME>_FOUND\fP as the result variable.  This exists only
for compatibility with older versions of CMake and is now ignored.
Result variables of both names are now always set for compatibility
also with or without this option.
.TP
.B \fBREQUIRED_VARS <required\-var>...\fP
Specify the variables which are required for this package.
These may be named in the generated failure message asking the
user to set the missing variable values.  Therefore these should
typically be cache entries such as \fBFOO_LIBRARY\fP and not output
variables like \fBFOO_LIBRARIES\fP\&.
.sp
Changed in version 3.18: If \fBHANDLE_COMPONENTS\fP is specified, this option can be omitted.

.TP
.B \fBVERSION_VAR <version\-var>\fP
Specify the name of a variable that holds the version of the package
that has been found.  This version will be checked against the
(potentially) specified required version given to the
\fI\%find_package()\fP call, including its \fBEXACT\fP option.
The default messages include information about the required
version and the version which has been actually found, both
if the version is ok or not.
.TP
.B \fBHANDLE_VERSION_RANGE\fP
Added in version 3.19.

.sp
Enable handling of a version range, if one is specified. Without this
option, a developer warning will be displayed if a version range is
specified.
.TP
.B \fBHANDLE_COMPONENTS\fP
Enable handling of package components.  In this case, the command
will report which components have been found and which are missing,
and the \fB<PackageName>_FOUND\fP variable will be set to \fBFALSE\fP
if any of the required components (i.e. not the ones listed after
the \fBOPTIONAL_COMPONENTS\fP option of \fI\%find_package()\fP) are
missing.
.TP
.B \fBCONFIG_MODE\fP
Specify that the calling find module is a wrapper around a
call to \fBfind_package(<PackageName> NO_MODULE)\fP\&.  This implies
a \fBVERSION_VAR\fP value of \fB<PackageName>_VERSION\fP\&.  The command
will automatically check whether the package configuration file
was found.
.TP
.B \fBREASON_FAILURE_MESSAGE <reason\-failure\-message>\fP
Added in version 3.16.

.sp
Specify a custom message of the reason for the failure which will be
appended to the default generated message.
.TP
.B \fBFAIL_MESSAGE <custom\-failure\-message>\fP
Specify a custom failure message instead of using the default
generated message.  Not recommended.
.TP
.B \fBNAME_MISMATCHED\fP
Added in version 3.17.

.sp
Indicate that the \fB<PackageName>\fP does not match
\fB${CMAKE_FIND_PACKAGE_NAME}\fP\&. This is usually a mistake and raises a
warning, but it may be intentional for usage of the command for components
of a larger package.
.UNINDENT
.UNINDENT
.sp
Example for the simple signature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package_handle_standard_args(LibXml2 DEFAULT_MSG
  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBLibXml2\fP package is considered to be found if both
\fBLIBXML2_LIBRARY\fP and \fBLIBXML2_INCLUDE_DIR\fP are valid.
Then also \fBLibXml2_FOUND\fP is set to \fBTRUE\fP\&.  If it is not found
and \fBREQUIRED\fP was used, it fails with a
\fI\%message(FATAL_ERROR)\fP, independent whether \fBQUIET\fP was
used or not.  If it is found, success will be reported, including
the content of the first \fB<required\-var>\fP\&.  On repeated CMake runs,
the same message will not be printed again.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If \fB<PackageName>\fP does not match \fBCMAKE_FIND_PACKAGE_NAME\fP for the
calling module, a warning that there is a mismatch is given. The
\fBFPHSA_NAME_MISMATCHED\fP variable may be set to bypass the warning if using
the old signature and the \fBNAME_MISMATCHED\fP argument using the new
signature. To avoid forcing the caller to require newer versions of CMake for
usage, the variable\(aqs value will be used if defined when the
\fBNAME_MISMATCHED\fP argument is not passed for the new signature (but using
both is an error)..
.UNINDENT
.UNINDENT
.sp
Example for the full signature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package_handle_standard_args(LibArchive
  REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR
  VERSION_VAR LibArchive_VERSION)
.EE
.UNINDENT
.UNINDENT
.sp
In this case, the \fBLibArchive\fP package is considered to be found if
both \fBLibArchive_LIBRARY\fP and \fBLibArchive_INCLUDE_DIR\fP are valid.
Also the version of \fBLibArchive\fP will be checked by using the version
contained in \fBLibArchive_VERSION\fP\&.  Since no \fBFAIL_MESSAGE\fP is given,
the default messages will be printed.
.sp
Another example for the full signature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)
find_package_handle_standard_args(Automoc4  CONFIG_MODE)
.EE
.UNINDENT
.UNINDENT
.sp
In this case, a \fBFindAutmoc4.cmake\fP module wraps a call to
\fBfind_package(Automoc4 NO_MODULE)\fP and adds an additional search
directory for \fBautomoc4\fP\&.  Then the call to
\fBfind_package_handle_standard_args\fP produces a proper success/failure
message.
.INDENT 0.0
.TP
.B find_package_check_version
Added in version 3.19.

.sp
Helper function which can be used to check if a \fB<version>\fP is valid
against version\-related arguments of \fI\%find_package()\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package_check_version(<version> <result\-var>
  [HANDLE_VERSION_RANGE]
  [RESULT_MESSAGE_VARIABLE <message\-var>]
  )
.EE
.UNINDENT
.UNINDENT
.sp
The \fB<result\-var>\fP will hold a boolean value giving the result of the check.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBHANDLE_VERSION_RANGE\fP
Enable handling of a version range, if one is specified. Without this
option, a developer warning will be displayed if a version range is
specified.
.TP
.B \fBRESULT_MESSAGE_VARIABLE <message\-var>\fP
Specify a variable to get back a message describing the result of the check.
.UNINDENT
.UNINDENT
.sp
Example for the usage:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package_check_version(1.2.3 result HANDLE_VERSION_RANGE
  RESULT_MESSAGE_VARIABLE reason)
if(result)
  message(STATUS \(dq${reason}\(dq)
else()
  message(FATAL_ERROR \(dq${reason}\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindPackageMessage
.sp
This module provides a command for printing find result messages and is
intended for use in \fI\%Find Modules\fP\&.
.sp
Load it in a CMake find module with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FindPackageMessage)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B find_package_message
Prints a message once for each unique find result to inform the user which
package was found and where:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package_message(<PackageName> <message> <details>)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<PackageName>\fP
The name of the package (for example, as used in the
\fBFind<PackageName>.cmake\fP module filename).
.TP
.B \fB<message>\fP
The message string to display.
.TP
.B \fB<details>\fP
A unique identifier for tracking message display.  The \fB<message>\fP is
printed only once per distinct \fB<details>\fP value.  If \fB<details>\fP string
changes in a subsequent configuration phase, the message will be displayed
again.
.UNINDENT
.sp
If \fI\%find_package()\fP was called with the \fBQUIET\fP option, the
\fB<message>\fP is not printed.
.UNINDENT
.SS Examples
.sp
Printing a result message in a custom find module:
.sp
\fBFindFoo.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_library(Foo_LIBRARY foo)
find_path(Foo_INCLUDE_DIR foo.h)

include(FindPackageMessage)

if(Foo_LIBRARY AND Foo_INCLUDE_DIR)
  find_package_message(
    Foo
    \(dqFound Foo: ${Foo_LIBRARY}\(dq
    \(dq[${Foo_LIBRARY}][${Foo_INCLUDE_DIR}]\(dq
  )
else()
  message(STATUS \(dqCould NOT find Foo\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
When writing standard find modules, use the
\fI\%FindPackageHandleStandardArgs\fP module and its
\fI\%find_package_handle_standard_args()\fP command which automatically
prints the find result message based on whether the package was found:
.sp
\fBFindFoo.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# ...

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(
  Foo
  REQUIRED_VARS Foo_LIBRARY Foo_INCLUDE_DIR
)
.EE
.UNINDENT
.UNINDENT
.SS FortranCInterface
.sp
Fortran/C Interface Detection
.sp
This module automatically detects the API by which C and Fortran
languages interact.
.SS Module Variables
.sp
Variables that indicate if the mangling is found:
.INDENT 0.0
.TP
.B \fBFortranCInterface_GLOBAL_FOUND\fP
Global subroutines and functions.
.TP
.B \fBFortranCInterface_MODULE_FOUND\fP
Module subroutines and functions (declared by \(dqMODULE PROCEDURE\(dq).
.UNINDENT
.sp
This module also provides the following variables to specify
the detected mangling, though a typical use case does not need
to reference them and can use the \fI\%Module Functions\fP below.
.INDENT 0.0
.TP
.B \fBFortranCInterface_GLOBAL_PREFIX\fP
Prefix for a global symbol without an underscore.
.TP
.B \fBFortranCInterface_GLOBAL_SUFFIX\fP
Suffix for a global symbol without an underscore.
.TP
.B \fBFortranCInterface_GLOBAL_CASE\fP
The case for a global symbol without an underscore,
either \fBUPPER\fP or \fBLOWER\fP\&.
.TP
.B \fBFortranCInterface_GLOBAL__PREFIX\fP
Prefix for a global symbol with an underscore.
.TP
.B \fBFortranCInterface_GLOBAL__SUFFIX\fP
Suffix for a global symbol with an underscore.
.TP
.B \fBFortranCInterface_GLOBAL__CASE\fP
The case for a global symbol with an underscore,
either \fBUPPER\fP or \fBLOWER\fP\&.
.TP
.B \fBFortranCInterface_MODULE_PREFIX\fP
Prefix for a module symbol without an underscore.
.TP
.B \fBFortranCInterface_MODULE_MIDDLE\fP
Middle of a module symbol without an underscore that appears
between the name of the module and the name of the symbol.
.TP
.B \fBFortranCInterface_MODULE_SUFFIX\fP
Suffix for a module symbol without an underscore.
.TP
.B \fBFortranCInterface_MODULE_CASE\fP
The case for a module symbol without an underscore,
either \fBUPPER\fP or \fBLOWER\fP\&.
.TP
.B \fBFortranCInterface_MODULE_ORDER\fP
Added in version 4.1.

.sp
Order of components for module symbols without an underscore:
.INDENT 7.0
.TP
.B \fBMODULE_THEN_SYMBOL\fP
The module name appears \fIbefore\fP the symbol name, i.e.,
\fB<PREFIX><module><MIDDLE><symbol><SUFFIX>\fP\&.
.TP
.B \fBSYMBOL_THEN_MODULE\fP
The module name appears \fIafter\fP the symbol name, i.e.,
\fB<PREFIX><symbol><MIDDLE><module><SUFFIX>\fP\&.
.UNINDENT
.TP
.B \fBFortranCInterface_MODULE__PREFIX\fP
Prefix for a module symbol with an underscore.
.TP
.B \fBFortranCInterface_MODULE__MIDDLE\fP
Middle of a module symbol with an underscore that appears
between the name of the module and the name of the symbol.
.TP
.B \fBFortranCInterface_MODULE__SUFFIX\fP
Suffix for a module symbol with an underscore.
.TP
.B \fBFortranCInterface_MODULE__CASE\fP
The case for a module symbol with an underscore,
either \fBUPPER\fP or \fBLOWER\fP\&.
.TP
.B \fBFortranCInterface_MODULE__ORDER\fP
Added in version 4.1.

.sp
Order of components for module symbols with an underscore:
.INDENT 7.0
.TP
.B \fBMODULE_THEN_SYMBOL\fP
The module name appears \fIbefore\fP the symbol name, i.e.,
\fB<PREFIX><module><MIDDLE><symbol><SUFFIX>\fP\&.
.TP
.B \fBSYMBOL_THEN_MODULE\fP
The module name appears \fIafter\fP the symbol name, i.e.,
\fB<PREFIX><symbol><MIDDLE><module><SUFFIX>\fP\&.
.UNINDENT
.UNINDENT
.SS Module Functions
.INDENT 0.0
.TP
.B FortranCInterface_HEADER
The \fBFortranCInterface_HEADER\fP function is provided to generate a
C header file containing macros to mangle symbol names:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FortranCInterface_HEADER(<file>
                         [MACRO_NAMESPACE <macro\-ns>]
                         [SYMBOL_NAMESPACE <ns>]
                         [SYMBOLS [<module>:]<function> ...])
.EE
.UNINDENT
.UNINDENT
.sp
It generates in \fB<file>\fP definitions of the following macros:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
#define FortranCInterface_GLOBAL (name,NAME) ...
#define FortranCInterface_GLOBAL_(name,NAME) ...
#define FortranCInterface_MODULE (mod,name, MOD,NAME) ...
#define FortranCInterface_MODULE_(mod,name, MOD,NAME) ...
.EE
.UNINDENT
.UNINDENT
.sp
These macros mangle four categories of Fortran symbols, respectively:
.INDENT 7.0
.IP \(bu 2
Global symbols without \(aq_\(aq: \fBcall mysub()\fP
.IP \(bu 2
Global symbols with \(aq_\(aq   : \fBcall my_sub()\fP
.IP \(bu 2
Module symbols without \(aq_\(aq: \fBuse mymod; call mysub()\fP
.IP \(bu 2
Module symbols with \(aq_\(aq   : \fBuse mymod; call my_sub()\fP
.UNINDENT
.sp
If mangling for a category is not known, its macro is left undefined.
All macros require raw names in both lower case and upper case.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBMACRO_NAMESPACE\fP
Replace the default \fBFortranCInterface_\fP prefix with a given
namespace \fB<macro\-ns>\fP\&.
.TP
.B \fBSYMBOLS\fP
List symbols to mangle automatically with C preprocessor definitions:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
<function>          ==> #define <ns><function> ...
<module>:<function> ==> #define <ns><module>_<function> ...
.EE
.UNINDENT
.UNINDENT
.sp
If the mangling for some symbol is not known then no preprocessor
definition is created, and a warning is displayed.
.TP
.B \fBSYMBOL_NAMESPACE\fP
Prefix all preprocessor definitions generated by the \fBSYMBOLS\fP
option with a given namespace \fB<ns>\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B FortranCInterface_VERIFY
The \fBFortranCInterface_VERIFY\fP function is provided to verify
that the Fortran and C/C++ compilers work together:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
FortranCInterface_VERIFY([CXX] [QUIET])
.EE
.UNINDENT
.UNINDENT
.sp
It tests whether a simple test executable using Fortran and C (and C++
when the CXX option is given) compiles and links successfully.  The
result is stored in the cache entry \fBFortranCInterface_VERIFIED_C\fP
(or \fBFortranCInterface_VERIFIED_CXX\fP if \fBCXX\fP is given) as a boolean.
If the check fails and \fBQUIET\fP is not given the function terminates with a
fatal error message describing the problem.  The purpose of this check
is to stop a build early for incompatible compiler combinations.  The
test is built in the \fBRelease\fP configuration.
.UNINDENT
.SS Example Usage
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FortranCInterface)
FortranCInterface_HEADER(FC.h MACRO_NAMESPACE \(dqFC_\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
This creates a \(dqFC.h\(dq header that defines mangling macros \fBFC_GLOBAL()\fP,
\fBFC_GLOBAL_()\fP, \fBFC_MODULE()\fP, and \fBFC_MODULE_()\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(FortranCInterface)
FortranCInterface_HEADER(FCMangle.h
                         MACRO_NAMESPACE \(dqFC_\(dq
                         SYMBOL_NAMESPACE \(dqFC_\(dq
                         SYMBOLS mysub mymod:my_sub)
.EE
.UNINDENT
.UNINDENT
.sp
This creates a \(dqFCMangle.h\(dq header that defines the same \fBFC_*()\fP
mangling macros as the previous example plus preprocessor symbols
\fBFC_mysub\fP and \fBFC_mymod_my_sub\fP\&.
.SS Additional Manglings
.sp
FortranCInterface is aware of possible \fBGLOBAL\fP and \fBMODULE\fP manglings
for many Fortran compilers, but it also provides an interface to specify
new possible manglings.  Set the variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
FortranCInterface_GLOBAL_SYMBOLS
FortranCInterface_MODULE_SYMBOLS
.EE
.UNINDENT
.UNINDENT
.sp
before including FortranCInterface to specify manglings of the symbols
\fBMySub\fP, \fBMy_Sub\fP, \fBMyModule:MySub\fP, and \fBMy_Module:My_Sub\fP\&.
For example, the code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(FortranCInterface_GLOBAL_SYMBOLS mysub_ my_sub__ MYSUB_)
  #                                  ^^^^^  ^^^^^^   ^^^^^
set(FortranCInterface_MODULE_SYMBOLS
    __mymodule_MOD_mysub __my_module_MOD_my_sub)
  #   ^^^^^^^^     ^^^^^   ^^^^^^^^^     ^^^^^^
include(FortranCInterface)
.EE
.UNINDENT
.UNINDENT
.sp
tells FortranCInterface to try given \fBGLOBAL\fP and \fBMODULE\fP manglings.
(The carets point at raw symbol names for clarity in this example but
are not needed.)
.SS GenerateExportHeader
.sp
This module provides commands for generating a header file containing
preprocessor macro definitions to control C/C++ symbol visibility.
.sp
Load this module in CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(GenerateExportHeader)
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.12: Support for C projects.  Previous versions supported C++ projects only.

.sp
When developing C or C++ projects, especially for cross\-platform use, symbol
visibility determines which functions, classes, global variables, templates,
and other symbols are made visible to users of the library.
.sp
For example, on Windows, symbols must be explicitly marked with
\fB__declspec(dllexport)\fP when building a shared library, and
\fB__declspec(dllimport)\fP when using it.  Other platforms may use attributes
like \fB__attribute__((visibility(\(dqdefault\(dq)))\fP\&.
.sp
This module simplifies the creation and usage of preprocessor macros to
manage these requirements, avoiding repetitive and error\-prone \fB#ifdef\fP
blocks in source code.
.sp
Some symbol visibility can also be controlled with compiler options. In
CMake, target properties such as \fI\%<LANG>_VISIBILITY_PRESET\fP and
\fI\%VISIBILITY_INLINES_HIDDEN\fP enable compiler visibility flags,
where appropriate.  See also related convenience variables
\fI\%CMAKE_<LANG>_VISIBILITY_PRESET\fP and
\fI\%CMAKE_VISIBILITY_INLINES_HIDDEN\fP to enable it for all targets in
current scope.  These are commonly used in combination with this module to
further simplify C/C++ code, removing the need for some of the preprocessor
macros in the source code.
.SS Commands
.sp
This module provides the following commands:
.SS Generating Export Header
.INDENT 0.0
.TP
.B generate_export_header
Generates a header file suitable for inclusion in source code, containing
preprocessor \fIexport\fP macros for controlling the visibility of symbols:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
generate_export_header(
  <target>
  [BASE_NAME <base\-name>]
  [EXPORT_FILE_NAME <export\-file\-name>]
  [EXPORT_MACRO_NAME <export\-macro\-name>]
  [NO_EXPORT_MACRO_NAME <no\-export\-macro\-name>]
  [DEPRECATED_MACRO_NAME <deprecated\-macro\-name>]
  [DEFINE_NO_DEPRECATED]
  [NO_DEPRECATED_MACRO_NAME <no\-deprecated\-macro\-name>]
  [STATIC_DEFINE <static\-define>]
  [PREFIX_NAME <prefix>]
  [CUSTOM_CONTENT_FROM_VARIABLE <variable>]
  [INCLUDE_GUARD_NAME <include\-guard\-name>]
)
.EE
.UNINDENT
.UNINDENT
.sp
By default, this command generates a header file named
\fB<target\-name\-lowercase>_export.h\fP in the current binary directory
(\fI\%CMAKE_CURRENT_BINARY_DIR\fP).  This header defines a set of
preprocessor macros used to mark API symbols as exported, hidden, or
deprecated across different platforms and build types (e.g., static or
shared builds), and is intended to be installed along with the library\(aqs
public headers, because it affects public API declarations:
.INDENT 7.0
.IP \(bu 2
\fB<MACRO>_EXPORT\fP: Marks symbols for export or import, making them
visible as part of the public API when building or consuming a shared
library.
.IP \(bu 2
\fB<MACRO>_NO_EXPORT\fP: Marks symbols that should not be exported.
If the \fI\%<LANG>_VISIBILITY_PRESET\fP target property is set to
\fBhidden\fP, using this macro in source code is typically redundant.
.IP \(bu 2
\fB<MACRO>_DEPRECATED\fP: Marks symbols as deprecated.  When such symbols
are used, the compiler emits a warning at compile\-time.
.IP \(bu 2
\fB<MACRO>_DEPRECATED_EXPORT\fP: Combines export/import and deprecation
markers for a symbol that is both part of the public API and deprecated.
.IP \(bu 2
\fB<MACRO>_DEPRECATED_NO_EXPORT\fP: Marks a deprecated symbol that should
not be exported (internal and deprecated).
.IP \(bu 2
\fB<MACRO>_NO_DEPRECATED\fP: A macro that can be used in source code to
conditionally exclude deprecated code parts from the build via
preprocessor logic.
.UNINDENT
.sp
The \fB<MACRO>\fP part is derived by default from the uppercase name of the
target or the explicitly provided \fB<base\-name>\fP\&.  All macro names can be
customized using the optional arguments.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<target>\fP
Name of a target for which the export header will be generated.
Supported target types:
.INDENT 7.0
.IP \(bu 2
\fBSTATIC\fP library (in this case, export\-related macros are defined
without values)
.IP \(bu 2
\fBSHARED\fP library
.IP \(bu 2
\fBMODULE\fP library
.IP \(bu 2
Added in version 3.1: \fBOBJECT\fP library

.UNINDENT
.TP
.B \fBBASE_NAME <base\-name>\fP
If specified, it overrides the default file name and macro names.
.TP
.B \fBEXPORT_FILE_NAME <export\-file\-name>\fP
If specified, it overrides the full path and the name of the generated
export header file (\fB<base\-name\-lowercase>_export.h\fP) to
\fB<export\-file\-name>\fP\&.  If given as a relative path, it will be
interpreted relative to the current binary directory
(\fI\%CMAKE_CURRENT_BINARY_DIR\fP).
.TP
.B \fBEXPORT_MACRO_NAME <export\-macro\-name>\fP
If specified, it overrides the default macro name for the export
directive.
.TP
.B \fBNO_EXPORT_MACRO_NAME <no\-export\-macro\-name>\fP
If specified, the \fB<no\-export\-macro\-name>\fP will be used for the macro
name that designates the attribute for items that shouldn\(aqt be exported.
.TP
.B \fBDEPRECATED_MACRO_NAME <deprecated\-macro\-name>\fP
If specified, the following names will be used:
.INDENT 7.0
.IP \(bu 2
\fB<deprecated\-macro\-name>\fP (macro for marking deprecated symbols)
.IP \(bu 2
\fB<deprecated\-macro\-name>_EXPORT\fP (macro for deprecated symbols with
export markers)
.IP \(bu 2
\fB<deprecated\-macro\-name>_NO_EXPORT\fP (macro for deprecated symbols
with no\-export markers)
.UNINDENT
.sp
instead of the default names in format of
\fB<MACRO>_DEPRECATED{,_EXPORT,_NO_EXPORT}\fP\&.
.TP
.B \fBDEFINE_NO_DEPRECATED\fP
If specified, this will define a macro named \fB<MACRO>_NO_DEPRECATED\fP\&.
.TP
.B \fBNO_DEPRECATED_MACRO_NAME <no\-deprecated\-macro\-name>\fP
Used in combination with \fBDEFINE_NO_DEPRECATED\fP option.  If specified,
then a macro named \fB<no\-deprecated\-macro\-name>\fP is used instead of the
default \fB<MACRO>_NO_DEPRECATED\fP\&.
.TP
.B \fBSTATIC_DEFINE <static\-define>\fP
If specified, the \fB<static\-define>\fP macro name will be used instead
of the default \fB<MACRO>_STATIC_DEFINE\fP\&.  This macro controls the
symbol export behavior in the generated header for static libraries.
It is typically used when building both shared and static variants of a
library from the same sources using a single generated export header.
When this macro is defined for static library, the export\-related macros
will expand to nothing.  This is important also on Windows, where symbol
decoration is required only for shared libraries, not for static ones.
.TP
.B \fBPREFIX_NAME <prefix>\fP
If specified, the additional \fB<prefix>\fP is prepended to all generated
macro names.
.TP
.B \fBCUSTOM_CONTENT_FROM_VARIABLE <variable>\fP
Added in version 3.7.

.sp
If specified, the content from the \fB<variable>\fP value is appended to
the generated header file content after the preprocessor macros
definitions.
.TP
.B \fBINCLUDE_GUARD_NAME <include\-guard\-name>\fP
Added in version 3.11.

.sp
If specified, the \fB<include\-guard\-name>\fP is used as the preprocessor
macro name to guard multiple inclusions of the generated header instead
of the default name \fB<export\-macro\-name>_H\fP\&.
.sp
\fB<base\-name\-lowercase>_export.h\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
#ifndef <include\-guard\-name>
#define <include\-guard\-name>
// ...
#endif /* <include\-guard\-name> */
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Deprecated Command
.INDENT 0.0
.TP
.B add_compiler_export_flags
Deprecated since version 3.0: Set the target properties
\fI\%CXX_VISIBILITY_PRESET\fP and
\fI\%VISIBILITY_INLINES_HIDDEN\fP instead.

.sp
Adds C++ compiler options \fB\-fvisibility=hidden\fP (and
\fB\-fvisibility\-inlines\-hidden\fP, if supported) to hide all symbols by
default to either \fI\%CMAKE_CXX_FLAGS\fP
variable or to a specified variable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_compiler_export_flags([<output_variable>])
.EE
.UNINDENT
.UNINDENT
.sp
This command is a no\-op on Windows which does not need extra compiler flags
for exporting support.
.INDENT 7.0
.TP
.B \fB<output\-variable>\fP
Optional variable name that will be populated with a string of
space\-separated C++ compile options required to enable visibility
support for the compiler/architecture in use.  If this argument is
specified, the \fI\%CMAKE_CXX_FLAGS\fP variable
will not be modified.
.UNINDENT
.UNINDENT
.SS Examples
.SS Example: Generating Export Header
.sp
The following example demonstrates how to use this module to generate an
export header in the current binary directory (\fBexample_export.h\fP) and use
it in a C++ library named \fBexample\fP to control symbols visibility.  The
generated header defines the preprocessor macros \fBEXAMPLE_EXPORT\fP,
\fBEXAMPLE_NO_EXPORT\fP, \fBEXAMPLE_DEPRECATED\fP, \fBEXAMPLE_DEPRECATED_EXPORT\fP,
and \fBEXAMPLE_DEPRECATED_NO_EXPORT\fP, and is installed along with the
library\(aqs other public headers:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake_minimum_required(VERSION 3.24)
project(GenerateExportHeaderExample)

# Set default visibility of all symbols to hidden
set(CMAKE_CXX_VISIBILITY_PRESET \(dqhidden\(dq)
set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)

add_library(example)

include(GenerateExportHeader)
generate_export_header(example)

target_sources(
  example
  PRIVATE example.cxx
  PUBLIC
    FILE_SET HEADERS
      FILES example.h
    FILE_SET generated_headers
      TYPE HEADERS
      BASE_DIRS $<TARGET_PROPERTY:example,BINARY_DIR>
      FILES ${CMAKE_CURRENT_BINARY_DIR}/example_export.h
)

target_include_directories(example PRIVATE ${CMAKE_CURRENT_BINARY_DIR})

install(
  TARGETS example
  FILE_SET HEADERS
  FILE_SET generated_headers
)
.EE
.UNINDENT
.UNINDENT
.sp
And in the ABI header files:
.sp
\fBexample.h\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include \(dqexample_export.h\(dq

// This class is part of the public API and is exported
class EXAMPLE_EXPORT SomeClass
{
public:
  SomeClass();
  void doSomething();

  // This method is deprecated
  EXAMPLE_DEPRECATED void legacyMethod();
};

// This function is exported and deprecated
EXAMPLE_DEPRECATED_EXPORT void legacyPublicFunction();

// This function is deprecated but not exported
EXAMPLE_DEPRECATED void legacyInternalFunction();
.EE
.UNINDENT
.UNINDENT
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <iostream>
#include \(dqexample.h\(dq

SomeClass::SomeClass() = default;

void SomeClass::doSomething()
{
  std::cout << \(dqSomeClass::doSomething() called\(dq << std::endl;
}

void SomeClass::legacyMethod()
{
  std::cout << \(dqSomeClass::legacyMethod() is deprecated\(dq << std::endl;
}

void legacyPublicFunction()
{
  std::cout << \(dqlegacyPublicFunction() is deprecated\(dq << std::endl;
}

void internalLegacyFunction()
{
  std::cout << \(dqlegacyInternalFunction() is deprecated\(dq << std::endl;
}
.EE
.UNINDENT
.UNINDENT
.SS Examples: Customizing Generated Header
.sp
The \fBBASE_NAME\fP argument can be used to override the generated file name
and the names used for the macros.  The following will generate a file
named \fBother_name_export.h\fP containing export\-related macros such as
\fBOTHER_NAME_EXPORT\fP, \fBOTHER_NAME_NO_EXPORT\fP, \fBOTHER_NAME_DEPRECATED\fP,
etc.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(example example.cxx)
include(GenerateExportHeader)
generate_export_header(example BASE_NAME \(dqother_name\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBBASE_NAME\fP may be overridden by specifying other command options.
For example, the following creates a macro \fBOTHER_NAME_EXPORT\fP instead of
\fBEXAMPLE_EXPORT\fP, but other macros and the generated header file name are
set to their default values:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(example example.cxx)
include(GenerateExportHeader)
generate_export_header(example EXPORT_MACRO_NAME \(dqOTHER_NAME_EXPORT\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The following example creates \fBKDE_DEPRECATED\fP macro instead of
default \fBEXAMPLE_DEPRECATED\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(example example.cxx)
include(GenerateExportHeader)
generate_export_header(example DEPRECATED_MACRO_NAME \(dqKDE_DEPRECATED\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBDEFINE_NO_DEPRECATED\fP option can be used to define a macro which can
be used to remove deprecated code from preprocessor output:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
option(EXCLUDE_DEPRECATED \(dqExclude deprecated parts of the library\(dq)
if(EXCLUDE_DEPRECATED)
  set(NO_BUILD_DEPRECATED DEFINE_NO_DEPRECATED)
endif()

include(GenerateExportHeader)
generate_export_header(example ${NO_BUILD_DEPRECATED})
.EE
.UNINDENT
.UNINDENT
.sp
\fBexample.h\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
class EXAMPLE_EXPORT SomeClass
{
public:
#ifndef EXAMPLE_NO_DEPRECATED
  EXAMPLE_DEPRECATED void legacyMethod();
#endif
};
.EE
.UNINDENT
.UNINDENT
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#ifndef EXAMPLE_NO_DEPRECATED
void SomeClass::legacyMethod() {  }
#endif
.EE
.UNINDENT
.UNINDENT
.sp
The \fBPREFIX_NAME\fP argument can be used to prepend all generated macro names
with some prefix.  For example, the following will generate macros such as
\fBVTK_SOMELIB_EXPORT\fP, etc.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(GenerateExportHeader)
generate_export_header(somelib PREFIX_NAME \(dqVTK_\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
Appending additional content to generated header can be done with the
\fBCUSTOM_CONTENT_FROM_VARIABLE\fP argument:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(GenerateExportHeader)
set(content [[#include \(dqproject_api.h\(dq]])
generate_export_header(example CUSTOM_CONTENT_FROM_VARIABLE content)
.EE
.UNINDENT
.UNINDENT
.SS Example: Building Shared and Static Library
.sp
In the following example both a shared and a static library are built from
the same sources, and the \fB<MACRO>_STATIC_DEFINE\fP macro compile definition
is defined to ensure the same generated export header works for both:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(example_shared SHARED example.cxx)
add_library(example_static STATIC example.cxx)

include(GenerateExportHeader)
generate_export_header(example_shared BASE_NAME \(dqexample\(dq)

# Define macro to disable export attributes for static build
target_compile_definitions(example_static PRIVATE EXAMPLE_STATIC_DEFINE)
.EE
.UNINDENT
.UNINDENT
.SS Example: Upgrading Deprecated Command
.sp
In earlier versions of CMake, \fBadd_compiler_export_flags()\fP command was
used to add symbol visibility compile options:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(example example.cxx)

include(GenerateExportHeader)

add_compiler_export_flags(flags)
string(REPLACE \(dq \(dq \(dq;\(dq flags \(dq${flags}\(dq)
set_property(TARGET example APPEND PROPERTY COMPILE_OPTIONS \(dq${flags}\(dq)

generate_export_header(example)
.EE
.UNINDENT
.UNINDENT
.sp
In new code, the following target properties are used to achieve the same
functionality:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(example example.cxx)

include(GenerateExportHeader)

set_target_properties(
  example
  PROPERTIES
    CXX_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN TRUE
)

generate_export_header(example)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%DEFINE_SYMBOL\fP target property to customize the preprocessor
macro name used by the generated header.  This macro determines whether
the library header is being included during the library\(aqs own compilation
or when it is used by another project (e.g., after installation).
.IP \(bu 2
The \fI\%ENABLE_EXPORTS\fP target property.
.IP \(bu 2
The \fI\%WINDOWS_EXPORT_ALL_SYMBOLS\fP target property.
.UNINDENT
.SS GNUInstallDirs
.sp
This module defines the installation directory variables according to the
\X'tty: link https://www.gnu.org/prep/standards/html_node/Directory-Variables.html'\fI\%GNU Coding Standards\fP\X'tty: link' and provides a command to compute
installation\-related absolute paths.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(GNUInstallDirs)
.EE
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
Inclusion of this module defines the following variables:
.INDENT 0.0
.TP
.B \fBCMAKE_INSTALL_<dir>\fP
Destination for files of a given type.  This value may be passed to
the \fBDESTINATION\fP options of  \fI\%install()\fP commands for the
corresponding file type.  It should be a path relative to the installation
prefix so that it can be converted to an absolute path in a relocatable way.
However, there are some \fI\%special cases\fP as documented below.
.sp
While absolute paths are allowed, they are not recommended as they
do not work with the \fBcmake \-\-install\fP command\(aqs
\fI\%\-\-prefix\fP option, or with the
\fI\%cpack\fP installer generators. In particular, there is no
need to make paths absolute by prepending \fI\%CMAKE_INSTALL_PREFIX\fP;
this prefix is used by default if the DESTINATION is a relative path.
.TP
.B \fBCMAKE_INSTALL_FULL_<dir>\fP
The absolute path generated from the corresponding \fBCMAKE_INSTALL_<dir>\fP
value.  If the value is not already an absolute path, an absolute path
is constructed typically by prepending the value of the
\fI\%CMAKE_INSTALL_PREFIX\fP variable, except in \fI\%special cases\fP
as documented below.
.sp
These variables shouldn\(aqt be used in \fI\%install()\fP commands
as they do not work with the \fBcmake \-\-install\fP command\(aqs
\fI\%\-\-prefix\fP option, or with the
\fI\%cpack\fP installer generators.
.UNINDENT
.sp
where \fB<dir>\fP is one of:
.INDENT 0.0
.TP
.B \fBBINDIR\fP
user executables (\fBbin\fP)
.TP
.B \fBSBINDIR\fP
system admin executables (\fBsbin\fP)
.TP
.B \fBLIBEXECDIR\fP
program executables (\fBlibexec\fP)
.TP
.B \fBSYSCONFDIR\fP
read\-only single\-machine data (\fBetc\fP)
.sp
Changed in version 4.1: If the \fI\%CMAKE_INSTALL_PREFIX\fP falls into the
\fI\%special cases\fP,  the default paths for are the absolute
path variants as described there. See policy \fI\%CMP0192\fP\&.

.TP
.B \fBSHAREDSTATEDIR\fP
modifiable architecture\-independent data (\fBcom\fP)
.TP
.B \fBLOCALSTATEDIR\fP
modifiable single\-machine data (\fBvar\fP)
.sp
Changed in version 4.1: If the \fI\%CMAKE_INSTALL_PREFIX\fP falls into the
\fI\%special cases\fP,  the default paths for are the absolute
path variants as described there. See policy \fI\%CMP0192\fP\&.

.TP
.B \fBRUNSTATEDIR\fP
run\-time variable data (\fBLOCALSTATEDIR/run\fP)
.sp
Added in version 3.9.

.sp
Changed in version 4.1: If the \fI\%CMAKE_INSTALL_PREFIX\fP falls into the
\fI\%special cases\fP,  the default paths for are the absolute
path variants as described there. See policy \fI\%CMP0192\fP\&.

.TP
.B \fBLIBDIR\fP
object code libraries (\fBlib\fP or \fBlib64\fP)
.sp
On Debian, this may be \fBlib/<multiarch\-tuple>\fP when
\fI\%CMAKE_INSTALL_PREFIX\fP is \fB/usr\fP\&.
.TP
.B \fBINCLUDEDIR\fP
C header files (\fBinclude\fP)
.TP
.B \fBOLDINCLUDEDIR\fP
C header files for non\-gcc (\fB/usr/include\fP)
.TP
.B \fBDATAROOTDIR\fP
read\-only architecture\-independent data root (\fBshare\fP)
.TP
.B \fBDATADIR\fP
read\-only architecture\-independent data (\fBDATAROOTDIR\fP)
.TP
.B \fBINFODIR\fP
info documentation (\fBDATAROOTDIR/info\fP)
.TP
.B \fBLOCALEDIR\fP
locale\-dependent data (\fBDATAROOTDIR/locale\fP)
.TP
.B \fBMANDIR\fP
man documentation (\fBDATAROOTDIR/man\fP)
.TP
.B \fBDOCDIR\fP
documentation root (\fBDATAROOTDIR/doc/PROJECT_NAME\fP)
.UNINDENT
.sp
If the includer does not define a value the above\-shown default will be
used and the value will appear in the cache for editing by the user.
.sp
If a default value for the \fBCMAKE_INSTALL_<dir>\fP is used and the
\fI\%CMAKE_INSTALL_PREFIX\fP is changed, the new default value will
be used calculated on the new \fI\%CMAKE_INSTALL_PREFIX\fP value.
Using \fI\%\-\-prefix\fP in \fBcmake \-\-install\fP
will not alter these values.
.SS Special Cases
.sp
Added in version 3.4.

.sp
The following values of \fI\%CMAKE_INSTALL_PREFIX\fP are special:
.sp
\fB/\fP
.INDENT 0.0
.INDENT 3.5
For \fB<dir>\fP other than the \fBSYSCONFDIR\fP, \fBLOCALSTATEDIR\fP and
\fBRUNSTATEDIR\fP, the value of \fBCMAKE_INSTALL_<dir>\fP is prefixed
with \fBusr/\fP if it is not user\-specified as an absolute path.
For example, the \fBINCLUDEDIR\fP value \fBinclude\fP becomes \fBusr/include\fP\&.
This is required by the \X'tty: link https://www.gnu.org/prep/standards/html_node/Directory-Variables.html'\fI\%GNU Coding Standards\fP\X'tty: link', which state:
.INDENT 0.0
.INDENT 3.5
When building the complete GNU system, the prefix will be empty
and \fB/usr\fP will be a symbolic link to \fB/\fP\&.
.UNINDENT
.UNINDENT
.sp
Changed in version 4.1: The \fBCMAKE_INSTALL_<dir>\fP variables are cached with the \fBusr/\fP prefix.
See policy \fI\%CMP0193\fP\&.

.UNINDENT
.UNINDENT
.sp
\fB/usr\fP
.INDENT 0.0
.INDENT 3.5
For \fB<dir>\fP equal to \fBSYSCONFDIR\fP, \fBLOCALSTATEDIR\fP or
\fBRUNSTATEDIR\fP, the \fBCMAKE_INSTALL_FULL_<dir>\fP is computed by
prepending just \fB/\fP to the value of \fBCMAKE_INSTALL_<dir>\fP
if it is not already an absolute path.
For example, the \fBSYSCONFDIR\fP value \fBetc\fP becomes \fB/etc\fP\&.
This is required by the \X'tty: link https://www.gnu.org/prep/standards/html_node/Directory-Variables.html'\fI\%GNU Coding Standards\fP\X'tty: link'\&.
.sp
Changed in version 4.1: The default values of \fBCMAKE_INSTALL_<dir>\fP for \fB<dir>\fP equal
to \fBSYSCONFDIR\fP, \fBLOCALSTATEDIR\fP and \fBRUNSTATEDIR\fP are the
absolute paths \fB/etc\fP, \fB/var\fP and \fB/var/run\fP respectively.
See policy \fI\%CMP0192\fP\&.

.UNINDENT
.UNINDENT
.sp
\fB/opt/...\fP
.INDENT 0.0
.INDENT 3.5
For \fB<dir>\fP equal to \fBSYSCONFDIR\fP, \fBLOCALSTATEDIR\fP or
\fBRUNSTATEDIR\fP, the \fBCMAKE_INSTALL_FULL_<dir>\fP is computed by
\fIappending\fP the prefix to the value of \fBCMAKE_INSTALL_<dir>\fP
if it is not already an absolute path.
For example, the \fBSYSCONFDIR\fP value \fBetc\fP becomes \fB/etc/opt/...\fP\&.
This is defined by the \X'tty: link https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html'\fI\%Filesystem Hierarchy Standard\fP\X'tty: link'\&.
.sp
This behavior does not apply to paths under \fB/opt/homebrew/...\fP\&.
.sp
Changed in version 4.1: The default values of \fBCMAKE_INSTALL_<dir>\fP for \fB<dir>\fP equal
to \fBSYSCONFDIR\fP, \fBLOCALSTATEDIR\fP and \fBRUNSTATEDIR\fP are the
absolute paths \fB/etc/opt/...\fP, \fB/var/opt/...\fP and
\fB/var/run/opt/...\fP respectively. See policy \fI\%CMP0192\fP\&.

.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B GNUInstallDirs_get_absolute_install_dir
Added in version 3.7.

.sp
Computes an absolute installation path from a given relative path:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
GNUInstallDirs_get_absolute_install_dir(<result\-var> <input\-var> <dir>)
.EE
.UNINDENT
.UNINDENT
.sp
This command takes the value from the variable \fB<input\-var>\fP and
computes its absolute path according to GNU standard installation
directories.  If the input path is relative, it is prepended with
\fI\%CMAKE_INSTALL_PREFIX\fP and may be adjusted for the
\fI\%special cases\fP described above.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<result\-var>\fP
Name of the variable in which to store the computed absolute path.
.TP
.B \fB<input\-var>\fP
Name of the variable containing the path that will be used to compute
its associated absolute installation path.
.sp
Changed in version 4.1: This variable is no longer altered.  See policy \fI\%CMP0193\fP\&.
In previous CMake versions, this command modified the \fB<input\-var>\fP
variable value based on the \fI\%special cases\fP\&.

.TP
.B \fB<dir>\fP
Added in version 3.20.

.sp
The directory type name, e.g., \fBSYSCONFDIR\fP, \fBLOCALSTATEDIR\fP,
\fBRUNSTATEDIR\fP, etc.  This argument determines whether \fI\%special cases\fP
apply when computing the absolute path.
.sp
Changed in version 3.20: Before the \fB<dir>\fP argument was introduced, the directory type
could be specified by setting the \fBdir\fP variable prior to calling
this command.  As of CMake 3.20, if the \fB<dir>\fP argument is provided
explicitly, the \fBdir\fP variable is ignored.

.UNINDENT
.sp
While this command is used internally by this module to compute the
\fBCMAKE_INSTALL_FULL_<dir>\fP variables, it is also exposed publicly for
users to create additional custom installation path variables and compute
absolute paths where necessary, using the same logic.
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%install()\fP command.
.UNINDENT
.SS GoogleTest
.sp
Added in version 3.9.

.sp
This module defines functions to help use the Google Test infrastructure.  Two
mechanisms for adding tests are provided. \fI\%gtest_add_tests()\fP has been
around for some time, originally via \fBfind_package(GTest)\fP\&.
\fI\%gtest_discover_tests()\fP was introduced in CMake 3.10.
.sp
The (older) \fI\%gtest_add_tests()\fP scans source files to identify tests.
This is usually effective, with some caveats, including in cross\-compiling
environments, and makes setting additional properties on tests more convenient.
However, its handling of parameterized tests is less comprehensive, and it
requires re\-running CMake to detect changes to the list of tests.
.sp
The (newer) \fI\%gtest_discover_tests()\fP discovers tests by asking the
compiled test executable to enumerate its tests.  This is more robust and
provides better handling of parameterized tests, and does not require CMake
to be re\-run when tests change.  However, it may not work in a cross\-compiling
environment, and setting test properties is less convenient.
.sp
More details can be found in the documentation of the respective functions.
.sp
Both commands are intended to replace use of \fI\%add_test()\fP to register
tests, and will create a separate CTest test for each Google Test test case.
Note that this is in some cases less efficient, as common set\-up and tear\-down
logic cannot be shared by multiple test cases executing in the same instance.
However, it provides more fine\-grained pass/fail information to CTest, which is
usually considered as more beneficial.  By default, the CTest test name is the
same as the Google Test name (i.e. \fBsuite.testcase\fP); see also
\fBTEST_PREFIX\fP and \fBTEST_SUFFIX\fP\&.
.INDENT 0.0
.TP
.B gtest_add_tests
Automatically add tests with CTest by scanning source code for Google Test
macros:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gtest_add_tests(TARGET target
                [SOURCES src1...]
                [EXTRA_ARGS args...]
                [WORKING_DIRECTORY dir]
                [TEST_PREFIX prefix]
                [TEST_SUFFIX suffix]
                [SKIP_DEPENDENCY]
                [TEST_LIST outVar]
)
.EE
.UNINDENT
.UNINDENT
.sp
\fBgtest_add_tests\fP attempts to identify tests by scanning source files.
Although this is generally effective, it uses only a basic regular expression
match, which can be defeated by atypical test declarations, and is unable to
fully \(dqsplit\(dq parameterized tests.  Additionally, it requires that CMake be
re\-run to discover any newly added, removed or renamed tests (by default,
this means that CMake is re\-run when any test source file is changed, but see
\fBSKIP_DEPENDENCY\fP).  However, it has the advantage of declaring tests at
CMake time, which somewhat simplifies setting additional properties on tests,
and always works in a cross\-compiling environment.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBTARGET target\fP
Specifies the Google Test executable, which must be a known CMake
executable target.  CMake will substitute the location of the built
executable when running the test.
.TP
.B \fBSOURCES src1...\fP
When provided, only the listed files will be scanned for test cases.  If
this option is not given, the \fI\%SOURCES\fP property of the
specified \fBtarget\fP will be used to obtain the list of sources.
.TP
.B \fBEXTRA_ARGS args...\fP
Any extra arguments to pass on the command line to each test case.
.sp
Changed in version 3.31: Empty values in \fBargs...\fP are preserved, see \fI\%CMP0178\fP\&.

.TP
.B \fBWORKING_DIRECTORY dir\fP
Specifies the directory in which to run the discovered test cases.  If this
option is not provided, the current binary directory is used.
.TP
.B \fBTEST_PREFIX prefix\fP
Specifies a \fBprefix\fP to be prepended to the name of each discovered test
case.  This can be useful when the same source files are being used in
multiple calls to \fBgtest_add_test()\fP but with different \fBEXTRA_ARGS\fP\&.
.TP
.B \fBTEST_SUFFIX suffix\fP
Similar to \fBTEST_PREFIX\fP except the \fBsuffix\fP is appended to the name of
every discovered test case.  Both \fBTEST_PREFIX\fP and \fBTEST_SUFFIX\fP may
be specified.
.TP
.B \fBSKIP_DEPENDENCY\fP
Normally, the function creates a dependency which will cause CMake to be
re\-run if any of the sources being scanned are changed.  This is to ensure
that the list of discovered tests is updated.  If this behavior is not
desired (as may be the case while actually writing the test cases), this
option can be used to prevent the dependency from being added.
.TP
.B \fBTEST_LIST outVar\fP
The variable named by \fBoutVar\fP will be populated in the calling scope
with the list of discovered test cases.  This allows the caller to do
things like manipulate test properties of the discovered tests.
.UNINDENT
.sp
Changed in version 3.31: Empty values in the \fI\%TEST_LAUNCHER\fP and
\fI\%CROSSCOMPILING_EMULATOR\fP target properties are preserved,
see policy \fI\%CMP0178\fP\&.

.sp
Usage example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(GoogleTest)
add_executable(FooTest FooUnitTest.cxx)
gtest_add_tests(TARGET      FooTest
                TEST_SUFFIX .noArgs
                TEST_LIST   noArgsTests
)
gtest_add_tests(TARGET      FooTest
                EXTRA_ARGS  \-\-someArg someValue
                TEST_SUFFIX .withArgs
                TEST_LIST   withArgsTests
)
set_tests_properties(${noArgsTests}   PROPERTIES TIMEOUT 10)
set_tests_properties(${withArgsTests} PROPERTIES TIMEOUT 20)
.EE
.UNINDENT
.UNINDENT
.sp
For backward compatibility, the following form is also supported:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gtest_add_tests(exe args files...)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fBexe\fP
The path to the test executable or the name of a CMake target.
.TP
.B \fBargs\fP
A ;\-list of extra arguments to be passed to executable.  The entire
list must be passed as a single argument.  Enclose it in quotes,
or pass \fB\(dq\(dq\fP for no arguments.
.TP
.B \fBfiles...\fP
A list of source files to search for tests and test fixtures.
Alternatively, use \fBAUTO\fP to specify that \fBexe\fP is the name
of a CMake executable target whose sources should be scanned.
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.EX
include(GoogleTest)
set(FooTestArgs \-\-foo 1 \-\-bar 2)
add_executable(FooTest FooUnitTest.cxx)
gtest_add_tests(FooTest \(dq${FooTestArgs}\(dq AUTO)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B gtest_discover_tests
Automatically add tests with CTest by querying the compiled test executable
for available tests:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gtest_discover_tests(target
                     [EXTRA_ARGS args...]
                     [WORKING_DIRECTORY dir]
                     [TEST_PREFIX prefix]
                     [TEST_SUFFIX suffix]
                     [TEST_FILTER expr]
                     [NO_PRETTY_TYPES] [NO_PRETTY_VALUES]
                     [PROPERTIES name1 value1...]
                     [TEST_LIST var]
                     [DISCOVERY_TIMEOUT seconds]
                     [XML_OUTPUT_DIR dir]
                     [DISCOVERY_MODE <POST_BUILD|PRE_TEST>]
                     [DISCOVERY_EXTRA_ARGS args...]
)
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.10.

.sp
\fBgtest_discover_tests()\fP sets up a post\-build or pre\-test command on the
test executable that generates the list of tests by parsing the output from
running the test executable with the \fB\-\-gtest_list_tests\fP argument.
Compared to the source parsing approach of \fI\%gtest_add_tests()\fP,
this ensures that the full list of tests, including instantiations of
parameterized tests, is obtained.  Since test discovery occurs at build
or test time, it is not necessary to re\-run CMake when the list of tests
changes.  However, it requires that \fI\%CROSSCOMPILING_EMULATOR\fP
is properly set in order to function in a cross\-compiling environment.
.sp
Additionally, setting properties on tests is somewhat less convenient, since
the tests are not available at CMake time.  Additional test properties may be
assigned to the set of tests as a whole using the \fBPROPERTIES\fP option.  If
more fine\-grained test control is needed, custom content may be provided
through an external CTest script using the \fI\%TEST_INCLUDE_FILES\fP
directory property.  The set of discovered tests is made accessible to such a
script via the \fB<target>_TESTS\fP variable (see the \fBTEST_LIST\fP option
below for further discussion and limitations).
.sp
The options are:
.INDENT 7.0
.TP
.B \fBtarget\fP
Specifies the Google Test executable, which must be a known CMake
executable target.  CMake will substitute the location of the built
executable when running the test.
.TP
.B \fBEXTRA_ARGS args...\fP
Any extra arguments to pass on the command line to each test case.
.sp
Changed in version 3.31: Empty values in \fBargs...\fP are preserved, see \fI\%CMP0178\fP\&.

.TP
.B \fBWORKING_DIRECTORY dir\fP
Specifies the directory in which to run the discovered test cases.  If this
option is not provided, the current binary directory is used.
.TP
.B \fBTEST_PREFIX prefix\fP
Specifies a \fBprefix\fP to be prepended to the name of each discovered test
case.  This can be useful when the same test executable is being used in
multiple calls to \fBgtest_discover_tests()\fP but with different
\fBEXTRA_ARGS\fP\&.
.TP
.B \fBTEST_SUFFIX suffix\fP
Similar to \fBTEST_PREFIX\fP except the \fBsuffix\fP is appended to the name of
every discovered test case.  Both \fBTEST_PREFIX\fP and \fBTEST_SUFFIX\fP may
be specified.
.TP
.B \fBTEST_FILTER expr\fP
Added in version 3.22.

.sp
Filter expression to pass as a \fB\-\-gtest_filter\fP argument during test
discovery.  Note that the expression is a wildcard\-based format that
matches against the original test names as used by gtest.  For type or
value\-parameterized tests, these names may be different to the potentially
pretty\-printed test names that \fBctest\fP uses.
.TP
.B \fBNO_PRETTY_TYPES\fP
By default, the type index of type\-parameterized tests is replaced by the
actual type name in the CTest test name.  If this behavior is undesirable
(e.g. because the type names are unwieldy), this option will suppress this
behavior.
.TP
.B \fBNO_PRETTY_VALUES\fP
By default, the value index of value\-parameterized tests is replaced by the
actual value in the CTest test name.  If this behavior is undesirable
(e.g. because the value strings are unwieldy), this option will suppress
this behavior.
.TP
.B \fBPROPERTIES name1 value1...\fP
Specifies additional properties to be set on all tests discovered by this
invocation of \fBgtest_discover_tests()\fP\&.
.TP
.B \fBTEST_LIST var\fP
Make the list of tests available in the variable \fBvar\fP, rather than the
default \fB<target>_TESTS\fP\&.  This can be useful when the same test
executable is being used in multiple calls to \fBgtest_discover_tests()\fP\&.
Note that this variable is only available in CTest.
.sp
Due to a limitation of CMake\(aqs parsing rules, any test with a square
bracket in its name will be omitted from the list of tests stored in
this variable.  Such tests will still be defined and executed by
\fBctest\fP as normal though.
.TP
.B \fBDISCOVERY_TIMEOUT num\fP
Added in version 3.10.3.

.sp
Specifies how long (in seconds) CMake will wait for the test to enumerate
available tests.  If the test takes longer than this, discovery (and your
build) will fail.  Most test executables will enumerate their tests very
quickly, but under some exceptional circumstances, a test may require a
longer timeout.  The default is 5.  See also the \fBTIMEOUT\fP option of
\fI\%execute_process()\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
In CMake versions 3.10.1 and 3.10.2, this option was called \fBTIMEOUT\fP\&.
This clashed with the \fBTIMEOUT\fP test property, which is one of the
common properties that would be set with the \fBPROPERTIES\fP keyword,
usually leading to legal but unintended behavior.  The keyword was
changed to \fBDISCOVERY_TIMEOUT\fP in CMake 3.10.3 to address this
problem.  The ambiguous behavior of the \fBTIMEOUT\fP keyword in 3.10.1
and 3.10.2 has not been preserved.
.UNINDENT
.UNINDENT
.TP
.B \fBXML_OUTPUT_DIR dir\fP
Added in version 3.18.

.sp
If specified, the parameter is passed along with \fB\-\-gtest_output=xml:\fP
to test executable. The actual file name is the same as the test target,
including prefix and suffix. This should be used instead of
\fBEXTRA_ARGS \-\-gtest_output=xml\fP to avoid race conditions writing the
XML result output when using parallel test execution.
.TP
.B \fBDISCOVERY_MODE\fP
Added in version 3.18.

.sp
Provides greater control over when \fBgtest_discover_tests()\fP performs test
discovery. By default, \fBPOST_BUILD\fP sets up a post\-build command
to perform test discovery at build time. In certain scenarios, like
cross\-compiling, this \fBPOST_BUILD\fP behavior is not desirable.
By contrast, \fBPRE_TEST\fP delays test discovery until just prior to test
execution. This way test discovery occurs in the target environment
where the test has a better chance at finding appropriate runtime
dependencies.
.sp
\fBDISCOVERY_MODE\fP defaults to the value of the
\fBCMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE\fP variable if it is not
passed when calling \fBgtest_discover_tests()\fP\&. This provides a mechanism
for globally selecting a preferred test discovery behavior without having
to modify each call site.
.TP
.B \fBDISCOVERY_EXTRA_ARGS args...\fP
Added in version 3.31.

.sp
Any extra arguments to pass on the command line for the discovery command.
.UNINDENT
.sp
Added in version 3.29: The \fI\%TEST_LAUNCHER\fP target property is honored during test
discovery and test execution.

.sp
Changed in version 3.31: Empty values in the \fI\%TEST_LAUNCHER\fP and
\fI\%CROSSCOMPILING_EMULATOR\fP target properties are preserved,
see policy \fI\%CMP0178\fP\&.

.UNINDENT
.SS InstallRequiredSystemLibraries
.sp
Include this module to search for compiler\-provided system runtime
libraries and add install rules for them.  Some optional variables
may be set prior to including the module to adjust behavior:
.INDENT 0.0
.TP
.B \fBCMAKE_INSTALL_SYSTEM_RUNTIME_LIBS\fP
Specify additional runtime libraries that may not be detected.
After inclusion any detected libraries will be appended to this.
.TP
.B \fBCMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP\fP
Set to TRUE to skip calling the \fI\%install(PROGRAMS)\fP command to
allow the includer to specify its own install rule, using the value of
\fBCMAKE_INSTALL_SYSTEM_RUNTIME_LIBS\fP to get the list of libraries.
.TP
.B \fBCMAKE_INSTALL_DEBUG_LIBRARIES\fP
Set to TRUE to install the debug runtime libraries when available
with MSVC tools.
.TP
.B \fBCMAKE_INSTALL_DEBUG_LIBRARIES_ONLY\fP
Set to TRUE to install only the debug runtime libraries with MSVC
tools even if the release runtime libraries are also available.
.TP
.B \fBCMAKE_INSTALL_UCRT_LIBRARIES\fP
Added in version 3.6.

.sp
Set to TRUE to install the Windows Universal CRT libraries for
app\-local deployment (e.g. to Windows XP).  This is meaningful
only with MSVC from Visual Studio 2015 or higher.
.sp
Added in version 3.9: One may set a \fBCMAKE_WINDOWS_KITS_10_DIR\fP \fIenvironment variable\fP
to an absolute path to tell CMake to look for Windows 10 SDKs in
a custom location.  The specified directory is expected to contain
\fBRedist/ucrt/DLLs/*\fP directories.

.TP
.B \fBCMAKE_INSTALL_MFC_LIBRARIES\fP
Set to TRUE to install the MSVC MFC runtime libraries.
.TP
.B \fBCMAKE_INSTALL_OPENMP_LIBRARIES\fP
Set to TRUE to install the MSVC OpenMP runtime libraries
.TP
.B \fBCMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION\fP
Specify the \fI\%install(PROGRAMS)\fP command \fBDESTINATION\fP
option.  If not specified, the default is \fBbin\fP on Windows
and \fBlib\fP elsewhere.
.TP
.B \fBCMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS\fP
Set to TRUE to disable warnings about required library files that
do not exist.  (For example, Visual Studio Express editions may
not provide the redistributable files.)
.TP
.B \fBCMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT\fP
Added in version 3.3.

.sp
Specify the \fI\%install(PROGRAMS)\fP command \fBCOMPONENT\fP
option.  If not specified, no such option will be used.
.UNINDENT
.sp
Added in version 3.10: Support for installing Intel compiler runtimes.

.SS ProcessorCount
.sp
This module provides a command to determine the number of processors/cores.
.sp
Load this module in CMake with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(ProcessorCount)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B ProcessorCount
Determines the number of logical CPU cores available on the machine:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ProcessorCount(<variable>)
.EE
.UNINDENT
.UNINDENT
.sp
This command sets a variable named \fB<variable>\fP to the number of logical
CPU cores available on the machine, if the information can be determined.
If successful, the variable is guaranteed to be set to a positive integer
(>=1).  If the processor count cannot be determined, it is set to 0.
.sp
Currently, this functionality is implemented for AIX, Cygwin, FreeBSD, Haiku,
HPUX, Linux, macOS, QNX, Sun and Windows.
.sp
This command provides an approximation of the number of compute cores
available on the current machine, making it useful for parallel building and
testing.  It is meant to help utilize as much of the machine as seems
reasonable, though users should consider other workloads running on the
machine before using its full capacity for parallel tasks.
.sp
Changed in version 3.15: On Linux, returns the container CPU count instead of the host CPU count.

.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module relies on system\-dependent commands to determine the number of
processors, which may not always provide accurate information in certain
environments.  A more generally accurate logical CPU count can be also
obtained with the \fI\%cmake_host_system_information()\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake_host_system_information(RESULT n QUERY NUMBER_OF_LOGICAL_CORES)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.sp
In the following example this module is used in a \fI\%ctest \-S\fP
dashboard script to determine number of cores to use for a parallel
\fI\%CTest Build Step\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(ProcessorCount)
ProcessorCount(n)
if(NOT n EQUAL 0)
  set(CTEST_BUILD_FLAGS \-j${n})
  set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${n})
endif()
.EE
.UNINDENT
.UNINDENT
.SS SelectLibraryConfigurations
.sp
This module is intended for use in \fI\%Find Modules\fP and provides a
command to automatically set library variables when package is available
with multiple \fI\%Build Configurations\fP\&.
.sp
Load it in a CMake find module with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(SelectLibraryConfigurations)
.EE
.UNINDENT
.UNINDENT
.sp
Supported build configurations are \fBRelease\fP and \fBDebug\fP as these are
the most common ones in such packages.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module has been available since early versions of CMake, when the
\fB<PackageName>_LIBRARIES\fP result variable was used for linking found
packages.  When writing standard find modules, \fI\%Imported Targets\fP should
be preferred.  In addition to or as an alternative to this module, imported
targets provide finer control over linking through the
\fI\%IMPORTED_CONFIGURATIONS\fP property.
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B select_library_configurations
Sets and adjusts library variables based on debug and release build
configurations:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
select_library_configurations(<basename>)
.EE
.UNINDENT
.UNINDENT
.sp
This command is a helper for setting the \fB<basename>_LIBRARY\fP and
\fB<basename>_LIBRARIES\fP result variables when a library might be provided
with multiple build configurations.
.sp
The argument is:
.INDENT 7.0
.TP
.B \fB<basename>\fP
The base name of the library, used as a prefix for variable names.  This is
the name of the package as used in the \fBFind<PackageName>.cmake\fP module
filename, or the component name, when find module provides them.
.UNINDENT
.sp
Prior to calling this command the following cache variables should be set
in the find module (for example, by the \fI\%find_library()\fP command):
.INDENT 7.0
.TP
.B \fB<basename>_LIBRARY_RELEASE\fP
A cache variable storing the full path to the \fBRelease\fP build of the
library.  If not set or found, this command will set its value to
\fB<basename>_LIBRARY_RELEASE\-NOTFOUND\fP\&.
.TP
.B \fB<basename>_LIBRARY_DEBUG\fP
A cache variable storing the full path to the \fBDebug\fP build of the
library.  If not set or found, this command will set its value to
\fB<basename>_LIBRARY_DEBUG\-NOTFOUND\fP\&.
.UNINDENT
.sp
This command then sets the following local result variables:
.INDENT 7.0
.TP
.B \fB<basename>_LIBRARY\fP
A result variable that is set to the value of
\fB<basename>_LIBRARY_RELEASE\fP variable if found, otherwise it is set to the
value of \fB<basename>_LIBRARY_DEBUG\fP variable if found.  If both are found,
the release library value takes precedence. If both are not found, it is set
to value \fB<basename>_LIBRARY\-NOTFOUND\fP\&.
.sp
If the \fI\%CMake Generator\fP in use supports
build configurations, then this variable will be a list of found libraries
each prepended with the \fBoptimized\fP or \fBdebug\fP keywords specifying which
library should be linked for the given configuration.  These keywords are
used by the \fI\%target_link_libraries()\fP command.  If a build
configuration has not been set or the generator in use does not support
build configurations, then this variable value will not contain these
keywords.
.TP
.B \fB<basename>_LIBRARIES\fP
A result variable that is set to the same value as the
\fB<basename>_LIBRARY\fP variable.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The \fBselect_library_configurations()\fP command should be called before
handling standard find module arguments with
\fI\%find_package_handle_standard_args()\fP to ensure that the
\fB<PackageName>_FOUND\fP result variable is correctly set based on
\fB<basename>_LIBRARY\fP or other related variables.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.sp
Setting library variables based on the build configuration inside a find module
file:
.sp
\fBFindFoo.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Find release and debug build of the library
find_library(Foo_LIBRARY_RELEASE ...)
find_library(Foo_LIBRARY_DEBUG ...)

# Set Foo_LIBRARY and Foo_LIBRARIES result variables
include(SelectLibraryConfigurations)
select_library_configurations(Foo)

# Set Foo_FOUND variable and print result message.
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
  Foo
  REQUIRED_VARS Foo_LIBRARY ...
)
.EE
.UNINDENT
.UNINDENT
.sp
When find module provides components with multiple build configurations:
.sp
\fBFindFoo.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(SelectLibraryConfigurations)
foreach(component IN LISTS Foo_FIND_COMPONENTS)
  # ...
  select_library_configurations(Foo_${component})
  # ...
endforeach()
.EE
.UNINDENT
.UNINDENT
.sp
A project can then use this find module as follows:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Foo)
target_link_libraries(project_target PRIVATE ${Foo_LIBRARIES})
# ...
.EE
.UNINDENT
.UNINDENT
.SS TestForANSIForScope
.sp
This module checks whether the \fBCXX\fP compiler restricts the scope of variables
declared in a for\-init\-statement to the loop body.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForANSIForScope)
.EE
.UNINDENT
.UNINDENT
.sp
In early C++ (pre\-C++98), variables declared in \fBfor(<init\-statement> ...)\fP
could remain accessible outside the loop after its body (\fBfor() { <body> }\fP).
.sp
This module defines the following cache variable:
.INDENT 0.0
.TP
.B \fBCMAKE_NO_ANSI_FOR_SCOPE\fP
A cache variable containing the result of the check.  It will be set to value
\fB0\fP if the for\-init\-statement has restricted scope (\fBC++ 98\fP and newer),
and to value \fB1\fP if not (\fBANSI C++\fP).
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
As of the \fBC++ 98\fP standard, variables declared in a for\-init\-statement are
restricted to the loop body, making this behavior obsolete.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Including this module will check the \fBfor()\fP loop scope behavior and define
the \fBCMAKE_NO_ANSI_FOR_SCOPE\fP cache variable:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForANSIForScope)
file(
  CONFIGURE
  OUTPUT config.h
  CONTENT \(dq#cmakedefine CMAKE_NO_ANSI_FOR_SCOPE\(dq
)
.EE
.UNINDENT
.UNINDENT
.sp
which can be then used in a C++ program:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include \(dqconfig.h\(dq

#ifdef CMAKE_NO_ANSI_FOR_SCOPE
#  define for if(false) {} else for
#endif
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CMakeBackwardCompatibilityCXX\fP module.
.UNINDENT
.SS TestForANSIStreamHeaders
.sp
This module checks whether the \fBCXX\fP compiler supports standard library
headers without the \fB\&.h\fP extension (e.g. \fB<iostream>\fP).
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForANSIStreamHeaders)
.EE
.UNINDENT
.UNINDENT
.sp
Early versions of C++ (pre\-C++98) didn\(aqt support including standard headers
without extensions.
.sp
This module defines the following cache variable:
.INDENT 0.0
.TP
.B \fBCMAKE_NO_ANSI_STREAM_HEADERS\fP
A cache variable containing the result of the check.  It will be set to value
\fB0\fP if the standard headers can be included without the \fB\&.h\fP extension
(\fBC++ 98\fP and newer), and to value \fB1\fP if \fB\&.h\fP is required
(\fBANSI C++\fP).
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The C++ standard headers without extensions got formally introduced in the
\fBC++ 98\fP standard, making this issue obsolete.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Including this module will check how the C++ standard headers can be included
and define the \fBCMAKE_NO_ANSI_STREAM_HEADERS\fP cache variable:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForANSIStreamHeaders)
file(
  CONFIGURE
  OUTPUT config.h
  CONTENT \(dq#cmakedefine CMAKE_NO_ANSI_STREAM_HEADERS\(dq
)
.EE
.UNINDENT
.UNINDENT
.sp
C++ program can then include the available header conditionally:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include \(dqconfig.h\(dq

#ifdef CMAKE_NO_ANSI_STREAM_HEADERS
#  include <iostream.h>
#else
#  include <iostream>
#endif

int main() { ... }
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CMakeBackwardCompatibilityCXX\fP module.
.UNINDENT
.SS TestForSSTREAM
.sp
This module checks whether the C++ standard header \fB<sstream>\fP exists and
functions correctly.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForSSTREAM)
.EE
.UNINDENT
.UNINDENT
.sp
In early versions of C++ (pre\-C++98), the \fB<sstream>\fP header was not
formally standardized and may not have been available.
.sp
This module defines the following cache variables:
.INDENT 0.0
.TP
.B \fBCMAKE_NO_ANSI_STRING_STREAM\fP
A cache variable indicating whether the \fB<sstream>\fP header is available. It
will be set to value \fB0\fP if \fB<sstream>\fP is available (\fBC++ 98\fP and
newer), and to value \fB1\fP if \fB<sstream>\fP is missing (\fBANSI C++\fP).
.TP
.B \fBCMAKE_HAS_ANSI_STRING_STREAM\fP
A cache variable that is the opposite of \fBCMAKE_NO_ANSI_STRING_STREAM\fP
(true if \fB<sstream>\fP is available and false if \fB<sstream>\fP is missing).
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fB<sstream>\fP header was formally introduced in the \fBC++ 98\fP standard,
making this check obsolete for modern compilers.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Including this module will check for \fB<sstream>\fP support and define the
\fBCMAKE_NO_ANSI_STRING_STREAM\fP cache variable:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForSSTREAM)
file(
  CONFIGURE
  OUTPUT config.h
  CONTENT \(dq#cmakedefine CMAKE_NO_ANSI_STRING_STREAM\(dq
)
.EE
.UNINDENT
.UNINDENT
.sp
Then it can be used in a C++ program:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include \(dqconfig.h\(dq

#ifndef CMAKE_NO_ANSI_STRING_STREAM
#  include <sstream>
#endif

int main() { ... }
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CMakeBackwardCompatibilityCXX\fP module.
.UNINDENT
.SS TestForSTDNamespace
.sp
This module checks whether the \fBCXX\fP compiler supports the \fBstd\fP namespace
for the C++ Standard Library.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForSTDNamespace)
.EE
.UNINDENT
.UNINDENT
.sp
Early versions of C++ (pre\-C++98) did not have a requirement for a dedicated
namespace of C++ Standard Template Library (STL) components (e.g. \fBlist\fP,
etc.) and other parts of the C++ Standard Library (such as I/O streams
\fBcout\fP, \fBendl\fP, etc), so they were available globally.
.sp
This module defines the following cache variable:
.INDENT 0.0
.TP
.B \fBCMAKE_NO_STD_NAMESPACE\fP
A cache variable containing the result of the check.  It will be set to value
\fB0\fP if the \fBstd\fP namespace is supported (\fBC++ 98\fP and newer), and to
value \fB1\fP if not (\fBANSI C++\fP).
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fBstd\fP namespace got formally introduced in \fBC++ 98\fP standard, making
this issue obsolete.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Including this module will check for the \fBstd\fP namespace support and define
the \fBCMAKE_NO_STD_NAMESPACE\fP cache variable:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestForSTDNamespace)
file(
  CONFIGURE
  OUTPUT config.h
  CONTENT \(dq#cmakedefine CMAKE_NO_STD_NAMESPACE\(dq
)
.EE
.UNINDENT
.UNINDENT
.sp
which can be then used in a C++ program to define the missing namespace:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include \(dqconfig.h\(dq

#ifdef CMAKE_NO_STD_NAMESPACE
#  define std
#endif
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CMakeBackwardCompatibilityCXX\fP module.
.UNINDENT
.SS UseEcos
.sp
This module defines variables and provides commands required to build an eCos
application.
.sp
Load this module in CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(UseEcos)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following commands:
.SS Building an eCos Application
.INDENT 0.0
.TP
.B ecos_add_include_directories
Adds the eCos include directories for the current \fBCMakeLists.txt\fP file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ecos_add_include_directories()
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ecos_adjust_directory
Adjusts the paths of given source files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ecos_adjust_directory(<var> <sources>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command modifies the paths of the source files \fB<sources>...\fP to
make them suitable for use with \fBecos_add_executable()\fP, and stores them
in the variable \fB<var>\fP\&.
.INDENT 7.0
.TP
.B \fB<var>\fP
Result variable name holding a new list of source files with adjusted paths.
.TP
.B \fB<sources>...\fP
A list of relative or absolute source files to adjust their paths.
.UNINDENT
.sp
Use this command when the actual sources are located one level upwards. A
\fB\&../\fP has to be prepended in front of every source file that is given as a
relative path.
.UNINDENT
.INDENT 0.0
.TP
.B ecos_add_executable
Creates an eCos application executable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ecos_add_executable(<name> <sources>...)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<name>\fP
The name of the executable.
.TP
.B \fB<sources>...\fP
A list of all source files, where the path has been adjusted beforehand by
calling the \fBecos_adjust_directory()\fP\&.
.UNINDENT
.sp
This command also sets the \fBECOS_DEFINITIONS\fP local variable, holding some
common compile definitions.
.UNINDENT
.SS Selecting the Toolchain
.INDENT 0.0
.TP
.B ecos_use_arm_elf_tools
Enables the ARM ELF toolchain for the directory where it is called:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ecos_use_arm_elf_tools()
.EE
.UNINDENT
.UNINDENT
.sp
Use this command, when compiling for the xscale processor.
.UNINDENT
.INDENT 0.0
.TP
.B ecos_use_i386_elf_tools
Enables the i386 ELF toolchain for the directory where it is called:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ecos_use_i386_elf_tools()
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ecos_use_ppc_eabi_tools
Enables the PowerPC toolchain for the directory where it is called:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
ecos_use_ppc_eabi_tools()
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS Variables
.sp
This module also defines the following variables:
.INDENT 0.0
.TP
.B \fBECOSCONFIG_EXECUTABLE\fP
Cache variable that contains a path to the \fBecosconfig\fP executable (the eCos
configuration program).
.TP
.B \fBECOS_CONFIG_FILE\fP
A local variable that defaults to \fBecos.ecc\fP\&.  If eCos configuration file
has a different name, adjust this variable before calling the
\fBecos_add_executable()\fP\&.
.UNINDENT
.SS Examples
.sp
The following example demonstrates defining an eCos executable target in a
project that follows the common eCos convention of listing source files in
a \fBProjectSources.txt\fP file, located one directory above the current
\fBCMakeLists.txt\fP:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(UseEcos)

# Add the eCos include directories.
ecos_add_include_directories()

# Include the file with the eCos sources list. This file, for example, defines
# a list of eCos sources:
#   set(sources file_1.cxx file_2.cxx file_3.cxx)
include(../ProjectSources.txt)

# When using such directory structure, relative source paths must be adjusted:
ecos_adjust_directory(adjusted_sources ${sources})

# Create eCos executable.
ecos_add_executable(ecos_app ${adjusted_sources})
.EE
.UNINDENT
.UNINDENT
.SS UseJava
.sp
This file provides support for \fBJava\fP\&.  It is assumed that
\fI\%FindJava\fP has already been loaded.  See \fI\%FindJava\fP for
information on how to load Java into your CMake project.
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\fI\%Creating and Installing JARS\fP
  \fI\%add_jar\fP (<target_name> [SOURCES] <source1> [<source2>...] ...)
  \fI\%install_jar\fP (<target_name> DESTINATION <destination> [COMPONENT <component>])
  \fI\%install_jni_symlink\fP (<target_name> DESTINATION <destination> [COMPONENT <component>])

\fI\%Header Generation\fP
  \fI\%create_javah\fP ((TARGET <target> | GENERATED_FILES <VAR>) CLASSES <class>... ...)

\fI\%Exporting JAR Targets\fP
  \fI\%install_jar_exports\fP (TARGETS <jars>... FILE <filename> DESTINATION <destination> ...)
  \fI\%export_jars\fP (TARGETS <jars>... [NAMESPACE <namespace>] FILE <filename>)

\fI\%Finding JARs\fP
  \fI\%find_jar\fP (<VAR> NAMES <name1> [<name2>...] [PATHS <path1> [<path2>... ENV <var>]] ...)

\fI\%Creating Java Documentation\fP
  \fI\%create_javadoc\fP (<VAR> (PACKAGES <pkg1> [<pkg2>...] | FILES <file1> [<file2>...]) ...)
.EE
.UNINDENT
.UNINDENT
.SS Creating And Installing JARs
.INDENT 0.0
.TP
.B add_jar
Creates a jar file containing java objects and, optionally, resources:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_jar(<target_name>
        [SOURCES] <source1> [<source2>...] [<resource1>...]
        [RESOURCES NAMESPACE <ns1> <resource1>... [NAMESPACE <nsX> <resourceX>...]... ]
        [INCLUDE_JARS <jar1> [<jar2>...]]
        [ENTRY_POINT <entry>]
        [VERSION <version>]
        [MANIFEST <manifest>]
        [OUTPUT_NAME <name>]
        [OUTPUT_DIR <dir>]
        [GENERATE_NATIVE_HEADERS <target>
                                 [DESTINATION (<dir>|INSTALL <dir> [BUILD <dir>])]]
        )
.EE
.UNINDENT
.UNINDENT
.sp
This command creates a \fB<target_name>.jar\fP\&.  It compiles the given
\fB<source>\fP files and adds the given \fB<resource>\fP files to
the jar file.  Source files can be java files or listing files
(prefixed by \fB@\fP).  If only resource files are given then just a jar file
is created.
.INDENT 7.0
.TP
.B \fBSOURCES\fP
Compiles the specified source files and adds the result in the jar file.
.sp
Added in version 3.4: Support for response files, prefixed by \fB@\fP\&.

.TP
.B \fBRESOURCES\fP
Added in version 3.21.

.sp
Adds the named \fB<resource>\fP files to the jar by stripping the source file
path and placing the file beneath \fB<ns>\fP within the jar.
.sp
For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
RESOURCES NAMESPACE \(dq/com/my/namespace\(dq \(dqa/path/to/resource.txt\(dq
.EE
.UNINDENT
.UNINDENT
.sp
results in a resource accessible via \fB/com/my/namespace/resource.txt\fP
within the jar.
.sp
Resources may be added without adjusting the namespace by adding them to
the list of \fBSOURCES\fP (original behavior), in this case, resource
paths must be relative to \fBCMAKE_CURRENT_SOURCE_DIR\fP\&.  Adding resources
without using the \fBRESOURCES\fP parameter in out of source builds will
almost certainly result in confusion.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Adding resources via the \fBSOURCES\fP parameter relies upon a hard\-coded
list of file extensions which are tested to determine whether they
compile (e.g. File.java). \fBSOURCES\fP files which match the extensions
are compiled. Files which do not match are treated as resources. To
include uncompiled resources matching those file extensions use
the \fBRESOURCES\fP parameter.
.UNINDENT
.UNINDENT
.TP
.B \fBINCLUDE_JARS\fP
The list of jars are added to the classpath when compiling the java sources
and also to the dependencies of the target. \fBINCLUDE_JARS\fP also accepts
other target names created by \fBadd_jar()\fP\&. For backwards compatibility,
jar files listed as sources are ignored (as they have been since the first
version of this module).
.TP
.B \fBENTRY_POINT\fP
Defines an entry point in the jar file.
.TP
.B \fBVERSION\fP
Adds a version to the target output name.
.sp
The following example will create a jar file with the name
\fBshibboleet\-1.2.0.jar\fP and will create a symlink \fBshibboleet.jar\fP
pointing to the jar with the version information.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_jar(shibboleet shibbotleet.java VERSION 1.2.0)
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBMANIFEST\fP
Defines a custom manifest for the jar.
.TP
.B \fBOUTPUT_NAME\fP
Specify a different output name for the target.
.TP
.B \fBOUTPUT_DIR\fP
Sets the directory where the jar file will be generated. If not specified,
\fI\%CMAKE_CURRENT_BINARY_DIR\fP is used as the output directory.
.TP
.B \fBGENERATE_NATIVE_HEADERS\fP
Added in version 3.11.

.sp
Generates native header files for methods declared as native. These files
provide the connective glue that allow your Java and C code to interact.
An INTERFACE target will be created for an easy usage of generated files.
Sub\-option \fBDESTINATION\fP can be used to specify the output directory for
generated header files.
.sp
This option requires, at least, version 1.8 of the JDK.
.sp
For an optimum usage of this option, it is recommended to include module
JNI before any call to \fBadd_jar()\fP\&. The produced target for native
headers can then be used to compile C/C++ sources with the
\fI\%target_link_libraries()\fP command.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(JNI)
add_jar(foo foo.java GENERATE_NATIVE_HEADERS foo\-native)
add_library(bar bar.cpp)
target_link_libraries(bar PRIVATE foo\-native)
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.20: \fBDESTINATION\fP sub\-option now supports the possibility to specify
different output directories for \fBBUILD\fP and \fBINSTALL\fP steps. If
\fBBUILD\fP directory is not specified, a default directory will be used.
.sp
To export the interface target generated by \fBGENERATE_NATIVE_HEADERS\fP
option, sub\-option \fBINSTALL\fP of \fBDESTINATION\fP is required:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_jar(foo foo.java GENERATE_NATIVE_HEADERS foo\-native
                     DESTINATION INSTALL include)
install(TARGETS foo\-native EXPORT native)
install(DIRECTORY \(dq$<TARGET_PROPERTY:foo\-native,NATIVE_HEADERS_DIRECTORY>/\(dq
        DESTINATION include)
install(EXPORT native DESTINATION /to/export NAMESPACE foo)
.EE
.UNINDENT
.UNINDENT

.UNINDENT
.sp
Some variables can be set to customize the behavior of \fBadd_jar()\fP as well
as the java compiler:
.INDENT 7.0
.TP
.B \fBCMAKE_JAVA_COMPILE_FLAGS\fP
Specify additional flags to java compiler.
.TP
.B \fBCMAKE_JAVA_INCLUDE_PATH\fP
Specify additional paths to the class path.
.TP
.B \fBCMAKE_JNI_TARGET\fP
If the target is a JNI library, sets this boolean variable to \fBTRUE\fP to
enable creation of a JNI symbolic link (see also
\fI\%install_jni_symlink()\fP).
.TP
.B \fBCMAKE_JAR_CLASSES_PREFIX\fP
If multiple jars should be produced from the same java source filetree,
to prevent the accumulation of duplicate class files in subsequent jars,
set/reset \fBCMAKE_JAR_CLASSES_PREFIX\fP prior to calling the \fBadd_jar()\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)
add_jar(foo foo.java)

set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)
add_jar(bar bar.java)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fBadd_jar()\fP function sets the following target properties on
\fB<target_name>\fP:
.INDENT 7.0
.TP
.B \fBINSTALL_FILES\fP
The files which should be installed.  This is used by
\fI\%install_jar()\fP\&.
.TP
.B \fBJNI_SYMLINK\fP
The JNI symlink which should be installed.  This is used by
\fI\%install_jni_symlink()\fP\&.
.TP
.B \fBJAR_FILE\fP
The location of the jar file so that you can include it.
.TP
.B \fBCLASSDIR\fP
The directory where the class files can be found.  For example to use them
with \fBjavah\fP\&.
.TP
.B \fBNATIVE_HEADERS_DIRECTORY\fP
Added in version 3.20.

.sp
The directory where native headers are generated. Defined when option
\fBGENERATE_NATIVE_HEADERS\fP is specified.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B install_jar
This command installs the jar file to the given destination:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
install_jar(<target_name> <destination>)
install_jar(<target_name> DESTINATION <destination> [COMPONENT <component>])
.EE
.UNINDENT
.UNINDENT
.sp
This command installs the \fB<target_name>\fP file to the given
\fB<destination>\fP\&.  It should be called in the same scope as
\fI\%add_jar()\fP or it will fail.
.sp
Added in version 3.4: The second signature with \fBDESTINATION\fP and \fBCOMPONENT\fP options.

.INDENT 7.0
.TP
.B \fBDESTINATION\fP
Specify the directory on disk to which a file will be installed.
.TP
.B \fBCOMPONENT\fP
Specify an installation component name with which the install rule is
associated, such as \(dqruntime\(dq or \(dqdevelopment\(dq.
.UNINDENT
.sp
The \fBinstall_jar()\fP command sets the following target properties
on \fB<target_name>\fP:
.INDENT 7.0
.TP
.B \fBINSTALL_DESTINATION\fP
Holds the \fB<destination>\fP as described above, and is used by
\fI\%install_jar_exports()\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B install_jni_symlink
Installs JNI symlinks for target generated by \fI\%add_jar()\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
install_jni_symlink(<target_name> <destination>)
install_jni_symlink(<target_name> DESTINATION <destination> [COMPONENT <component>])
.EE
.UNINDENT
.UNINDENT
.sp
This command installs the \fB<target_name>\fP JNI symlinks to the given
\fB<destination>\fP\&.  It should be called in the same scope as
\fI\%add_jar()\fP or it will fail.
.sp
Added in version 3.4: The second signature with \fBDESTINATION\fP and \fBCOMPONENT\fP options.

.INDENT 7.0
.TP
.B \fBDESTINATION\fP
Specify the directory on disk to which a file will be installed.
.TP
.B \fBCOMPONENT\fP
Specify an installation component name with which the install rule is
associated, such as \(dqruntime\(dq or \(dqdevelopment\(dq.
.UNINDENT
.sp
Utilize the following commands to create a JNI symbolic link:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set(CMAKE_JNI_TARGET TRUE)
add_jar(shibboleet shibbotleet.java VERSION 1.2.0)
install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)
install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS Header Generation
.INDENT 0.0
.TP
.B create_javah
Added in version 3.4.

.sp
Generates C header files for java classes:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
create_javah(TARGET <target> | GENERATED_FILES <VAR>
             CLASSES <class>...
             [CLASSPATH <classpath>...]
             [DEPENDS <depend>...]
             [OUTPUT_NAME <path>|OUTPUT_DIR <path>]
             )
.EE
.UNINDENT
.UNINDENT
.sp
Deprecated since version 3.11: This command will no longer be supported starting with version 10 of the JDK
due to the \X'tty: link https://openjdk.org/jeps/313'\fI\%suppression of javah tool\fP\X'tty: link'\&.
The \fI\%add_jar(GENERATE_NATIVE_HEADERS)\fP command should be
used instead.

.sp
Create C header files from java classes. These files provide the connective
glue that allow your Java and C code to interact.
.sp
There are two main signatures for \fBcreate_javah()\fP\&.  The first signature
returns generated files through variable specified by the \fBGENERATED_FILES\fP
option.  For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
create_javah(GENERATED_FILES files_headers
  CLASSES org.cmake.HelloWorld
  CLASSPATH hello.jar
)
.EE
.UNINDENT
.UNINDENT
.sp
The second signature for \fBcreate_javah()\fP creates a target which
encapsulates header files generation. E.g.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
create_javah(TARGET target_headers
  CLASSES org.cmake.HelloWorld
  CLASSPATH hello.jar
)
.EE
.UNINDENT
.UNINDENT
.sp
Both signatures share same options.
.INDENT 7.0
.TP
.B \fBCLASSES\fP
Specifies Java classes used to generate headers.
.TP
.B \fBCLASSPATH\fP
Specifies various paths to look up classes. Here \fB\&.class\fP files, jar
files or targets created by command add_jar can be used.
.TP
.B \fBDEPENDS\fP
Targets on which the javah target depends.
.TP
.B \fBOUTPUT_NAME\fP
Concatenates the resulting header files for all the classes listed by
option \fBCLASSES\fP into \fB<path>\fP\&.  Same behavior as option \fB\-o\fP of
\fBjavah\fP tool.
.TP
.B \fBOUTPUT_DIR\fP
Sets the directory where the header files will be generated.  Same behavior
as option \fB\-d\fP of \fBjavah\fP tool.  If not specified,
\fI\%CMAKE_CURRENT_BINARY_DIR\fP is used as the output directory.
.UNINDENT
.UNINDENT
.SS Exporting JAR Targets
.INDENT 0.0
.TP
.B install_jar_exports
Added in version 3.7.

.sp
Installs a target export file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
install_jar_exports(TARGETS <jars>...
                    [NAMESPACE <namespace>]
                    FILE <filename>
                    DESTINATION <destination> [COMPONENT <component>])
.EE
.UNINDENT
.UNINDENT
.sp
This command installs a target export file \fB<filename>\fP for the named jar
targets to the given \fB<destination>\fP directory.  Its function is similar to
that of \fI\%install(EXPORT)\fP\&.
.INDENT 7.0
.TP
.B \fBTARGETS\fP
List of targets created by \fI\%add_jar()\fP command.
.TP
.B \fBNAMESPACE\fP
Added in version 3.9.

.sp
The \fB<namespace>\fP value will be prepend to the target names as they are
written to the import file.
.TP
.B \fBFILE\fP
Specify name of the export file.
.TP
.B \fBDESTINATION\fP
Specify the directory on disk to which a file will be installed.
.TP
.B \fBCOMPONENT\fP
Specify an installation component name with which the install rule is
associated, such as \(dqruntime\(dq or \(dqdevelopment\(dq.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B export_jars
Added in version 3.7.

.sp
Writes a target export file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
export_jars(TARGETS <jars>...
            [NAMESPACE <namespace>]
            FILE <filename>)
.EE
.UNINDENT
.UNINDENT
.sp
This command writes a target export file \fB<filename>\fP for the named \fB<jars>\fP
targets.  Its function is similar to that of \fI\%export()\fP\&.
.INDENT 7.0
.TP
.B \fBTARGETS\fP
List of targets created by \fI\%add_jar()\fP command.
.TP
.B \fBNAMESPACE\fP
Added in version 3.9.

.sp
The \fB<namespace>\fP value will be prepend to the target names as they are
written to the import file.
.TP
.B \fBFILE\fP
Specify name of the export file.
.UNINDENT
.UNINDENT
.SS Finding JARs
.INDENT 0.0
.TP
.B find_jar
Finds the specified jar file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_jar(<VAR>
         <name> | NAMES <name1> [<name2>...]
         [PATHS <path1> [<path2>... ENV <var>]]
         [VERSIONS <version1> [<version2>]]
         [DOC \(dqcache documentation string\(dq]
        )
.EE
.UNINDENT
.UNINDENT
.sp
This command is used to find a full path to the named jar.  A cache
entry named by \fB<VAR>\fP is created to store the result of this command.
If the full path to a jar is found the result is stored in the
variable and the search will not repeated unless the variable is
cleared.  If nothing is found, the result will be \fB<VAR>\-NOTFOUND\fP, and
the search will be attempted again next time \fBfind_jar()\fP is invoked with
the same variable.
.INDENT 7.0
.TP
.B \fBNAMES\fP
Specify one or more possible names for the jar file.
.TP
.B \fBPATHS\fP
Specify directories to search in addition to the default locations.
The \fBENV\fP var sub\-option reads paths from a system environment variable.
.TP
.B \fBVERSIONS\fP
Specify jar versions.
.TP
.B \fBDOC\fP
Specify the documentation string for the \fB<VAR>\fP cache entry.
.UNINDENT
.UNINDENT
.SS Creating Java Documentation
.INDENT 0.0
.TP
.B create_javadoc
Creates java documentation based on files and packages:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
create_javadoc(<VAR>
               (PACKAGES <pkg1> [<pkg2>...] | FILES <file1> [<file2>...])
               [SOURCEPATH <sourcepath>]
               [CLASSPATH <classpath>]
               [INSTALLPATH <install path>]
               [DOCTITLE <the documentation title>]
               [WINDOWTITLE <the title of the document>]
               [AUTHOR (TRUE|FALSE)]
               [USE (TRUE|FALSE)]
               [VERSION (TRUE|FALSE)]
               )
.EE
.UNINDENT
.UNINDENT
.sp
The \fBcreate_javadoc()\fP command can be used to create java documentation.
There are two main signatures for \fBcreate_javadoc()\fP\&.
.sp
The first signature works with package names on a path with source files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
create_javadoc(my_example_doc
               PACKAGES com.example.foo com.example.bar
               SOURCEPATH \(dq${CMAKE_CURRENT_SOURCE_DIR}\(dq
               CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}
               WINDOWTITLE \(dqMy example\(dq
               DOCTITLE \(dq<h1>My example</h1>\(dq
               AUTHOR TRUE
               USE TRUE
               VERSION TRUE
              )
.EE
.UNINDENT
.UNINDENT
.sp
The second signature for \fBcreate_javadoc()\fP works on a given list of files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
create_javadoc(my_example_doc
               FILES java/A.java java/B.java
               CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}
               WINDOWTITLE \(dqMy example\(dq
               DOCTITLE \(dq<h1>My example</h1>\(dq
               AUTHOR TRUE
               USE TRUE
               VERSION TRUE
              )
.EE
.UNINDENT
.UNINDENT
.sp
Both signatures share most of the options. For more details please read the
javadoc manpage.
.INDENT 7.0
.TP
.B \fBPACKAGES\fP
Specify java packages.
.TP
.B \fBFILES\fP
Specify java source files. If relative paths are specified, they are
relative to \fI\%CMAKE_CURRENT_SOURCE_DIR\fP\&.
.TP
.B \fBSOURCEPATH\fP
Specify the directory where to look for packages. By default,
\fI\%CMAKE_CURRENT_SOURCE_DIR\fP directory is used.
.TP
.B \fBCLASSPATH\fP
Specify where to find user class files. Same behavior as option
\fB\-classpath\fP of \fBjavadoc\fP tool.
.TP
.B \fBINSTALLPATH\fP
Specify where to install the java documentation. If you specified, the
documentation will be installed to
\fB${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>\fP\&.
.TP
.B \fBDOCTITLE\fP
Specify the title to place near the top of the overview summary file.
Same behavior as option \fB\-doctitle\fP of \fBjavadoc\fP tool.
.TP
.B \fBWINDOWTITLE\fP
Specify the title to be placed in the HTML \fB<title>\fP tag. Same behavior
as option \fB\-windowtitle\fP of \fBjavadoc\fP tool.
.TP
.B \fBAUTHOR\fP
When value \fBTRUE\fP is specified, includes the \fB@author\fP text in the
generated docs. Same behavior as option  \fB\-author\fP of \fBjavadoc\fP tool.
.TP
.B \fBUSE\fP
When value \fBTRUE\fP is specified, creates class and package usage pages.
Includes one Use page for each documented class and package. Same behavior
as option \fB\-use\fP of \fBjavadoc\fP tool.
.TP
.B \fBVERSION\fP
When value \fBTRUE\fP is specified, includes the version text in the
generated docs. Same behavior as option \fB\-version\fP of \fBjavadoc\fP tool.
.UNINDENT
.UNINDENT
.SS UseSWIG
.sp
This file provides support for \fBSWIG\fP\&. It is assumed that \fI\%FindSWIG\fP
module has already been loaded.
.SS CMake Commands
.sp
The following command is defined for use with \fBSWIG\fP:
.INDENT 0.0
.TP
.B swig_add_library
Added in version 3.8.

.sp
Define swig module with given name and specified language:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
swig_add_library(<name>
                 [TYPE <SHARED|MODULE|STATIC|USE_BUILD_SHARED_LIBS>]
                 LANGUAGE <language>
                 [NO_PROXY]
                 [OUTPUT_DIR <directory>]
                 [OUTFILE_DIR <directory>]
                 SOURCES <file>...
                )
.EE
.UNINDENT
.UNINDENT
.sp
Targets created with the \fBswig_add_library\fP command have the same
capabilities as targets created with the \fI\%add_library()\fP command, so
those targets can be used with any command expecting a target (e.g.
\fI\%target_link_libraries()\fP).
.sp
Changed in version 3.13: This command creates a target with the specified \fB<name>\fP when
policy \fI\%CMP0078\fP is set to \fBNEW\fP\&.  Otherwise, the legacy
behavior will choose a different target name and store it in the
\fBSWIG_MODULE_<name>_REAL_NAME\fP variable.

.sp
Changed in version 3.15: Alternate library name (set with the \fI\%OUTPUT_NAME\fP property,
for example) will be passed on to \fBPython\fP and \fBCSharp\fP wrapper
libraries.

.sp
Changed in version 3.21: Generated library use standard naming conventions for \fBCSharp\fP language
when policy \fI\%CMP0122\fP is set to \fBNEW\fP\&. Otherwise, the legacy
behavior is applied.

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
For multi\-config generators, this module does not support
configuration\-specific files generated by \fBSWIG\fP\&. All build
configurations must result in the same generated source file.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
For \fI\%Makefile Generators\fP, if, for some sources, the
\fBUSE_SWIG_DEPENDENCIES\fP property is \fBFALSE\fP, \fBswig_add_library\fP does
not track file dependencies, so depending on the \fB<name>_swig_compilation\fP
custom target is required for targets which require the \fBswig\fP\-generated
files to exist. Other generators may depend on the source files that would
be generated by SWIG.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fBTYPE\fP
\fBSHARED\fP, \fBMODULE\fP and \fBSTATIC\fP have the same semantic as for the
\fI\%add_library()\fP command. If \fBUSE_BUILD_SHARED_LIBS\fP is specified,
the library type will be \fBSTATIC\fP or \fBSHARED\fP based on whether the
current value of the \fI\%BUILD_SHARED_LIBS\fP variable is \fBON\fP\&. If
no type is specified, \fBMODULE\fP will be used.
.TP
.B \fBLANGUAGE\fP
Specify the target language.
.sp
Added in version 3.1: Go and Lua language support.

.sp
Added in version 3.2: R language support.

.sp
Added in version 3.18: Fortran language support.

.TP
.B \fBNO_PROXY\fP
Added in version 3.12.

.sp
Prevent the generation of the wrapper layer (swig \fB\-noproxy\fP option).
.TP
.B \fBOUTPUT_DIR\fP
Added in version 3.12.

.sp
Specify where to write the language specific files (swig \fB\-outdir\fP
option). If not given, the \fBCMAKE_SWIG_OUTDIR\fP variable will be used.
If neither is specified, the default depends on the value of the
\fBUseSWIG_MODULE_VERSION\fP variable as follows:
.INDENT 7.0
.IP \(bu 2
If \fBUseSWIG_MODULE_VERSION\fP is 1 or is undefined, output is written to
the \fI\%CMAKE_CURRENT_BINARY_DIR\fP directory.
.IP \(bu 2
If \fBUseSWIG_MODULE_VERSION\fP is 2, a dedicated directory will be used.
The path of this directory can be retrieved from the
\fBSWIG_SUPPORT_FILES_DIRECTORY\fP target property.
.UNINDENT
.TP
.B \fBOUTFILE_DIR\fP
Added in version 3.12.

.sp
Specify an output directory name where the generated source file will be
placed (swig \fB\-o\fP option). If not specified, the \fBSWIG_OUTFILE_DIR\fP
variable will be used. If neither is specified, \fBOUTPUT_DIR\fP or
\fBCMAKE_SWIG_OUTDIR\fP is used instead.
.TP
.B \fBSOURCES\fP
List of sources for the library. Files with extension \fB\&.i\fP will be
identified as sources for the \fBSWIG\fP tool. Other files will be handled in
the standard way.
.sp
Added in version 3.14: This behavior can be overridden by specifying the variable
\fBSWIG_SOURCE_FILE_EXTENSIONS\fP\&.

.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If \fBUseSWIG_MODULE_VERSION\fP is set to 2, it is \fBstrongly\fP recommended
to use a dedicated directory unique to the target when either the
\fBOUTPUT_DIR\fP option or the \fBCMAKE_SWIG_OUTDIR\fP variable are specified.
The output directory contents are erased as part of the target build, so
to prevent interference between targets or losing other important files,
each target should have its own dedicated output directory.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Properties on Source Files
.sp
Source file properties on module files \fBmust\fP be set before the invocation
of the \fBswig_add_library\fP command to specify special behavior of SWIG and
ensure generated files will receive the required settings.
.INDENT 0.0
.TP
.B \fBCPLUSPLUS\fP
Call SWIG in c++ mode.  For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_property(SOURCE mymod.i PROPERTY CPLUSPLUS ON)
swig_add_library(mymod LANGUAGE python SOURCES mymod.i)
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBSWIG_FLAGS\fP
Deprecated since version 3.12: Replaced with the fine\-grained properties that follow.

.sp
Pass custom flags to the SWIG executable.
.TP
.B \fBINCLUDE_DIRECTORIES\fP, \fBCOMPILE_DEFINITIONS\fP and \fBCOMPILE_OPTIONS\fP
Added in version 3.12.

.sp
Add custom flags to SWIG compiler and have same semantic as properties
\fI\%INCLUDE_DIRECTORIES\fP, \fI\%COMPILE_DEFINITIONS\fP and
\fI\%COMPILE_OPTIONS\fP\&.
.TP
.B \fBUSE_TARGET_INCLUDE_DIRECTORIES\fP
Added in version 3.13.

.sp
If set to \fBTRUE\fP, contents of target property
\fI\%INCLUDE_DIRECTORIES\fP will be forwarded to \fBSWIG\fP compiler.
If set to \fBFALSE\fP target property \fI\%INCLUDE_DIRECTORIES\fP will be
ignored. If not set, target property \fBSWIG_USE_TARGET_INCLUDE_DIRECTORIES\fP
will be considered.
.TP
.B \fBGENERATED_INCLUDE_DIRECTORIES\fP, \fBGENERATED_COMPILE_DEFINITIONS\fP and \fBGENERATED_COMPILE_OPTIONS\fP
Added in version 3.12.

.sp
Add custom flags to the C/C++ generated source. They will fill, respectively,
properties \fI\%INCLUDE_DIRECTORIES\fP, \fI\%COMPILE_DEFINITIONS\fP and
\fI\%COMPILE_OPTIONS\fP of generated C/C++ file.
.TP
.B \fBDEPENDS\fP
Added in version 3.12.

.sp
Specify additional dependencies to the source file.
.TP
.B \fBUSE_SWIG_DEPENDENCIES\fP
Added in version 3.20.

.sp
If set to \fBTRUE\fP, implicit dependencies are generated by the \fBswig\fP tool
itself. This property is only meaningful for
\fI\%Makefile\fP,
\fI\%Ninja\fP, \fI\%Xcode\fP, and
\fI\%Visual Studio\fP generators.
Default value is \fBFALSE\fP\&.
.sp
Added in version 3.21: Added the support of \fI\%Xcode\fP generator.

.sp
Added in version 3.22: Added the support of \fI\%Visual Studio Generators\fP\&.

.TP
.B \fBSWIG_MODULE_NAME\fP
Specify the actual import name of the module in the target language.
This is required if it cannot be scanned automatically from source
or different from the module file basename.  For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set_property(SOURCE mymod.i PROPERTY SWIG_MODULE_NAME mymod_realname)
.EE
.UNINDENT
.UNINDENT
.sp
Changed in version 3.14: If policy \fI\%CMP0086\fP is set to \fBNEW\fP, \fB\-module <module_name>\fP
is passed to \fBSWIG\fP compiler.

.TP
.B \fBOUTPUT_DIR\fP
Added in version 3.19.

.sp
Specify where to write the language specific files (swig \fB\-outdir\fP option)
for the considered source file. If not specified, the other ways to define
the output directory applies (see \fBOUTPUT_DIR\fP option of
\fBswig_add_library()\fP command).
.TP
.B \fBOUTFILE_DIR\fP
Added in version 3.19.

.sp
Specify an output directory where the generated source file will be placed
(swig \fB\-o\fP option) for the considered source file. If not specified,
\fBOUTPUT_DIR\fP source property will be used. If neither are specified, the
other ways to define output file directory applies (see \fBOUTFILE_DIR\fP
option of \fBswig_add_library()\fP command).
.UNINDENT
.SS Properties on Targets
.sp
Target library properties can be set to apply same configuration to all SWIG
input files.
.INDENT 0.0
.TP
.B \fBSWIG_INCLUDE_DIRECTORIES\fP, \fBSWIG_COMPILE_DEFINITIONS\fP and \fBSWIG_COMPILE_OPTIONS\fP
Added in version 3.12.

.sp
These properties will be applied to all SWIG input files and have same
semantic as target properties \fI\%INCLUDE_DIRECTORIES\fP,
\fI\%COMPILE_DEFINITIONS\fP and \fI\%COMPILE_OPTIONS\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set (UseSWIG_TARGET_NAME_PREFERENCE STANDARD)
swig_add_library(mymod LANGUAGE python SOURCES mymod.i)
set_property(TARGET mymod PROPERTY SWIG_COMPILE_DEFINITIONS MY_DEF1 MY_DEF2)
set_property(TARGET mymod PROPERTY SWIG_COMPILE_OPTIONS \-bla \-blb)
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBSWIG_USE_TARGET_INCLUDE_DIRECTORIES\fP
Added in version 3.13.

.sp
If set to \fBTRUE\fP, contents of target property
\fI\%INCLUDE_DIRECTORIES\fP will be forwarded to \fBSWIG\fP compiler.
If set to \fBFALSE\fP or not defined, target property
\fI\%INCLUDE_DIRECTORIES\fP will be ignored. This behavior can be
overridden by specifying source property \fBUSE_TARGET_INCLUDE_DIRECTORIES\fP\&.
.TP
.B \fBSWIG_GENERATED_INCLUDE_DIRECTORIES\fP, \fBSWIG_GENERATED_COMPILE_DEFINITIONS\fP and \fBSWIG_GENERATED_COMPILE_OPTIONS\fP
Added in version 3.12.

.sp
These properties will populate, respectively, properties
\fI\%INCLUDE_DIRECTORIES\fP, \fI\%COMPILE_DEFINITIONS\fP and
\fI\%COMPILE_FLAGS\fP of all generated C/C++ files.
.TP
.B \fBSWIG_DEPENDS\fP
Added in version 3.12.

.sp
Add dependencies to all SWIG input files.
.UNINDENT
.SS Read\-only Target Properties
.sp
The following target properties are output properties and can be used to get
information about support files generated by \fBSWIG\fP interface compilation.
.INDENT 0.0
.TP
.B \fBSWIG_SUPPORT_FILES\fP
Added in version 3.12.

.sp
This output property list of wrapper files generated during SWIG compilation.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set (UseSWIG_TARGET_NAME_PREFERENCE STANDARD)
swig_add_library(mymod LANGUAGE python SOURCES mymod.i)
get_property(support_files TARGET mymod PROPERTY SWIG_SUPPORT_FILES)
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Only most principal support files are listed. In case some advanced
features of \fBSWIG\fP are used (for example \fB%template\fP), associated
support files may not be listed. Prefer to use the
\fBSWIG_SUPPORT_FILES_DIRECTORY\fP property to handle support files.
.UNINDENT
.UNINDENT
.TP
.B \fBSWIG_SUPPORT_FILES_DIRECTORY\fP
Added in version 3.12.

.sp
This output property specifies the directory where support files will be
generated.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When source property \fBOUTPUT_DIR\fP is defined, multiple directories can be
specified as part of \fBSWIG_SUPPORT_FILES_DIRECTORY\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.SS CMake Variables
.sp
Some variables can be set to customize the behavior of \fBswig_add_library\fP
as well as \fBSWIG\fP:
.INDENT 0.0
.TP
.B \fBUseSWIG_MODULE_VERSION\fP
Added in version 3.12.

.sp
Specify different behaviors for \fBUseSWIG\fP module.
.INDENT 7.0
.IP \(bu 2
Set to 1 or undefined: Legacy behavior is applied.
.IP \(bu 2
Set to 2: A new strategy is applied regarding support files: the output
directory of support files is erased before \fBSWIG\fP interface compilation.
.UNINDENT
.TP
.B \fBCMAKE_SWIG_FLAGS\fP
Add flags to all swig calls.
.TP
.B \fBCMAKE_SWIG_OUTDIR\fP
Specify where to write the language specific files (swig \fB\-outdir\fP option).
.TP
.B \fBSWIG_OUTFILE_DIR\fP
Added in version 3.8.

.sp
Specify an output directory name where the generated source file will be
placed.  If not specified, \fBCMAKE_SWIG_OUTDIR\fP is used.
.TP
.B \fBSWIG_MODULE_<name>_EXTRA_DEPS\fP
Specify extra dependencies for the generated module for \fB<name>\fP\&.
.TP
.B \fBSWIG_SOURCE_FILE_EXTENSIONS\fP
Added in version 3.14.

.sp
Specify a list of source file extensions to override the default
behavior of considering only \fB\&.i\fP files as sources for the \fBSWIG\fP
tool. For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set(SWIG_SOURCE_FILE_EXTENSIONS \(dq.i\(dq \(dq.swg\(dq)
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBSWIG_USE_SWIG_DEPENDENCIES\fP
Added in version 3.20.

.sp
If set to \fBTRUE\fP, implicit dependencies are generated by the \fBswig\fP tool
itself. This variable is only meaningful for
\fI\%Makefile\fP,
\fI\%Ninja\fP, \fI\%Xcode\fP, and
\fI\%Visual Studio\fP generators.
Default value is \fBFALSE\fP\&.
.sp
Source file property \fBUSE_SWIG_DEPENDENCIES\fP, if not defined, will be
initialized with the value of this variable.
.sp
Added in version 3.21: Added the support of \fI\%Xcode\fP generator.

.sp
Added in version 3.22: Added the support of \fI\%Visual Studio Generators\fP\&.

.UNINDENT
.SS Deprecated Commands
.INDENT 0.0
.TP
.B swig_link_libraries
Deprecated since version 3.13: Use \fI\%target_link_libraries()\fP with the standard target name,
or with \fB${SWIG_MODULE_<name>_REAL_NAME}\fP for legacy target naming.

.sp
Link libraries to swig module:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
swig_link_libraries(<name> <item>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command has same capabilities as \fI\%target_link_libraries()\fP
command.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When policy \fI\%CMP0078\fP is set to \fBNEW\fP,
\fI\%swig_add_library()\fP creates a standard target with the
specified \fB<name>\fP and \fI\%target_link_libraries()\fP must be used
instead of this command.
.sp
With the legacy behavior (when \fI\%CMP0078\fP is set to \fBOLD\fP and
the \fBUseSWIG_TARGET_NAME_PREFERENCE\fP variable is set to \fB\(dqLEGACY\(dq\fP,
or in CMake versions prior to 3.12), it is preferable to use
\fBtarget_link_libraries(${SWIG_MODULE_<name>_REAL_NAME} ...)\fP
instead of this command.
.UNINDENT
.UNINDENT
.UNINDENT
.SS UsewxWidgets
.sp
This module calls \fI\%include_directories()\fP and
\fI\%link_directories()\fP, sets compile definitions for the current directory
and appends some compile flags to use wxWidgets library after calling the
\fI\%find_package(wxWidgets)\fP\&.
.SS Examples
.sp
Include \fBUsewxWidgets\fP module in project\(aqs \fBCMakeLists.txt\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Note that for MinGW users the order of libraries is important.
find_package(wxWidgets REQUIRED net gl core base)

# Above also sets the wxWidgets_USE_FILE variable that points to this module.
include(${wxWidgets_USE_FILE})

# Link wxWidgets libraries for each dependent executable/library target.
target_link_libraries(<ProjectTarget> ${wxWidgets_LIBRARIES})
.EE
.UNINDENT
.UNINDENT
.sp
As of CMake 3.27, a better approach is to link only the
\fI\%wxWidgets::wxWidgets\fP \fBIMPORTED\fP target to specific
targets that require it, rather than including this module. Imported targets
provide better control of the package usage properties, such as include
directories and compile flags, by applying them only to the targets they are
linked to, avoiding unnecessary propagation to all targets in the current
directory.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# CMakeLists.txt
find_package(wxWidgets)

# Link the imported target for each dependent executable/library target.
target_link_libraries(<ProjectTarget> wxWidgets::wxWidgets)
.EE
.UNINDENT
.UNINDENT
.SH FIND MODULES
.sp
These modules search for third\-party software.
They are normally called through the \fI\%find_package()\fP command.
.SS FindALSA
.sp
Finds the Advanced Linux Sound Architecture (ALSA) library (\fBasound\fP).
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBALSA::ALSA\fP
Added in version 3.12.

.sp
Target encapsulating the ALSA library usage requirements.  This target is
available only if ALSA is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBALSA_FOUND\fP
Boolean indicating whether the ALSA library is found.
.TP
.B \fBALSA_LIBRARIES\fP
List of libraries needed for linking to use ALSA library.
.TP
.B \fBALSA_INCLUDE_DIRS\fP
Include directories containing headers needed to use ALSA library.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBALSA_INCLUDE_DIR\fP
The ALSA include directory.
.TP
.B \fBALSA_LIBRARY\fP
The absolute path of the asound library.
.UNINDENT
.SS Examples
.sp
Finding the ALSA library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ALSA)
target_link_libraries(project_target PRIVATE ALSA::ALSA)
.EE
.UNINDENT
.UNINDENT
.SS FindArmadillo
.sp
Finds the Armadillo C++ library.  Armadillo is a library for linear algebra and
scientific computing.
.sp
Added in version 3.18: Support for linking wrapped libraries directly (see the
\fBARMA_DONT_USE_WRAPPER\fP preprocessor macro that needs to be defined before
including the \fB<armadillo>\fP header).

.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBArmadillo_FOUND\fP
Set to true if the library is found.  For backward compatibility, the
\fBARMADILLO_FOUND\fP variable is also set to the same value.
.TP
.B \fBARMADILLO_INCLUDE_DIRS\fP
List of required include directories.
.TP
.B \fBARMADILLO_LIBRARIES\fP
List of libraries to be linked.
.TP
.B \fBARMADILLO_VERSION_STRING\fP
Version as a string (ex: \fB1.0.4\fP).
.TP
.B \fBARMADILLO_VERSION_MAJOR\fP
Major version number.
.TP
.B \fBARMADILLO_VERSION_MINOR\fP
Minor version number.
.TP
.B \fBARMADILLO_VERSION_PATCH\fP
Patch version number.
.TP
.B \fBARMADILLO_VERSION_NAME\fP
Name of the version (ex: \fBAntipodean Antileech\fP).
.UNINDENT
.SS Examples
.sp
Using Armadillo:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Armadillo REQUIRED)

if(Armadillo_FOUND AND NOT TARGET Armadillo::Armadillo)
  add_library(Armadillo::Armadillo INTERFACE IMPORTED)
  set_target_properties(
    Armadillo::Armadillo
    PROPERTIES
      INTERFACE_LINK_LIBRARIES \(dq${ARMADILLO_LIBRARIES}\(dq
      INTERFACE_INCLUDE_DIRECTORIES \(dq${ARMADILLO_INCLUDE_DIRS}\(dq
  )
endif()

add_executable(foo foo.cc)
target_link_libraries(foo PRIVATE Armadillo::Armadillo)
.EE
.UNINDENT
.UNINDENT
.SS FindASPELL
.sp
Finds the GNU Aspell spell checker library.
.SS Components
.sp
This module supports the following components:
.INDENT 0.0
.TP
.B \fBASPELL\fP
Added in version 4.1.

.sp
Finds the Aspell library and its include paths.
.TP
.B \fBExecutable\fP
Added in version 4.1.

.sp
Finds the Aspell command\-line interactive spell checker executable.
.UNINDENT
.sp
Components can be specified using the standard CMake syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ASPELL [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
If no \fBCOMPONENTS\fP are specified, the module searches for both the \fBASPELL\fP
and \fBExecutable\fP components by default.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP:
.INDENT 0.0
.TP
.B \fBASPELL::ASPELL\fP
Added in version 4.1.

.sp
Target encapsulating the Aspell library usage requirements.  It is available
only when the \fBASPELL\fP component is found.
.TP
.B \fBASPELL::Executable\fP
Added in version 4.1.

.sp
Target encapsulating the Aspell command\-line spell checker executable.  It is
available only when the \fBExecutable\fP component is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBASPELL_FOUND\fP
Boolean indicating whether the requested Aspell components have been found.
.TP
.B \fBASPELL_VERSION\fP
Added in version 4.1.

.sp
Version string of the found Aspell if any.  It may be only determined if the
\fBExecutable\fP component is found.  If version isn\(aqt determined, version value
is not set.
.TP
.B \fBASPELL_INCLUDE_DIRS\fP
Added in version 4.1.

.sp
Include directories needed to use Aspell.  They are available when the
\fBASPELL\fP component is found.
.sp
The Aspell library may also provide a backward\-compatible interface for Pspell
via the \fBpspell.h\fP header file.  If such an interface is found, it is also
added to the list of include directories.
.TP
.B \fBASPELL_LIBRARIES\fP
Libraries needed to link to Aspell.  They are available when the \fBASPELL\fP
component is found.
.sp
Changed in version 4.1: This variable is now set as a regular result variable instead of being a
cache variable.

.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBASPELL_INCLUDE_DIR\fP
The directory containing the \fBaspell.h\fP header file when using the
\fBExecutable\fP component.
.TP
.B \fBASPELL_LIBRARY\fP
Added in version 4.1.

.sp
The path to the Aspell library when using the \fBASPELL\fP component.
.TP
.B \fBASPELL_EXECUTABLE\fP
The path to the \fBaspell\fP command\-line spell checker program when using the
\fBExecutable\fP component.
.UNINDENT
.SS Examples
.sp
Finding the Aspell library with CMake 4.1 or later and linking it to a project
target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ASPELL COMPONENTS ASPELL)
target_link_libraries(project_target PRIVATE ASPELL::ASPELL)
.EE
.UNINDENT
.UNINDENT
.sp
When writing backward\-compatible code that supports CMake 4.0 and earlier, a
local imported target can be defined directly in the project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ASPELL COMPONENTS ASPELL)
if(ASPELL_FOUND AND NOT TARGET ASPELL::ASPELL)
  add_library(ASPELL::ASPELL INTERFACE IMPORTED)
  set_target_properties(
    ASPELL::ASPELL
    PROPERTIES
      INTERFACE_LINK_LIBRARIES \(dq${ASPELL_LIBRARIES}\(dq
      INTERFACE_INCLUDE_DIRECTORIES \(dq${ASPELL_INCLUDE_DIR}\(dq
  )
endif()
target_link_libraries(project_target PRIVATE ASPELL::ASPELL)
.EE
.UNINDENT
.UNINDENT
.sp
Example, how to execute the \fBaspell\fP command\-line spell checker in a project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ASPELL COMPONENTS Executable)
execute_process(COMMAND ${ASPELL_EXECUTABLE} \-\-help)
.EE
.UNINDENT
.UNINDENT
.SS FindAVIFile
.sp
Finds \X'tty: link https://avifile.sourceforge.net/'\fI\%AVIFile\fP\X'tty: link' library and include paths.
.sp
AVIFile is a set of libraries for i386 machines to use various AVI codecs.
Support is limited beyond Linux.  Windows provides native AVI support, and so
doesn\(aqt need this library.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBAVIFile_FOUND\fP
True if AVIFile is found.  For backward compatibility, the \fBAVIFILE_FOUND\fP
variable is also set to the same value.
.TP
.B \fBAVIFILE_LIBRARIES\fP
The libraries to link against.
.TP
.B \fBAVIFILE_DEFINITIONS\fP
Definitions to use when compiling.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may be also set:
.INDENT 0.0
.TP
.B \fBAVIFILE_INCLUDE_DIR\fP
Directory containing \fBavifile.h\fP and other AVIFile headers.
.UNINDENT
.SS Examples
.sp
Finding AVIFile:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(AVIFile)
.EE
.UNINDENT
.UNINDENT
.SS FindBacktrace
.sp
Finds \X'tty: link https://man7.org/linux/man-pages/man3/backtrace.3.html'\fI\%backtrace(3)\fP\X'tty: link',
a library that provides functions for application self\-debugging.
.sp
This module checks whether \fBbacktrace(3)\fP is supported, either through the
standard C library (\fBlibc\fP), or a separate library.
.SS Imported Targets
.sp
Added in version 3.30.

.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBBacktrace::Backtrace\fP
An interface library encapsulating the usage requirements of Backtrace.  This
target is available only when Backtrace is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBBacktrace_INCLUDE_DIRS\fP
The include directories needed to use \fBbacktrace(3)\fP header.
.TP
.B \fBBacktrace_LIBRARIES\fP
The libraries (linker flags) needed to use \fBbacktrace(3)\fP, if any.
.TP
.B \fBBacktrace_FOUND\fP
Boolean indicating whether the \fBbacktrace(3)\fP support is available.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables are also available to set or use:
.INDENT 0.0
.TP
.B \fBBacktrace_HEADER\fP
The header file needed for \fBbacktrace(3)\fP\&.  This variable allows dynamic
usage of the header in the project code.  It can also be overridden by the
user.
.TP
.B \fBBacktrace_LIBRARY\fP
The external library providing backtrace, if any.
.TP
.B \fBBacktrace_INCLUDE_DIR\fP
The directory holding the \fBbacktrace(3)\fP header.
.UNINDENT
.SS Examples
.sp
Finding Backtrace and linking it to a project target as of CMake 3.30:
.sp
CMakeLists.txt
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Backtrace)
target_link_libraries(app PRIVATE Backtrace::Backtrace)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBBacktrace_HEADER\fP variable can be used, for example, in a configuration
header file created by \fI\%configure_file()\fP:
.sp
CMakeLists.txt
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(app app.c)

find_package(Backtrace)
target_link_libraries(app PRIVATE Backtrace::Backtrace)

configure_file(config.h.in config.h)
.EE
.UNINDENT
.UNINDENT
.sp
config.h.in
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#cmakedefine01 Backtrace_FOUND
#if Backtrace_FOUND
#  include <@Backtrace_HEADER@>
#endif
.EE
.UNINDENT
.UNINDENT
.sp
app.c
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include \(dqconfig.h\(dq
.EE
.UNINDENT
.UNINDENT
.sp
If the project needs to support CMake 3.29 or earlier, the imported target can
be defined manually:
.sp
CMakeLists.txt
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Backtrace)
if(Backtrace_FOUND AND NOT TARGET Backtrace::Backtrace)
  add_library(Backtrace::Backtrace INTERFACE IMPORTED)
  set_target_properties(
    Backtrace::Backtrace
    PROPERTIES
      INTERFACE_LINK_LIBRARIES \(dq${Backtrace_LIBRARIES}\(dq
      INTERFACE_INCLUDE_DIRECTORIES \(dq${Backtrace_INCLUDE_DIRS}\(dq
  )
endif()
target_link_libraries(app PRIVATE Backtrace::Backtrace)
.EE
.UNINDENT
.UNINDENT
.SS FindBISON
.sp
Finds the Bison command\-line parser generator and provides a CMake command to
generate custom build rules for using Bison:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON [<version>] ...)
.EE
.UNINDENT
.UNINDENT
.sp
Bison is a parser generator that replaced earlier Yacc (Yet Another
Compiler\-Compiler).  On Unix\-like systems, most common implementation is
GNU Bison.  On Windows, this module looks for Windows\-compatible Bison, if
installed.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBBISON_FOUND\fP
Boolean indicating whether (the requested version of) Bison is found.
.TP
.B \fBBISON_VERSION\fP
The version of Bison found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBBISON_EXECUTABLE\fP
The path to the \fBbison\fP command\-line program.
.UNINDENT
.SS Commands
.sp
This module provides the following command if \fBbison\fP is found:
.INDENT 0.0
.TP
.B bison_target
Creates a custom build rule to generate a parser file from a Yacc file using
Bison:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
bison_target(
  <name>
  <input\-yacc\-file>
  <output\-parser\-file>
  [DEFINES_FILE <header>]
  [VERBOSE [<file>]]       # The [<file>] argument is deprecated
  [REPORT_FILE <file>]
  [OPTIONS <options>...]
  [COMPILE_FLAGS <string>] # Deprecated
)
.EE
.UNINDENT
.UNINDENT
.sp
Changed in version 3.14: When policy \fI\%CMP0088\fP is set to \fBNEW\fP, \fBbison\fP runs in the
\fI\%CMAKE_CURRENT_BINARY_DIR\fP directory.

.INDENT 7.0
.TP
.B \fB<name>\fP
String used as an identifier for this command invocation.
.TP
.B \fB<input\-yacc\-file>\fP
The path to an input Yacc source file (\fB\&.y\fP).  If given as a relative
path, it will be interpreted relative to the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.TP
.B \fB<output\-parser\-file>\fP
The path of the output parser file to be generated by Bison.  If given as a
relative path, it will be interpreted relative to the current Bison working
directory.
.TP
.B \fBDEFINES_FILE <header>\fP
Added in version 3.4.

.sp
By default, Bison can generate a header file containing the list of tokens.
This option allows specifying a custom \fB<header>\fP file to be generated by
Bison.  If given as a relative path, it will be interpreted relative to the
current Bison working directory.
.TP
.B \fBVERBOSE [<file>]\fP
Enables generation of a verbose grammar and parser report.  By default, the
report file is created in the current Bison working directory and named
\fB<output\-parser\-filename>.output\fP\&.
.INDENT 7.0
.TP
.B \fB<file>\fP
Deprecated since version 3.7: Use \fBVERBOSE REPORT_FILE <file>\fP\&.

.sp
Specifies the path to which the report file should be copied.  This
argument is retained for backward compatibility and only works when the
\fB<output\-parser\-file>\fP is specified as an absolute path.
.UNINDENT
.TP
.B \fBREPORT_FILE <file>\fP
Added in version 3.7.

.sp
Used in combination with \fBVERBOSE\fP to specify a custom path for the report
output \fB<file>\fP, overriding the default location.  If given as a relative
path, it will be interpreted relative to the current Bison working
directory.
.TP
.B \fBOPTIONS <options>...\fP
Added in version 4.0.

.sp
A \fI\%semicolon\-separated list\fP of extra options
added to the \fBbison\fP command line.
.TP
.B \fBCOMPILE_FLAGS <string>\fP
Deprecated since version 4.0: Superseded by \fBOPTIONS <options>...\fP\&.

.sp
A string of space\-separated extra options added to the \fBbison\fP command
line.  A \fI\%semicolon\-separated list\fP will not
work.
.UNINDENT
.sp
Command variables
.sp
This command also defines the following variables:
.INDENT 7.0
.TP
.B \fBBISON_<name>_DEFINED\fP
Boolean indicating whether this command was successfully invoked.
.TP
.B \fBBISON_<name>_INPUT\fP
The input source file, an alias for \fB<input\-yacc\-file>\fP\&.
.TP
.B \fBBISON_<name>_OUTPUT_SOURCE\fP
The output parser file generated by \fBbison\fP\&.
.TP
.B \fBBISON_<name>_OUTPUT_HEADER\fP
The header file generated by \fBbison\fP, if any.
.TP
.B \fBBISON_<name>_OUTPUTS\fP
A list of files generated by \fBbison\fP, including the output parser file,
header file, and report file.
.TP
.B \fBBISON_<name>_OPTIONS\fP
Added in version 4.0.

.sp
A list of command\-line options used for the \fBbison\fP command.
.TP
.B \fBBISON_<name>_COMPILE_FLAGS\fP
Deprecated since version 4.0: Superseded by \fBBISON_<name>_OPTIONS\fP variable with the same value.

.sp
A list of command\-line options used for the \fBbison\fP command.
.UNINDENT
.UNINDENT
.SS Examples
.SS Examples: Finding Bison
.sp
Finding Bison:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Bison with a minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON 2.1.3)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Bison and making it required (if Bison is not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON 2.1.3 REQUIRED)
.EE
.UNINDENT
.UNINDENT
.SS Example: Generating Parser
.sp
Finding Bison and adding input Yacc source file \fBparser.y\fP to be processed by
Bison into \fBparser.cpp\fP source file with header \fBparser.h\fP at build phase:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON)

if(BISON_FOUND)
  bison_target(MyParser parser.y parser.cpp DEFINES_FILE parser.h)
endif()

add_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})
.EE
.UNINDENT
.UNINDENT
.SS Examples: Command\-line Options
.sp
Adding additional command\-line options to the \fBbison\fP executable can be passed
as a list.  For example, adding the \fB\-Wall\fP option to report all warnings, and
\fB\-\-no\-lines\fP (\fB\-l\fP) to not generate \fB#line\fP directives:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON)

if(BISON_FOUND)
  bison_target(MyParser parser.y parser.cpp OPTIONS \-Wall \-\-no\-lines)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
\fI\%Generator expressions\fP can be used in
the \fBOPTIONS <options>...\fP argument.  For example, to add the \fB\-\-debug\fP
(\fB\-t\fP) option only for the \fBDebug\fP build type:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON)

if(BISON_FOUND)
  bison_target(MyParser parser.y parser.cpp OPTIONS $<$<CONFIG:Debug>:\-t>)
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindFLEX\fP module to find Flex scanner generator.
.UNINDENT
.SS FindBLAS
.sp
Find Basic Linear Algebra Subprograms (BLAS) library
.sp
This module finds an installed Fortran library that implements the
\X'tty: link https://netlib.org/blas/'\fI\%BLAS linear\-algebra interface\fP\X'tty: link'\&.
.sp
At least one of the \fBC\fP, \fBCXX\fP, or \fBFortran\fP languages must be enabled.
.SS Input Variables
.sp
The following variables may be set to influence this module\(aqs behavior:
.INDENT 0.0
.TP
.B \fBBLA_STATIC\fP
if \fBON\fP use static linkage
.TP
.B \fBBLA_VENDOR\fP
Set to one of the \fI\%BLAS/LAPACK Vendors\fP to search for BLAS only
from the specified vendor.  If not set, all vendors are considered.
.TP
.B \fBBLA_F95\fP
if \fBON\fP tries to find the BLAS95 interfaces
.TP
.B \fBBLA_PREFER_PKGCONFIG\fP
Added in version 3.11.

.sp
if set \fBpkg\-config\fP will be used to search for a BLAS library first
and if one is found that is preferred
.TP
.B \fBBLA_PKGCONFIG_BLAS\fP
Added in version 3.25.

.sp
If set, the \fBpkg\-config\fP method will look for this module name instead of
just \fBblas\fP\&.
.TP
.B \fBBLA_SIZEOF_INTEGER\fP
Added in version 3.22.

.sp
Specify the BLAS/LAPACK library integer size:
.INDENT 7.0
.TP
.B \fB4\fP
Search for a BLAS/LAPACK with 32\-bit integer interfaces.
.TP
.B \fB8\fP
Search for a BLAS/LAPACK with 64\-bit integer interfaces.
.TP
.B \fBANY\fP
Search for any BLAS/LAPACK.
Most likely, a BLAS/LAPACK with 32\-bit integer interfaces will be found.
.UNINDENT
.TP
.B \fBBLA_THREAD\fP
Added in version 4.1.

.sp
Specify the BLAS/LAPACK threading model:
.INDENT 7.0
.TP
.B \fBSEQ\fP
Sequential model
.TP
.B \fBOMP\fP
OpenMP model
.TP
.B \fBANY\fP
Search for any BLAS/LAPACK, if both are available most likely \fBOMP\fP will
be found.
.UNINDENT
.sp
This is currently only supported by NVIDIA NVPL.
.UNINDENT
.SS Imported Targets
.sp
This module defines the following \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBBLAS::BLAS\fP
Added in version 3.18.

.sp
The libraries to use for BLAS, if found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBBLAS_FOUND\fP
library implementing the BLAS interface is found
.TP
.B \fBBLAS_LINKER_FLAGS\fP
uncached list of required linker flags (excluding \fB\-l\fP and \fB\-L\fP).
.TP
.B \fBBLAS_LIBRARIES\fP
uncached list of libraries (using full path name) to link against
to use BLAS (may be empty if compiler implicitly links BLAS)
.TP
.B \fBBLAS95_LIBRARIES\fP
uncached list of libraries (using full path name) to link against
to use BLAS95 interface
.TP
.B \fBBLAS95_FOUND\fP
library implementing the BLAS95 interface is found
.UNINDENT
.SS BLAS/LAPACK Vendors
.INDENT 0.0
.TP
.B \fBGeneric\fP
Generic reference implementation
.TP
.B \fBACML\fP, \fBACML_MP\fP, \fBACML_GPU\fP
AMD Core Math Library
.TP
.B \fBAOCL\fP, \fBAOCL_mt\fP
Added in version 3.27.

.sp
AMD Optimizing CPU Libraries
.TP
.B \fBApple\fP, \fBNAS\fP
Apple BLAS (Accelerate), and Apple NAS (vecLib)
.TP
.B \fBArm\fP, \fBArm_mp\fP, \fBArm_ilp64\fP, \fBArm_ilp64_mp\fP
Added in version 3.18.

.sp
Arm Performance Libraries
.TP
.B \fBATLAS\fP
Automatically Tuned Linear Algebra Software
.TP
.B \fBCXML\fP, \fBDXML\fP
Compaq/Digital Extended Math Library
.TP
.B \fBEML\fP, \fBEML_mt\fP
Added in version 3.20.

.sp
Elbrus Math Library
.TP
.B \fBFLAME\fP
Added in version 3.11.

.sp
BLIS Framework
.TP
.B \fBFlexiBLAS\fP
Added in version 3.19.

.TP
.B \fBFujitsu_SSL2\fP, \fBFujitsu_SSL2BLAMP\fP, \fBFujitsu_SSL2SVE\fP, \fBFujitsu_SSL2BLAMPSVE\fP
Added in version 3.20.

.sp
Fujitsu SSL2 serial and parallel blas/lapack with SVE instructions
.TP
.B \fBGoto\fP
GotoBLAS
.UNINDENT
.sp
\fBIBMESSL\fP, \fBIBMESSL_SMP\fP
.INDENT 0.0
.INDENT 3.5
IBM Engineering and Scientific Subroutine Library
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fBIntel\fP
Intel MKL 32 bit and 64 bit obsolete versions
.TP
.B \fBIntel10_32\fP
Intel MKL v10 32 bit, threaded code
.TP
.B \fBIntel10_64lp\fP
Intel MKL v10+ 64 bit, threaded code, lp64 model
.TP
.B \fBIntel10_64lp_seq\fP
Intel MKL v10+ 64 bit, sequential code, lp64 model
.TP
.B \fBIntel10_64ilp\fP
Added in version 3.13.

.sp
Intel MKL v10+ 64 bit, threaded code, ilp64 model
.TP
.B \fBIntel10_64ilp_seq\fP
Added in version 3.13.

.sp
Intel MKL v10+ 64 bit, sequential code, ilp64 model
.TP
.B \fBIntel10_64_dyn\fP
Added in version 3.17.

.sp
Intel MKL v10+ 64 bit, single dynamic library
.TP
.B \fBlibblastrampoline\fP
Added in version 3.30.

.sp
A BLAS/LAPACK demuxing library using PLT trampolines
.TP
.B \fBNVPL\fP
Added in version 4.1.

.sp
NVIDIA Performance Libraries
.TP
.B \fBNVHPC\fP
Added in version 3.21.

.sp
NVIDIA HPC SDK
.TP
.B \fBOpenBLAS\fP
Added in version 3.6.

.TP
.B \fBPhiPACK\fP
Portable High Performance ANSI C (PHiPAC)
.TP
.B \fBSCSL\fP, \fBSCSL_mp\fP
Scientific Computing Software Library
.TP
.B \fBSGIMATH\fP
SGI Scientific Mathematical Library
.TP
.B \fBSunPerf\fP
Sun Performance Library
.UNINDENT
.SS Intel MKL
.sp
To use the Intel MKL implementation of BLAS, a project must enable at least
one of the \fBC\fP or \fBCXX\fP languages.  Set \fBBLA_VENDOR\fP to an Intel MKL
variant either on the command\-line as \fB\-DBLA_VENDOR=Intel10_64lp\fP or in
project code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(BLA_VENDOR Intel10_64lp)
find_package(BLAS)
.EE
.UNINDENT
.UNINDENT
.sp
In order to build a project using Intel MKL, and end user must first
establish an Intel MKL environment:
.INDENT 0.0
.TP
.B Intel oneAPI
Source the full Intel environment script:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
\&. /opt/intel/oneapi/setvars.sh
.EE
.UNINDENT
.UNINDENT
.sp
Or, source the MKL component environment script:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
\&. /opt/intel/oneapi/mkl/latest/env/vars.sh
.EE
.UNINDENT
.UNINDENT
.TP
.B Intel Classic
Source the full Intel environment script:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
\&. /opt/intel/bin/compilervars.sh intel64
.EE
.UNINDENT
.UNINDENT
.sp
Or, source the MKL component environment script:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
\&. /opt/intel/mkl/bin/mklvars.sh intel64
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The above environment scripts set the \fBMKLROOT\fP environment variable
to the top of the MKL installation.  They also add the location of the
runtime libraries to the dynamic library loader environment variable for
your platform (e.g. \fBLD_LIBRARY_PATH\fP).  This is necessary for programs
linked against MKL to run.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
As of Intel oneAPI 2021.2, loading only the MKL component does not
make all of its dependencies available.  In particular, the \fBiomp5\fP
library must be available separately, or provided by also loading
the compiler component environment:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\&. /opt/intel/oneapi/compiler/latest/env/vars.sh
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS FindBullet
.sp
Finds the Bullet physics engine.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBBullet_FOUND\fP
Boolean true if Bullet was found.  For backward compatibility, the
\fBBULLET_FOUND\fP variable is also set to the same value.
.TP
.B \fBBULLET_INCLUDE_DIRS\fP
The Bullet include directories.
.TP
.B \fBBULLET_LIBRARIES\fP
Libraries needed to link to Bullet.  By default, all Bullet components
(Dynamics, Collision, LinearMath, and SoftBody) are added.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBBULLET_ROOT\fP
Can be set to Bullet install path or Windows build path to specify where to
find Bullet.
.UNINDENT
.SS Examples
.sp
Finding Bullet:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Bullet)
.EE
.UNINDENT
.UNINDENT
.SS FindBZip2
.sp
Finds the BZip2 data compression library (libbz2):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BZip2 [<version>] [...])
.EE
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBBZip2::BZip2\fP
Added in version 3.12.

.sp
Target encapsulating the usage requirements of BZip2 library.  This target is
available only when BZip2 is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBBZip2_FOUND\fP
Boolean indicating whether the BZip2 library is found.  For backward
compatibility, the \fBBZIP2_FOUND\fP variable is also set to the same value.
.TP
.B \fBBZIP2_INCLUDE_DIRS\fP
Added in version 3.12.

.sp
Include directories needed to use BZip2 library.
.TP
.B \fBBZIP2_LIBRARIES\fP
Libraries needed for linking to use BZip2.
.TP
.B \fBBZIP2_VERSION\fP
Added in version 3.26.

.sp
The version of BZip2 found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBBZIP2_INCLUDE_DIR\fP
The directory containing the BZip2 headers.
.TP
.B \fBBZIP2_LIBRARY_RELEASE\fP
The path to the BZip2 library for release configurations.
.TP
.B \fBBZIP2_LIBRARY_DEBUG\fP
The path to the BZip2 library for debug configurations.
.TP
.B \fBBZIP2_NEED_PREFIX\fP
Boolean indicating whether BZip2 functions are prefixed with \fBBZ2_\fP
(e.g., \fBBZ2_bzCompressInit()\fP).  Versions of BZip2 prior to 1.0.0 used
unprefixed function names (e.g., \fBbzCompressInit()\fP).
.UNINDENT
.SS Legacy Variables
.sp
The following variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBBZIP2_VERSION_STRING\fP
Changed in version 3.26: Superseded by \fBBZIP2_VERSION\fP\&.

.sp
The version of BZip2 found.
.UNINDENT
.SS Examples
.sp
Finding BZip2 library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BZip2)
target_link_libraries(project_target PRIVATE BZip2::BZip2)
.EE
.UNINDENT
.UNINDENT
.SS FindCoin3D
.sp
Finds Coin3D (Open Inventor).
.sp
Coin3D is an implementation of the Open Inventor API.  It provides
data structures and algorithms for 3D visualization.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCoin3D_FOUND\fP
True if Coin3D, Open Inventor was found.  For backward compatibility, the
\fBCOIN3D_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBCOIN3D_INCLUDE_DIRS\fP
Directory containing the Open Inventor header files (\fBInventor/So.h\fP).
.TP
.B \fBCOIN3D_LIBRARIES\fP
Coin3D libraries required for linking.
.UNINDENT
.SS Examples
.sp
Finding Coin3D:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Coin3D)
.EE
.UNINDENT
.UNINDENT
.SS FindCUDAToolkit
.sp
Added in version 3.17.

.sp
This script locates the NVIDIA CUDA toolkit and the associated libraries, but
does not require the \fBCUDA\fP language be enabled for a given project. This
module does not search for the NVIDIA CUDA Samples.
.sp
Added in version 3.19: QNX support.

.SS Search Behavior
.sp
The CUDA Toolkit search behavior uses the following order:
.INDENT 0.0
.IP 1. 3
If the \fBCUDA\fP language has been enabled we will use the directory
containing the compiler as the first search location for \fBnvcc\fP\&.
.IP 2. 3
If the variable \fI\%CMAKE_CUDA_COMPILER\fP or
the environment variable \fI\%CUDACXX\fP is defined, it will be used
as the path to the \fBnvcc\fP executable.
.IP 3. 3
If the \fBCUDAToolkit_ROOT\fP cmake configuration variable (e.g.,
\fB\-DCUDAToolkit_ROOT=/some/path\fP) \fIor\fP environment variable is defined, it
will be searched.  If both an environment variable \fBand\fP a
configuration variable are specified, the \fIconfiguration\fP variable takes
precedence.
.sp
The directory specified here must be such that the executable \fBnvcc\fP or
the appropriate \fBversion.txt\fP or \fBversion.json\fP file can be found
underneath the specified directory.
.IP 4. 3
If the CUDA_PATH environment variable is defined, it will be searched
for \fBnvcc\fP\&.
.IP 5. 3
The user\(aqs path is searched for \fBnvcc\fP using \fI\%find_program()\fP\&.  If
this is found, no subsequent search attempts are performed.  Users are
responsible for ensuring that the first \fBnvcc\fP to show up in the path is
the desired path in the event that multiple CUDA Toolkits are installed.
.IP 6. 3
On Unix systems, if the symbolic link \fB/usr/local/cuda\fP exists, this is
used.  No subsequent search attempts are performed.  No default symbolic link
location exists for the Windows platform.
.IP 7. 3
The platform specific default install locations are searched.  If exactly one
candidate is found, this is used.  The default CUDA Toolkit install locations
searched are:
.TS
box center;
l|l.
T{
Platform
T}	T{
Search Pattern
T}
_
T{
macOS
T}	T{
\fB/Developer/NVIDIA/CUDA\-X.Y\fP
T}
_
T{
Other Unix
T}	T{
\fB/usr/local/cuda\-X.Y\fP
T}
_
T{
Windows
T}	T{
\fBC:\eProgram Files\eNVIDIA GPU Computing Toolkit\eCUDA\evX.Y\fP
T}
.TE
.sp
Where \fBX.Y\fP would be a specific version of the CUDA Toolkit, such as
\fB/usr/local/cuda\-9.0\fP or
\fBC:\eProgram Files\eNVIDIA GPU Computing Toolkit\eCUDA\ev9.0\fP
.sp
\fBNOTE:\fP
.INDENT 3.0
.INDENT 3.5
When multiple CUDA Toolkits are installed in the default location of a
system (e.g., both \fB/usr/local/cuda\-9.0\fP and \fB/usr/local/cuda\-10.0\fP
exist but the \fB/usr/local/cuda\fP symbolic link does \fBnot\fP exist), this
package is marked as \fBnot\fP found.
.sp
There are too many factors involved in making an automatic decision in
the presence of multiple CUDA Toolkits being installed.  In this
situation, users are encouraged to either (1) set \fBCUDAToolkit_ROOT\fP or
(2) ensure that the correct \fBnvcc\fP executable shows up in \fB$PATH\fP for
\fI\%find_program()\fP to find.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Arguments
.INDENT 0.0
.TP
.B \fB[<version>]\fP
The \fB[<version>]\fP argument requests a version with which the package found
should be compatible. See \fI\%find_package version format\fP
for more details.
.UNINDENT
.SS Options
.INDENT 0.0
.TP
.B \fBREQUIRED\fP
If specified, configuration will error if a suitable CUDA Toolkit is not
found.
.TP
.B \fBQUIET\fP
If specified, the search for a suitable CUDA Toolkit will not produce any
messages.
.TP
.B \fBEXACT\fP
If specified, the CUDA Toolkit is considered found only if the exact
\fBVERSION\fP specified is recovered.
.UNINDENT
.SS Imported Targets
.sp
An \fI\%imported target\fP named \fBCUDA::toolkit\fP is provided.
.sp
This module defines \fI\%IMPORTED\fP targets for each
of the following libraries that are part of the CUDAToolkit:
.INDENT 0.0
.IP \(bu 2
\fI\%CUDA Runtime Library\fP
.IP \(bu 2
\fI\%CUDA Driver Library\fP
.IP \(bu 2
\fI\%cuBLAS\fP
.IP \(bu 2
\fI\%cuDLA\fP
.IP \(bu 2
\fI\%cuFile\fP
.IP \(bu 2
\fI\%cuFFT\fP
.IP \(bu 2
\fI\%cuRAND\fP
.IP \(bu 2
\fI\%cuSOLVER\fP
.IP \(bu 2
\fI\%cuSPARSE\fP
.IP \(bu 2
\fI\%cuPTI\fP
.IP \(bu 2
\fI\%NPP\fP
.IP \(bu 2
\fI\%nvBLAS\fP
.IP \(bu 2
\fI\%nvGRAPH\fP
.IP \(bu 2
\fI\%nvJPEG\fP
.IP \(bu 2
\fI\%nvidia\-ML\fP
.IP \(bu 2
\fI\%nvPTX Compiler\fP
.IP \(bu 2
\fI\%nvRTC\fP
.IP \(bu 2
\fI\%nvJitLink\fP
.IP \(bu 2
\fI\%nvFatBin\fP
.IP \(bu 2
\fI\%nvToolsExt\fP
.IP \(bu 2
\fI\%nvtx3\fP
.IP \(bu 2
\fI\%OpenCL\fP
.IP \(bu 2
\fI\%cuLIBOS\fP
.UNINDENT
.SS CUDA Runtime Library
.sp
The CUDA Runtime library (cudart) are what most applications will typically
need to link against to make any calls such as \fIcudaMalloc\fP, and \fIcudaFree\fP\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cudart\fP
.IP \(bu 2
\fBCUDA::cudart_static\fP
.UNINDENT
.SS CUDA Driver Library
.sp
The CUDA Driver library (cuda) are used by applications that use calls
such as \fIcuMemAlloc\fP, and \fIcuMemFree\fP\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cuda_driver\fP
.UNINDENT
.SS cuBLAS
.sp
The \X'tty: link https://docs.nvidia.com/cuda/cublas'\fI\%CUDA Basic Linear Algebra Subroutine\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cublas\fP
.IP \(bu 2
\fBCUDA::cublas_static\fP
.IP \(bu 2
\fBCUDA::cublasLt\fP starting in CUDA 10.1
.IP \(bu 2
\fBCUDA::cublasLt_static\fP starting in CUDA 10.1
.UNINDENT
.SS cuDLA
.sp
Added in version 3.27.

.sp
The \X'tty: link https://docs.nvidia.com/cuda/cuda-for-tegra-appnote#cudla'\fI\%NVIDIA Tegra Deep Learning Accelerator\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cudla\fP starting in CUDA 11.6
.UNINDENT
.SS cuFile
.sp
Added in version 3.25.

.sp
The \X'tty: link https://docs.nvidia.com/gpudirect-storage/api-reference-guide'\fI\%NVIDIA GPUDirect Storage cuFile\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cuFile\fP starting in CUDA 11.4
.IP \(bu 2
\fBCUDA::cuFile_static\fP starting in CUDA 11.4
.IP \(bu 2
\fBCUDA::cuFile_rdma\fP starting in CUDA 11.4
.IP \(bu 2
\fBCUDA::cuFile_rdma_static\fP starting in CUDA 11.4
.UNINDENT
.SS cuFFT
.sp
The \X'tty: link https://docs.nvidia.com/cuda/cufft'\fI\%CUDA Fast Fourier Transform\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cufft\fP
.IP \(bu 2
\fBCUDA::cufftw\fP
.IP \(bu 2
\fBCUDA::cufft_static\fP
.IP \(bu 2
\fBCUDA::cufft_static_nocallback\fP starting in CUDA 9.2, requires CMake 3.23+
.IP \(bu 2
\fBCUDA::cufftw_static\fP
.UNINDENT
.SS cuRAND
.sp
The \X'tty: link https://docs.nvidia.com/cuda/curand'\fI\%CUDA random number generation\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::curand\fP
.IP \(bu 2
\fBCUDA::curand_static\fP
.UNINDENT
.SS cuSOLVER
.sp
A \X'tty: link https://docs.nvidia.com/cuda/cusolver'\fI\%GPU accelerated linear system solver\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cusolver\fP
.IP \(bu 2
\fBCUDA::cusolver_static\fP
.UNINDENT
.SS cuSPARSE
.sp
The \X'tty: link https://docs.nvidia.com/cuda/cusparse'\fI\%CUDA sparse matrix\fP\X'tty: link' library.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cusparse\fP
.IP \(bu 2
\fBCUDA::cusparse_static\fP
.UNINDENT
.SS cupti
.sp
The \X'tty: link https://developer.nvidia.com/cupti'\fI\%NVIDIA CUDA Profiling Tools Interface\fP\X'tty: link'\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::cupti\fP
.IP \(bu 2
\fBCUDA::cupti_static\fP
.UNINDENT
.sp
Added in version 3.27: 
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvperf_host\fP         starting in CUDA 10.2
.IP \(bu 2
\fBCUDA::nvperf_host_static\fP  starting in CUDA 10.2
.IP \(bu 2
\fBCUDA::nvperf_target\fP       starting in CUDA 10.2
.IP \(bu 2
\fBCUDA::pcsamplingutil\fP      starting in CUDA 11.3
.UNINDENT

.SS NPP
.sp
The \X'tty: link https://docs.nvidia.com/cuda/npp'\fI\%NVIDIA 2D Image and Signal Processing Performance Primitives\fP\X'tty: link' libraries.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fInppc\fP:
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppc\fP
.IP \(bu 2
\fBCUDA::nppc_static\fP
.UNINDENT
.IP \(bu 2
\fInppial\fP: Arithmetic and logical operation functions in \fInppi_arithmetic_and_logical_operations.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppial\fP
.IP \(bu 2
\fBCUDA::nppial_static\fP
.UNINDENT
.IP \(bu 2
\fInppicc\fP: Color conversion and sampling functions in \fInppi_color_conversion.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppicc\fP
.IP \(bu 2
\fBCUDA::nppicc_static\fP
.UNINDENT
.IP \(bu 2
\fInppicom\fP: JPEG compression and decompression functions in \fInppi_compression_functions.h\fP
Removed starting in CUDA 11.0, use \fI\%nvJPEG\fP instead.
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppicom\fP
.IP \(bu 2
\fBCUDA::nppicom_static\fP
.UNINDENT
.IP \(bu 2
\fInppidei\fP: Data exchange and initialization functions in \fInppi_data_exchange_and_initialization.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppidei\fP
.IP \(bu 2
\fBCUDA::nppidei_static\fP
.UNINDENT
.IP \(bu 2
\fInppif\fP: Filtering and computer vision functions in \fInppi_filter_functions.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppif\fP
.IP \(bu 2
\fBCUDA::nppif_static\fP
.UNINDENT
.IP \(bu 2
\fInppig\fP: Geometry transformation functions found in \fInppi_geometry_transforms.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppig\fP
.IP \(bu 2
\fBCUDA::nppig_static\fP
.UNINDENT
.IP \(bu 2
\fInppim\fP: Morphological operation functions found in \fInppi_morphological_operations.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppim\fP
.IP \(bu 2
\fBCUDA::nppim_static\fP
.UNINDENT
.IP \(bu 2
\fInppist\fP: Statistics and linear transform in \fInppi_statistics_functions.h\fP and \fInppi_linear_transforms.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppist\fP
.IP \(bu 2
\fBCUDA::nppist_static\fP
.UNINDENT
.IP \(bu 2
\fInppisu\fP: Memory support functions in \fInppi_support_functions.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppisu\fP
.IP \(bu 2
\fBCUDA::nppisu_static\fP
.UNINDENT
.IP \(bu 2
\fInppitc\fP: Threshold and compare operation functions in \fInppi_threshold_and_compare_operations.h\fP
.INDENT 2.0
.IP \(bu 2
\fBCUDA::nppitc\fP
.IP \(bu 2
\fBCUDA::nppitc_static\fP
.UNINDENT
.IP \(bu 2
\fInpps\fP:
.INDENT 2.0
.IP \(bu 2
\fBCUDA::npps\fP
.IP \(bu 2
\fBCUDA::npps_static\fP
.UNINDENT
.UNINDENT
.SS nvBLAS
.sp
The \X'tty: link https://docs.nvidia.com/cuda/nvblas'\fI\%GPU\-accelerated drop\-in BLAS\fP\X'tty: link' library.
This is a shared library only.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvblas\fP
.UNINDENT
.SS nvGRAPH
.sp
A \X'tty: link https://docs.nvidia.com/cuda/archive/10.0/nvgraph'\fI\%GPU\-accelerated graph analytics\fP\X'tty: link' library.
Removed starting in CUDA 11.0
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvgraph\fP
.IP \(bu 2
\fBCUDA::nvgraph_static\fP
.UNINDENT
.SS nvJPEG
.sp
A \X'tty: link https://docs.nvidia.com/cuda/nvjpeg'\fI\%GPU\-accelerated JPEG codec\fP\X'tty: link' library.
Introduced in CUDA 10.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvjpeg\fP
.IP \(bu 2
\fBCUDA::nvjpeg_static\fP
.UNINDENT
.SS nvPTX Compiler
.sp
Added in version 3.25.

.sp
The \X'tty: link https://docs.nvidia.com/cuda/ptx-compiler-api'\fI\%PTX Compiler APIs\fP\X'tty: link'\&.
These are a set of APIs which can be used to compile a PTX program into GPU assembly code.
Introduced in CUDA 11.1
This is a static library only.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvptxcompiler_static\fP starting in CUDA 11.1
.UNINDENT
.SS nvRTC
.sp
A \X'tty: link https://docs.nvidia.com/cuda/nvrtc'\fI\%runtime compilation library for CUDA\fP\X'tty: link'\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvrtc\fP
.UNINDENT
.sp
Added in version 3.26: 
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvrtc_builtins\fP
.IP \(bu 2
\fBCUDA::nvrtc_static\fP starting in CUDA 11.5
.IP \(bu 2
\fBCUDA::nvrtc_builtins_static\fP starting in CUDA 11.5
.UNINDENT

.SS nvJitLink
.sp
The \X'tty: link https://docs.nvidia.com/cuda/nvjitlink'\fI\%JIT Link APIs\fP\X'tty: link'\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvJitLink\fP starting in CUDA 12.0
.IP \(bu 2
\fBCUDA::nvJitLink_static\fP  starting in CUDA 12.0
.UNINDENT
.SS nvFatBin
.sp
Added in version 3.30.

.sp
The \X'tty: link https://docs.nvidia.com/cuda/nvfatbin'\fI\%Fatbin Creator APIs\fP\X'tty: link'\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvfatbin\fP starting in CUDA 12.4
.IP \(bu 2
\fBCUDA::nvfatbin_static\fP  starting in CUDA 12.4
.UNINDENT
.SS nvidia\-ML
.sp
The \X'tty: link https://developer.nvidia.com/management-library-nvml'\fI\%NVIDIA Management Library\fP\X'tty: link'\&.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvml\fP
.IP \(bu 2
\fBCUDA::nvml_static\fP starting in CUDA 12.4
.UNINDENT
.sp
Added in version 3.31: Added \fBCUDA::nvml_static\fP\&.

.SS nvToolsExt
.sp
Deprecated since version 3.25: With CUDA 10.0+, use \fI\%nvtx3\fP\&.
Starting in CUDA 12.9 the \fInvToolsExt\fP library no longer exists

.sp
The \X'tty: link https://docs.nvidia.com/cuda/archive/9.0/profiler-users-guide#nvtx'\fI\%legacy NVIDIA Tools Extension\fP\X'tty: link'\&.
This is a shared library only.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvToolsExt\fP
.UNINDENT
.SS nvtx3
.sp
Added in version 3.25.

.sp
The header\-only \X'tty: link https://nvidia.github.io/NVTX/doxygen'\fI\%NVIDIA Tools Extension\fP\X'tty: link' library.
Introduced in CUDA 10.0.
.sp
Targets created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::nvtx3\fP
.IP \(bu 2
\fBCUDA::nvtx3_interop\fP
.sp
Added in version 4.1.

.sp
This is provided by CUDA 12.9 and above for use by languages that
cannot consume C++ header\-only libraries, such as \fBFortran\fP\&.
.UNINDENT
.SS OpenCL
.sp
The \X'tty: link https://developer.nvidia.com/opencl'\fI\%NVIDIA Open Computing Language\fP\X'tty: link' library.
This is a shared library only.
.sp
Targets Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::OpenCL\fP
.UNINDENT
.SS cuLIBOS
.sp
The cuLIBOS library is a backend thread abstraction layer library which is
static only.  The \fBCUDA::cublas_static\fP, \fBCUDA::cusparse_static\fP,
\fBCUDA::cufft_static\fP, \fBCUDA::curand_static\fP, and (when implemented) NPP
libraries all automatically have this dependency linked.
.sp
Target Created:
.INDENT 0.0
.IP \(bu 2
\fBCUDA::culibos\fP
.UNINDENT
.sp
\fBNote\fP: direct usage of this target by consumers should not be necessary.
.SS Result variables
.INDENT 0.0
.TP
.B \fBCUDAToolkit_FOUND\fP
A boolean specifying whether or not the CUDA Toolkit was found.
.TP
.B \fBCUDAToolkit_VERSION\fP
The exact version of the CUDA Toolkit found (as reported by
\fBnvcc \-\-version\fP, \fBversion.txt\fP, or \fBversion.json\fP).
.TP
.B \fBCUDAToolkit_VERSION_MAJOR\fP
The major version of the CUDA Toolkit.
.TP
.B \fBCUDAToolkit_VERSION_MINOR\fP
The minor version of the CUDA Toolkit.
.TP
.B \fBCUDAToolkit_VERSION_PATCH\fP
The patch version of the CUDA Toolkit.
.TP
.B \fBCUDAToolkit_BIN_DIR\fP
The path to the CUDA Toolkit library directory that contains the CUDA
executable \fBnvcc\fP\&.
.TP
.B \fBCUDAToolkit_INCLUDE_DIRS\fP
List of paths to all the CUDA Toolkit folders containing header files
required to compile a project linking against CUDA.
.TP
.B \fBCUDAToolkit_LIBRARY_DIR\fP
The path to the CUDA Toolkit library directory that contains the CUDA
Runtime library \fBcudart\fP\&.
.TP
.B \fBCUDAToolkit_LIBRARY_ROOT\fP
Added in version 3.18.

.sp
The path to the CUDA Toolkit directory containing the nvvm directory and
either version.txt or version.json.
.TP
.B \fBCUDAToolkit_TARGET_DIR\fP
The path to the CUDA Toolkit directory including the target architecture
when cross\-compiling. When not cross\-compiling this will be equivalent to
the parent directory of \fBCUDAToolkit_BIN_DIR\fP\&.
.TP
.B \fBCUDAToolkit_NVCC_EXECUTABLE\fP
The path to the NVIDIA CUDA compiler \fBnvcc\fP\&.  Note that this path may
\fBnot\fP be the same as
\fI\%CMAKE_CUDA_COMPILER\fP\&.  \fBnvcc\fP must be
found to determine the CUDA Toolkit version as well as determining other
features of the Toolkit.  This variable is set for the convenience of
modules that depend on this one.
.UNINDENT
.SS FindCups
.sp
Finds the Common UNIX Printing System (CUPS).
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBCups::Cups\fP
Added in version 3.15.

.sp
Target encapsulating the CUPS usage requirements, available only if CUPS is
found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCups_FOUND\fP
Boolean indicating whether the CUPS is found.  For backward compatibility, the
\fBCUPS_FOUND\fP variable is also set to the same value.
.TP
.B \fBCUPS_INCLUDE_DIRS\fP
Include directories needed for using CUPS.
.TP
.B \fBCUPS_VERSION_STRING\fP
The version of CUPS found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBCUPS_INCLUDE_DIR\fP
The directory containing the CUPS headers.
.TP
.B \fBCUPS_LIBRARIES\fP
Libraries needed to link against to use CUPS.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBCUPS_REQUIRE_IPP_DELETE_ATTRIBUTE\fP
Set this variable to \fBTRUE\fP to require CUPS version which features the
\fBippDeleteAttribute()\fP function (i.e. at least of CUPS \fB1.1.19\fP).
.UNINDENT
.SS Examples
.sp
Finding CUPS and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Cups)
target_link_libraries(project_target PRIVATE Cups::Cups)
.EE
.UNINDENT
.UNINDENT
.SS FindCURL
.sp
Finds the native curl installation (include directories and libraries) for
transferring data with URLS.
.sp
Added in version 3.17: If curl is built using its CMake\-based build system, it will provide its own
CMake Package Configuration file (\fBCURLConfig.cmake\fP) for use with the
\fI\%find_package()\fP command in \fIconfig mode\fP\&.  By default, this module
searches for this file and, if found, returns the results without further
action.  If the upstream configuration file is not found, this module falls
back to \fImodule mode\fP and searches standard locations.

.sp
Added in version 3.13: Debug and Release library variants are found separately.

.SS Components
.sp
Added in version 3.14.

.sp
This module supports optional components to detect the protocols and features
available in the installed curl (these can vary based on the curl version):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Protocols: DICT FILE FTP FTPS GOPHER GOPHERS HTTP HTTPS IMAP IMAPS IPFS IPNS
           LDAP LDAPS MQTT POP3 POP3S RTMP RTMPS RTSP SCP SFTP SMB SMBS SMTP
           SMTPS TELNET TFTP WS WSS
Features:  alt\-svc asyn\-rr AsynchDNS brotli CAcert Debug ECH gsasl GSS\-API
           HSTS HTTP2 HTTP3 HTTPS\-proxy HTTPSRR IDN IPv6 Kerberos Largefile
           libz MultiSSL NTLM NTLM_WB PSL SPNEGO SSL SSLS\-EXPORT SSPI
           threadsafe TLS\-SRP TrackMemory Unicode UnixSockets zstd
.EE
.UNINDENT
.UNINDENT
.sp
Components can be specified with the \fI\%find_package()\fP command as required
for curl to be considered found:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CURL [COMPONENTS <protocols>... <features>...])
.EE
.UNINDENT
.UNINDENT
.sp
Or to check for them optionally, allowing conditional handling in the code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CURL [OPTIONAL_COMPONENTS <protocols>... <features>...])
.EE
.UNINDENT
.UNINDENT
.sp
Refer to the curl documentation for more information on supported protocols and
features.  Component names are case\-sensitive and follow the upstream curl
naming conventions.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBCURL::libcurl\fP
Added in version 3.12.

.sp
Target encapsulating the curl usage requirements, available if curl is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCURL_FOUND\fP
Boolean indicating whether the (requested version of) curl and all required
components are found.
.TP
.B \fBCURL_VERSION\fP
Added in version 4.0.

.sp
The version of curl found.  This supersedes \fBCURL_VERSION_STRING\fP\&.
.TP
.B \fBCURL_<component>_FOUND\fP
Added in version 3.14.

.sp
Boolean indicating whether the specified component (curl protocol or feature)
is found.
.TP
.B \fBCURL_INCLUDE_DIRS\fP
Include directories containing the \fBcurl/curl.h\fP and other headers needed to
use curl.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When curl is found via \fIconfig mode\fP, this variable is available only with
curl version 8.9 or newer.
.UNINDENT
.UNINDENT
.TP
.B \fBCURL_LIBRARIES\fP
List of libraries needed to link against to use curl.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When curl is found via \fImodule mode\fP, this is a list of library file paths.
In \fIconfig mode\fP, this variable is available only with curl version 8.9 or
newer and contains a list of imported targets.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBCURL_NO_CURL_CMAKE\fP
Added in version 3.17.

.sp
Set this variable to \fBTRUE\fP to disable searching for curl via \fIconfig mode\fP\&.
.TP
.B \fBCURL_USE_STATIC_LIBS\fP
Added in version 3.28.

.sp
Set this variable to \fBTRUE\fP to use static libraries.  This is meaningful
only when curl is not found via \fIconfig mode\fP\&.
.UNINDENT
.SS Deprecated Variables
.sp
The following variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBCURL_VERSION_STRING\fP
Deprecated since version 4.0: Superseded by \fBCURL_VERSION\fP\&.

.sp
The version of curl found.
.UNINDENT
.SS Examples
.sp
Finding the curl library and specifying the required minimum version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CURL 7.61.0)
.EE
.UNINDENT
.UNINDENT
.sp
Finding the curl library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CURL)
target_link_libraries(project_target PRIVATE CURL::libcurl)
.EE
.UNINDENT
.UNINDENT
.sp
Using components to check if the found curl supports specific protocols or
features:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CURL OPTIONAL_COMPONENTS HTTPS SSL)

if(CURL_HTTPS_FOUND)
  # curl supports the HTTPS protocol
endif()

if(CURL_SSL_FOUND)
  # curl has SSL feature enabled
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindCurses
.sp
Finds the curses or ncurses library.
.sp
Curses is a terminal control library for Unix\-like systems, used to build text
user interface (TUI) applications.  Originally developed in 1978, it has since
evolved into multiple implementations, most notably ncurses (new curses), BSD
curses, and PDCurses (a public domain curses library for non\-Unix platforms).
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCurses_FOUND\fP
Boolean indicating whether the Curses is found.  For backward compatibility,
the \fBCURSES_FOUND\fP variable is also set to the same value.
.TP
.B \fBCURSES_INCLUDE_DIRS\fP
Added in version 3.1.

.sp
The include directories needed to use Curses.
.TP
.B \fBCURSES_LIBRARIES\fP
The libraries needed to use Curses.
.TP
.B \fBCURSES_CFLAGS\fP
Added in version 3.16.

.sp
Compiler flags which ought be given to C/C++ compilers when using Curses.
.TP
.B \fBCURSES_HAVE_CURSES_H\fP
Boolean indicating whether \fBcurses.h\fP is available.
.TP
.B \fBCURSES_HAVE_NCURSES_H\fP
Boolean indicating whether \fBncurses.h\fP is available.
.TP
.B \fBCURSES_HAVE_NCURSES_NCURSES_H\fP
Boolean indicating whether \fBncurses/ncurses.h\fP is available.
.TP
.B \fBCURSES_HAVE_NCURSES_CURSES_H\fP
Boolean indicating whether \fBncurses/curses.h\fP is available.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBCURSES_NEED_NCURSES\fP
Set this variable to \fBTRUE\fP before calling \fBfind_package(Curses)\fP if the
the ncurses implementation functionality is specifically required.
.TP
.B \fBCURSES_NEED_WIDE\fP
Added in version 3.10.

.sp
Set this variable to \fBTRUE\fP before calling \fBfind_package(Curses)\fP if
Unicode (wide character) support is required.
.UNINDENT
.SS Deprecated Variables
.sp
The following legacy variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBCURSES_INCLUDE_DIR\fP
Deprecated since version 3.1: Use the \fBCURSES_INCLUDE_DIRS\fP variable instead.

.sp
Path to a Curses include directory.
.TP
.B \fBCURSES_LIBRARY\fP
Deprecated since version 2.4: Use the \fBCURSES_LIBRARIES\fP variable instead.

.sp
Path to Curses library.
.UNINDENT
.SS Examples
.sp
Finding Curses and creating an imported interface target for linking it to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Curses)
if(Curses_FOUND AND NOT TARGET Curses::Curses)
  add_library(Curses::Curses INTERFACE IMPORTED)
  set_target_properties(
    Curses::Curses
    PROPERTIES
      INTERFACE_LINK_LIBRARIES \(dq${CURSES_LIBRARIES}\(dq
      INTERFACE_INCLUDE_DIRECTORIES \(dq${CURSES_INCLUDE_DIRS}\(dq
  )
endif()

add_executable(app app.c)
target_link_libraries(app PRIVATE Curses::Curses)
.EE
.UNINDENT
.UNINDENT
.sp
When ncurses is specifically required:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CURSES_NEED_NCURSES TRUE)
find_package(Curses)
.EE
.UNINDENT
.UNINDENT
.SS FindCVS
.sp
Finds the Concurrent Versions System (CVS).
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCVS_FOUND\fP
True if the command\-line client was found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBCVS_EXECUTABLE\fP
Path to \fBcvs\fP command\-line client.
.UNINDENT
.SS Examples
.sp
Finding CVS and executing it in a process:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CVS)
if(CVS_FOUND)
  execute_process(COMMAND ${CVS_EXECUTABLE} \-\-help)
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindCxxTest
.sp
Finds \X'tty: link https://github.com/CxxTest/cxxtest'\fI\%CxxTest\fP\X'tty: link', a C++ unit testing framework suite, and provides a helper
command to create test runners and integrate them with CTest.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCXXTEST_FOUND\fP
Boolean indicating whether the CxxTest framework is found.
.TP
.B \fBCXXTEST_INCLUDE_DIRS\fP
Include directories containing headers needed to use CxxTest.
.TP
.B \fBCXXTEST_TESTGEN_EXECUTABLE\fP
The path to the found CxxTest test generator script (Perl\- or Python\-based),
selected based on the found interpreter or user\-specified preference.
.TP
.B \fBCXXTEST_TESTGEN_INTERPRETER\fP
The path to the found Perl or Python interpreter used to run the test
generator script, if needed (e.g., on platforms where script shebang lines are
not supported).
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBCXXTEST_PERL_TESTGEN_EXECUTABLE\fP
The path to the Perl\-based CxxTest test generator script.
.TP
.B \fBCXXTEST_PYTHON_TESTGEN_EXECUTABLE\fP
The path to the Python\-based CxxTest test generator script.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling
\fBfind_package(CxxTest)\fP:
.INDENT 0.0
.TP
.B \fBCXXTEST_TESTGEN_ARGS\fP
This variable can be set to specify a semicolon\-separated list of command\-line
options to pass to the CxxTest code generator.  If not set, the default value
is \fB\-\-error\-printer\fP\&.
.UNINDENT
.SS Commands
.sp
This module provides the following command if CxxTest is found:
.INDENT 0.0
.TP
.B cxxtest_add_test
Creates a CxxTest runner and adds it to the CTest testing suite:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cxxtest_add_test(<test\-name> <gen\-source\-file> <input\-files\-to\-testgen>...)
.EE
.UNINDENT
.UNINDENT
.sp
Parameters:
.INDENT 7.0
.TP
.B \fB<test\-name>\fP
The name of the test executable target to be created and registered as a
test in the CTest suite.
.TP
.B \fB<gen\-source\-file>\fP
The name of the source file to be generated by the CxxTest code generator.
This must be a relative path.  It is interpreted relative to the
current binary directory (\fI\%CMAKE_CURRENT_BINARY_DIR\fP).
.TP
.B \fB<input\-files\-to\-testgen>\fP
A list of header files containing test suite classes derived from the C++
class \fBCxxTest::TestSuite\fP, to be included in the test runner.  These must
be given as absolute paths.
.UNINDENT
.UNINDENT
.SS Deprecated Variables
.sp
The following variables are deprecated and provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBCXXTEST_USE_PYTHON\fP
Deprecated since version 2.8.3: In earlier versions of CMake, this hint variable was used to force the use
of the Python\-based test generator instead of the Perl one, regardless of
which scripting language was installed.  It is now only considered when both
Perl and Python interpreters are found.

.sp
A boolean hint variable that, when set to true, prefers the Python code
generator over the Perl one if both interpreters are found.  This variable is
only relevant when using CxxTest version 3.
.UNINDENT
.SS Examples
.sp
The following example demonstrates how CxxTest can be used in CMake with this
module.  If CxxTest is found:
.INDENT 0.0
.IP \(bu 2
Additional interface \fI\%imported target\fP is created
manually in the project to encapsulate the CxxTest usage requirements and
link it to specified tests.  Such target is useful, for example, when dealing
with multiple tests.
.IP \(bu 2
Test generator is invoked to create \fBfoo_test.cc\fP in the current binary
directory from the input header \fBfoo_test.h\fP located in the current source
directory.
.IP \(bu 2
An executable named \fBunit_test_foo\fP is built and registered as a test in
CTest.
.UNINDENT
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CxxTest)

# Create interface imported target:
if(CXXTEST_FOUND AND NOT TARGET CxxTest::CxxTest)
  add_library(CxxTest::CxxTest INTERFACE IMPORTED)
  set_target_properties(
    CxxTest::CxxTest
    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \(dq${CXXTEST_INCLUDE_DIRS}\(dq
  )
endif()

# Add test:
if(CXXTEST_FOUND)
  enable_testing()

  cxxtest_add_test(
    unit_test_foo
    foo_test.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h
  )

  target_link_libraries(
    unit_test_foo
    PRIVATE
      CxxTest::CxxTest
      # Link any project targets as needed, if test depends on them:
      foo
  )
endif()
.EE
.UNINDENT
.UNINDENT
.sp
\fBfoo_test.h\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <cxxtest/TestSuite.h>

class MyTestSuite : public CxxTest::TestSuite
{
public:
  void testAddition(void)
  {
    TS_ASSERT(1 + 1 > 1);
    TS_ASSERT_EQUALS(1 + 1, 2);
  }
};
.EE
.UNINDENT
.UNINDENT
.SS FindCygwin
.sp
Finds Cygwin, a POSIX\-compatible environment that runs natively on Microsoft
Windows.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is primarily intended for use in other \fI\%Find Modules\fP to help
locate programs when using the \fBfind_*()\fP commands, such as
\fI\%find_program()\fP\&.  In most cases, direct use of those commands is
sufficient.  Use this module only if a specific program is known to be
installed via Cygwin and is usable from Windows.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBCYGWIN_INSTALL_PATH\fP
The path to the Cygwin root installation directory.
.UNINDENT
.SS Examples
.sp
Finding the Cygwin installation and using its path in a custom find module:
.sp
FindFoo.cmake
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Cygwin)
find_program(Foo_EXECUTABLE NAMES foo PATHS ${CYGWIN_INSTALL_PATH}/bin)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Foo REQUIRED_VARS Foo_EXECUTABLE)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindMsys\fP module to find MSYS path in a similar way.
.UNINDENT
.SS FindDCMTK
.sp
Find DICOM ToolKit (DCMTK) libraries and applications
.sp
The module defines the following variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
DCMTK_INCLUDE_DIRS  \- Directories to include to use DCMTK
DCMTK_LIBRARIES     \- Files to link against to use DCMTK
DCMTK_FOUND         \- If false, don\(aqt try to use DCMTK
DCMTK_DIR           \- (optional) Source directory for DCMTK
.EE
.UNINDENT
.UNINDENT
.SS Compatibility
.sp
This module is able to find a version of DCMTK that does or does not export
a \fBDCMTKConfig.cmake\fP file. It applies a two step process:
.INDENT 0.0
.IP \(bu 2
Step 1:  Attempt to find DCMTK version providing a \fBDCMTKConfig.cmake\fP file.
.IP \(bu 2
Step 2:  If step 1 failed, rely on \fBFindDCMTK.cmake\fP to set \fBDCMTK_*\fP
variables details below.
.UNINDENT
.sp
\X'tty: link https://git.dcmtk.org/?p=dcmtk.git;a=commit;h=662ae187c493c6b9a73dd5e3875372cebd0c11fe'\fI\%Recent DCMTK\fP\X'tty: link'
provides a \fBDCMTKConfig.cmake\fP \fI\%package configuration file\fP\&. To exclusively use the package configuration file
(recommended when possible), pass the \fINO_MODULE\fP option to
\fI\%find_package()\fP\&. For example, \fIfind_package(DCMTK NO_MODULE)\fP\&.
This requires official DCMTK snapshot \fI3.6.1_20140617\fP or newer.
.sp
Until all clients update to the more recent DCMTK, build systems will need
to support different versions of DCMTK.
.sp
On any given system, the following combinations of DCMTK versions could be
considered:
.TS
box center;
l|l|l|l.
T{
T}	T{
SYSTEM DCMTK
T}	T{
LOCAL DCMTK
T}	T{
Supported ?
T}
_
T{
Case A
T}	T{
NA
T}	T{
[ ] DCMTKConfig
T}	T{
YES
T}
_
T{
Case B
T}	T{
NA
T}	T{
[X] DCMTKConfig
T}	T{
YES
T}
_
T{
Case C
T}	T{
[ ] DCMTKConfig
T}	T{
NA
T}	T{
YES
T}
_
T{
Case D
T}	T{
[X] DCMTKConfig
T}	T{
NA
T}	T{
YES
T}
_
T{
Case E
T}	T{
[ ] DCMTKConfig
T}	T{
[ ] DCMTKConfig
T}	T{
YES (*)
T}
_
T{
Case F
T}	T{
[X] DCMTKConfig
T}	T{
[ ] DCMTKConfig
T}	T{
NO
T}
_
T{
Case G
T}	T{
[ ] DCMTKConfig
T}	T{
[X] DCMTKConfig
T}	T{
YES
T}
_
T{
Case H
T}	T{
[X] DCMTKConfig
T}	T{
[X] DCMTKConfig
T}	T{
YES
T}
.TE
.INDENT 0.0
.INDENT 3.5
(*) See Troubleshooting section.
.UNINDENT
.UNINDENT
.sp
Legend:
.INDENT 0.0
.INDENT 3.5
NA ...............: Means that no System or Local DCMTK is available
.sp
[ ] DCMTKConfig ..: Means that the version of DCMTK does NOT export a DCMTKConfig.cmake file.
.sp
[X] DCMTKConfig ..: Means that the version of DCMTK exports a DCMTKConfig.cmake file.
.UNINDENT
.UNINDENT
.SS Troubleshooting
.sp
What to do if my project finds a different version of DCMTK?
.sp
Remove DCMTK entry from the CMake cache per \fI\%find_package()\fP
documentation.
.SS FindDevIL
.sp
Finds the Developer\(aqs Image Library, \X'tty: link https://openil.sourceforge.net/'\fI\%DevIL\fP\X'tty: link'\&.
.sp
The DevIL package internally consists of the following libraries, all
distributed as part of the same release:
.INDENT 0.0
.IP \(bu 2
The core Image Library (IL)
.sp
This library is always required when working with DevIL, as it provides the
main image loading and manipulation functionality.
.IP \(bu 2
The Image Library Utilities (ILU)
.sp
This library depends on IL and provides image filters and effects. It is only
required if the application uses this extended functionality.
.IP \(bu 2
The Image Library Utility Toolkit (ILUT)
.sp
This library depends on both IL and ILU, and additionally provides an
interface to OpenGL.  It is only needed if the application uses DevIL together
with OpenGL.
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBDevIL::IL\fP
Added in version 3.21.

.sp
Target encapsulating the core Image Library (IL) usage requirements, available
if the DevIL package is found.
.TP
.B \fBDevIL::ILU\fP
Added in version 3.21.

.sp
Target encapsulating the Image Library Utilities (ILU) usage requirements,
available if the DevIL package is found.  This target also links to
\fBDevIL::IL\fP for convenience, as ILU depends on the core IL library.
.TP
.B \fBDevIL::ILUT\fP
Added in version 3.21.

.sp
Target encapsulating the Image Library Utility Toolkit (ILUT) usage
requirements, available if the DevIL package and its ILUT library are found.
This target also links to \fBDevIL::ILU\fP, and transitively to \fBDevIL::IL\fP,
since ILUT depends on both.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBDevIL_FOUND\fP
Boolean indicating whether the DevIL package is found, including the IL and
ILU libraries.
.TP
.B \fBDevIL_ILUT_FOUND\fP
Added in version 3.21.

.sp
Boolean indicating whether the ILUT library is found.  On most systems, ILUT
is found when both IL and ILU are available.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBIL_INCLUDE_DIR\fP
The directory containing the \fBil.h\fP, \fBilu.h\fP and \fBilut.h\fP header files.
.TP
.B \fBIL_LIBRARIES\fP
The full path to the core Image Library (IL).
.TP
.B \fBILU_LIBRARIES\fP
The full path to the ILU library.
.TP
.B \fBILUT_LIBRARIES\fP
The full path to the ILUT library.
.UNINDENT
.SS Examples
.sp
Finding the DevIL package and linking against the core Image Library (IL):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(DevIL)
target_link_libraries(app PRIVATE DevIL::IL)
.EE
.UNINDENT
.UNINDENT
.sp
Linking against the Image Library Utilities (ILU):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(DevIL)
target_link_libraries(app PRIVATE DevIL::ILU)
.EE
.UNINDENT
.UNINDENT
.sp
Linking against the Image Library Utility Toolkit (ILUT):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(DevIL)
target_link_libraries(app PRIVATE DevIL::ILUT)
.EE
.UNINDENT
.UNINDENT
.SS FindDoxygen
.sp
Finds \X'tty: link https://www.doxygen.nl'\fI\%Doxygen\fP\X'tty: link', a source code documentation
generator, along with some optional supporting tools, and provides a command
for integrating Doxygen\-based documentation into CMake projects:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen [<version>] [...] [COMPONENTS <components>...] [...])
.EE
.UNINDENT
.UNINDENT
.SS Components
.sp
Additional Doxygen supporting tools, can be specified as components with the
\fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Supported components include:
.INDENT 0.0
.TP
.B \fBdoxygen\fP
Added in version 3.9.

.sp
Finds the \fBdoxygen\fP executable.  This component is always automatically
implied, even if not requested.
.TP
.B \fBdot\fP
Added in version 3.9.

.sp
Finds the \X'tty: link https://graphviz.org'\fI\%Graphviz\fP\X'tty: link' \fBdot\fP utility, used for
rendering graphs and diagrams as part of the documentation.
.TP
.B \fBmscgen\fP
Added in version 3.9.

.sp
Finds the \X'tty: link https://www.mcternan.me.uk/mscgen/'\fI\%Message Chart Generator\fP\X'tty: link'
utility used by Doxygen\(aqs \fB\emsc\fP and \fB\emscfile\fP commands.
.TP
.B \fBdia\fP
Added in version 3.9.

.sp
Finds the \X'tty: link https://wiki.gnome.org/Apps/Dia'\fI\%Dia\fP\X'tty: link' diagram editor used by
Doxygen\(aqs \fB\ediafile\fP command.
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP, each of which is
defined if the corresponding component was requested and its associated
executable was found:
.INDENT 0.0
.TP
.B \fBDoxygen::doxygen\fP
Added in version 3.9.

.sp
Imported executable target encapsulating the \fBdoxygen\fP executable usage
requirements, available if Doxygen is found.
.TP
.B \fBDoxygen::dot\fP
Added in version 3.9.

.sp
Imported executable target encapsulating the \fBdot\fP executable usage
requirements, available if the above \fBdot\fP component is found.
.TP
.B \fBDoxygen::mscgen\fP
Added in version 3.9.

.sp
Imported executable target encapsulating the \fBmscgen\fP executable usage
requirements, available if the above \fBmscgen\fP component is found.
.TP
.B \fBDoxygen::dia\fP
Added in version 3.9.

.sp
Imported executable target encapsulating the \fBdia\fP executable usage
requirements, available if the above \fBdia\fP component is found.
.UNINDENT
.sp
These targets can be used in commands such as \fI\%add_custom_command()\fP
and are preferred over the older, now\-deprecated variables like
\fBDOXYGEN_EXECUTABLE\fP\&.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBDoxygen_FOUND\fP
Boolean indicating whether (the requested version of) \fBdoxygen\fP executable
and all requested required components are found.  For backward compatibility,
the \fBDOXYGEN_FOUND\fP variable is also set, except it has boolean value of
\fBYES\fP or \fBNO\fP\&.
.TP
.B \fBDOXYGEN_VERSION\fP
The version of Doxygen found (as reported by \fBdoxygen \-\-version\fP).
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B doxygen_add_docs
Added in version 3.9.

.sp
Adds a custom target for generating documentation with Doxygen during the
build phase:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
doxygen_add_docs(
  <target\-name>
  [<files\-or\-dirs>...]
  [ALL]
  [USE_STAMP_FILE]
  [WORKING_DIRECTORY <dir>]
  [COMMENT <comment>]
  [CONFIG_FILE <file>]
)
.EE
.UNINDENT
.UNINDENT
.sp
By default, this convenience command also generates a configuration file
named \fBDoxyfile.<target\-name>\fP in the current binary directory at
CMake configuration phase.  It provides sensible defaults, so most projects
only need to specify input files or directories.  Additional behavior and
configuration can be customized using variables described in the following
sections.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<target\-name>\fP
The name of the target to be created for generating documentation with
Doxygen.
.TP
.B \fB<files\-or\-dirs>...\fP
One or more paths (files or directories) that serve as input sources for
documentation.
.sp
These are passed to the \fBINPUT\fP Doxygen configuration tag in the
generated \fBDoxyfile.<target\-name>\fP\&.  Files listed here are also added
as \fBSOURCES\fP argument of the underlying \fI\%add_custom_target()\fP
command so they appear in IDE project\(aqs source list.
.sp
When using the \fBUSE_STAMP_FILE\fP option, only files (not directories,
symlinks, or wildcards) are allowed, and each must exist when this
command is called.
.TP
.B \fBALL\fP
Added in version 3.12.

.sp
Adds the created documentation target to the default build target so
that it runs automatically as part of the build phase.
.TP
.B \fBUSE_STAMP_FILE\fP
Added in version 3.16.

.sp
Enables use of a stamp file to avoid regenerating documentation unless
source files have changed.
.sp
Stamp file named \fB<target\-name>.stamp\fP is created in the current binary
directory by an underlying custom command.
.sp
With this option present, all entries in \fB<files\-or\-dirs>\fP must be
existing files (i.e. no directories, symlinks or wildcards) when this
command is called.  An error is raised if any listed path is invalid.
.sp
Without this option, CMake will re\-run Doxygen every time the
\fB<target\-name>\fP target is built, regardless of whether any input source
file listed in \fB<files\-or\-dirs>\fP has changed.
.TP
.B \fBWORKING_DIRECTORY <dir>\fP
By default, the Doxygen working directory is the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).  This aligns with using relative
input paths.
.sp
Use this option, to change and override the directory where Doxygen is
being run.  The absolute path \fB<dir>\fP will then be used as the base
point for relative paths.
.sp
Note also that Doxygen\(aqs default behavior is to strip the working
directory from relative paths in the generated documentation.  See the
\fBSTRIP_FROM_PATH\fP config tag in the \X'tty: link https://www.doxygen.nl/manual/config.html'\fI\%Doxygen manual\fP\X'tty: link' for more details.
.TP
.B \fBCOMMENT <comment>\fP
If provided, the \fB<comment>\fP string will be passed as the \fBCOMMENT\fP
argument to the underlying \fI\%add_custom_target()\fP command used to
create the custom target internally.  This appears in the build system
output, when the target is built.
.TP
.B \fBCONFIG_FILE <file>\fP
Added in version 3.27.

.sp
If specified, the given file provided with full\-path will be used as
Doxygen configuration file instead of the default
\fBDoxyfile.<target\-name>\fP\&.
.UNINDENT
.sp
Variables for customizing Doxygen configuration
.sp
The \fBdoxygen_add_docs()\fP command generates a Doxygen configuration file
containing configuration tags.  For example:
.sp
\fBDoxygen.<target\-name>\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
DOXYFILE_ENCODING      = UTF\-8
PROJECT_NAME           = DoxygenExample
PROJECT_NUMBER         = 1.2.3
PROJECT_BRIEF          = \(dqExample project using Doxygen\(dq
PROJECT_LOGO           =
OUTPUT_DIRECTORY       = /home/user/doxygen\-example/build
GENERATE_HTML          = YES
GENERATE_MAN           = NO
# ...
.EE
.UNINDENT
.UNINDENT
.sp
In CMake, these tags can be modified by setting input variables in form
of \fBDOXYGEN_<tag>\fP, where \fB<tag>\fP is one of the configuration tags
listed in the \X'tty: link https://www.doxygen.nl/manual/config.html'\fI\%Doxygen manual\fP\X'tty: link'\&.
.sp
For example, to modify the \fBGENERATE_HTML\fP and \fBGENERATE_MAN\fP
configuration tags, the following variables can be set before calling
\fBdoxygen_add_docs()\fP:
.sp
\fBCMakeLists.txt\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen)

if(Doxygen_FOUND)
  set(DOXYGEN_GENERATE_HTML NO)
  set(DOXYGEN_GENERATE_MAN YES)

  doxygen_add_docs(project_docs ${PROJECT_SOURCE_DIR})
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Default configuration
.sp
By default, \fBdoxygen_add_docs()\fP overrides several of Doxygen\(aqs settings
to better suit typical CMake projects.  Each of the following variables is
explicitly set unless already defined prior to calling
\fBdoxygen_add_docs()\fP, with a few exceptions noted below:
.INDENT 7.0
.TP
.B \fBDOXYGEN_HAVE_DOT\fP
Set to \fBYES\fP if the \fBdot\fP component was requested and found, \fBNO\fP
otherwise.  Any existing value of \fBDOXYGEN_HAVE_DOT\fP is ignored.
.TP
.B \fBDOXYGEN_DOT_MULTI_TARGETS\fP
Set to \fBYES\fP by this module (note that this requires a \fBdot\fP version
newer than 1.8.10).  This option is only meaningful if \fBDOXYGEN_HAVE_DOT\fP
is also set to \fBYES\fP\&.
.TP
.B \fBDOXYGEN_GENERATE_LATEX\fP
Set to \fBNO\fP by this module.
.TP
.B \fBDOXYGEN_WARN_FORMAT\fP
For Visual Studio based generators, this is set to the form recognized by
the Visual Studio IDE: \fB$file($line) : $text\fP\&. For all other generators,
Doxygen\(aqs default value is not overridden.
.TP
.B \fBDOXYGEN_PROJECT_NAME\fP
Populated with the name of the current project (i.e.
\fI\%PROJECT_NAME\fP).
.TP
.B \fBDOXYGEN_PROJECT_NUMBER\fP
Populated with the version of the current project (i.e.
\fI\%PROJECT_VERSION\fP).
.TP
.B \fBDOXYGEN_PROJECT_BRIEF\fP
Populated with the description of the current project (i.e.
\fI\%PROJECT_DESCRIPTION\fP).
.TP
.B \fBDOXYGEN_INPUT\fP
This variable is automatically populated with the list of files and
directories passed to \fBdoxygen_add_docs()\fP\&.  For consistent behavior
with other built\-in commands like \fI\%add_executable()\fP,
\fI\%add_library()\fP, and \fI\%add_custom_target()\fP, projects should
not set this variable manually.  If a variable named \fBDOXYGEN_INPUT\fP
is set by the project, it will be ignored and a warning will be issued.
.TP
.B \fBDOXYGEN_RECURSIVE\fP
Set to \fBYES\fP by this module.
.TP
.B \fBDOXYGEN_EXCLUDE_PATTERNS\fP
If the \fB<files\-or\-dirs>\fP argument of \fBdoxygen_add_docs()\fP contains
directories, this variable will specify patterns used to exclude files
from them.  The following patterns are added by default to ensure
CMake\-specific files and directories are not included in the input.  If
the project sets this variable, those contents are merged with these
additional patterns rather than replacing them:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
*/.git/*
*/.svn/*
*/.hg/*
*/CMakeFiles/*
*/_CPack_Packages/*
DartConfiguration.tcl
CMakeLists.txt
CMakeCache.txt
.EE
.UNINDENT
.UNINDENT
.TP
.B \fBDOXYGEN_OUTPUT_DIRECTORY\fP
Set to \fI\%CMAKE_CURRENT_BINARY_DIR\fP by this module.  If the
project provides its own value for this and it is a relative path, it
will be interpreted relative to the current binary directory
(\fI\%CMAKE_CURRENT_BINARY_DIR\fP).  This is necessary because
Doxygen will normally be run from a directory within the source tree so
that relative source paths work as expected.  If this directory does not
exist, it will be recursively created prior to executing Doxygen.
.UNINDENT
.sp
Lists
.sp
A number of Doxygen config tags accept lists of values, and Doxygen
requires them to be separated by whitespace, while in CMake a list is a
string with items separated by \fI\%semicolons\fP\&.
.sp
The \fBdoxygen_add_docs()\fP specifically checks for the following Doxygen
config tags and converts their associated CMake \fBDOXYGEN_<tag>\fP variable
values into the Doxygen\-formatted lists if set:
.INDENT 7.0
.INDENT 2.0
.IP \(bu 2
\fBABBREVIATE_BRIEF\fP
.IP \(bu 2
\fBALIASES\fP
.IP \(bu 2
\fBCITE_BIB_FILES\fP
.IP \(bu 2
\fBDIAFILE_DIRS\fP
.IP \(bu 2
\fBDOTFILE_DIRS\fP
.IP \(bu 2
\fBDOT_FONTPATH\fP
.IP \(bu 2
\fBENABLED_SECTIONS\fP
.IP \(bu 2
\fBEXAMPLE_PATH\fP
.IP \(bu 2
\fBEXAMPLE_PATTERNS\fP
.IP \(bu 2
\fBEXCLUDE\fP
.IP \(bu 2
\fBEXCLUDE_PATTERNS\fP
.IP \(bu 2
\fBEXCLUDE_SYMBOLS\fP
.IP \(bu 2
\fBEXPAND_AS_DEFINED\fP
.IP \(bu 2
\fBEXTENSION_MAPPING\fP
.IP \(bu 2
\fBEXTRA_PACKAGES\fP
.IP \(bu 2
\fBEXTRA_SEARCH_MAPPINGS\fP
.IP \(bu 2
\fBFILE_PATTERNS\fP
.IP \(bu 2
\fBFILTER_PATTERNS\fP
.IP \(bu 2
\fBFILTER_SOURCE_PATTERNS\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fBHTML_EXTRA_FILES\fP
.IP \(bu 2
\fBHTML_EXTRA_STYLESHEET\fP
.IP \(bu 2
\fBIGNORE_PREFIX\fP
.IP \(bu 2
\fBIMAGE_PATH\fP
.IP \(bu 2
\fBINCLUDE_FILE_PATTERNS\fP
.IP \(bu 2
\fBINCLUDE_PATH\fP
.IP \(bu 2
\fBINPUT\fP
.IP \(bu 2
\fBLATEX_EXTRA_FILES\fP
.IP \(bu 2
\fBLATEX_EXTRA_STYLESHEET\fP
.IP \(bu 2
\fBMATHJAX_EXTENSIONS\fP
.IP \(bu 2
\fBMSCFILE_DIRS\fP
.IP \(bu 2
\fBPLANTUML_INCLUDE_PATH\fP
.IP \(bu 2
\fBPREDEFINED\fP
.IP \(bu 2
\fBQHP_CUST_FILTER_ATTRS\fP
.IP \(bu 2
\fBQHP_SECT_FILTER_ATTRS\fP
.IP \(bu 2
\fBSTRIP_FROM_INC_PATH\fP
.IP \(bu 2
\fBSTRIP_FROM_PATH\fP
.IP \(bu 2
\fBTAGFILES\fP
.IP \(bu 2
\fBTCL_SUBST\fP
.UNINDENT
.UNINDENT
.sp
For example, to customize the Doxygen file patterns, a usual
\fI\%semicolon\-separated list\fP can be set in CMake:
.sp
\fBCMakeLists.txt\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen)

if(Doxygen_FOUND)
  set(DOXYGEN_FILE_PATTERNS *.c *.cxx *.h *.hxx)
  doxygen_add_docs(example_docs ${CMAKE_CURRENT_SOURCE_DIR} ALL)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Which will produce a Doxygen list of patterns separated by spaces in the
generated configuration file:
.sp
\fBDoxyfile.<target\-name>\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
# ...
FILE_PATTERNS          = *.c *.cxx *.h *.hxx
.EE
.UNINDENT
.UNINDENT
.sp
Automatic quoting
.sp
If a Doxygen single\-value tag contains spaces, their values must be
surrounded by double quotes (\fB\(dq...\(dq\fP).  \fBdoxygen_add_docs()\fP
automatically quotes values of the following Doxygen tags when generating
the \fBDoxyfile\fP, if they contain at least one space:
.INDENT 7.0
.INDENT 2.0
.IP \(bu 2
\fBCHM_FILE\fP
.IP \(bu 2
\fBDIA_PATH\fP
.IP \(bu 2
\fBDOCBOOK_OUTPUT\fP
.IP \(bu 2
\fBDOCSET_FEEDNAME\fP
.IP \(bu 2
\fBDOCSET_PUBLISHER_NAME\fP
.IP \(bu 2
\fBDOT_FONTNAME\fP
.IP \(bu 2
\fBDOT_PATH\fP
.IP \(bu 2
\fBEXTERNAL_SEARCH_ID\fP
.IP \(bu 2
\fBFILE_VERSION_FILTER\fP
.IP \(bu 2
\fBGENERATE_TAGFILE\fP
.IP \(bu 2
\fBHHC_LOCATION\fP
.IP \(bu 2
\fBHTML_FOOTER\fP
.IP \(bu 2
\fBHTML_HEADER\fP
.IP \(bu 2
\fBHTML_OUTPUT\fP
.IP \(bu 2
\fBHTML_STYLESHEET\fP
.IP \(bu 2
\fBINPUT_FILTER\fP
.IP \(bu 2
\fBLATEX_FOOTER\fP
.IP \(bu 2
\fBLATEX_HEADER\fP
.IP \(bu 2
\fBLATEX_OUTPUT\fP
.IP \(bu 2
\fBLAYOUT_FILE\fP
.IP \(bu 2
\fBMAN_OUTPUT\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fBMAN_SUBDIR\fP
.IP \(bu 2
\fBMATHJAX_CODEFILE\fP
.IP \(bu 2
\fBMSCGEN_PATH\fP
.IP \(bu 2
\fBOUTPUT_DIRECTORY\fP
.IP \(bu 2
\fBPERL_PATH\fP
.IP \(bu 2
\fBPLANTUML_JAR_PATH\fP
.IP \(bu 2
\fBPROJECT_BRIEF\fP
.IP \(bu 2
\fBPROJECT_LOGO\fP
.IP \(bu 2
\fBPROJECT_NAME\fP
.IP \(bu 2
\fBQCH_FILE\fP
.IP \(bu 2
\fBQHG_LOCATION\fP
.IP \(bu 2
\fBQHP_CUST_FILTER_NAME\fP
.IP \(bu 2
\fBQHP_VIRTUAL_FOLDER\fP
.IP \(bu 2
\fBRTF_EXTENSIONS_FILE\fP
.IP \(bu 2
\fBRTF_OUTPUT\fP
.IP \(bu 2
\fBRTF_STYLESHEET_FILE\fP
.IP \(bu 2
\fBSEARCHDATA_FILE\fP
.IP \(bu 2
\fBUSE_MDFILE_AS_MAINPAGE\fP
.IP \(bu 2
\fBWARN_FORMAT\fP
.IP \(bu 2
\fBWARN_LOGFILE\fP
.IP \(bu 2
\fBXML_OUTPUT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fBDOXYGEN_VERBATIM_VARS\fP
Added in version 3.11.

.sp
A CMake input variable used by \fBdoxygen_add_docs()\fP to specify a list
of Doxygen input variables (including their leading \fBDOXYGEN_\fP prefix)
whose values should be passed to the generated \fBDoxyfile\fP configuration
without automatic quoting.
.sp
When using this variable, the project is then responsible for ensuring
that those variables\(aq values make sense when placed directly in the
generated \fBDoxyfile\fP configuration.  For list variables, items are
still separated by spaces in the output, but no quoting is applied to the
individual items.
.sp
For certain Doxygen tags, such as \fBALIASES\fP, automatic quoting done by
\fBdoxygen_add_docs()\fP may interfere with correct syntax (e.g., embedded
quotes).
.sp
For example, the following will quote \fBDOXYGEN_PROJECT_BRIEF\fP, but skip
each item in the \fBDOXYGEN_ALIASES\fP list (\fI\%bracket syntax\fP is used to make working with embedded quotes easier):
.sp
\fBCMakeLists.txt\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen)

if(Doxygen_FOUND)
  set(DOXYGEN_PROJECT_BRIEF \(dqString with spaces\(dq)
  set(
    DOXYGEN_ALIASES
    [[somealias=\(dq@some_command param\(dq]]
    \(dqanotherAlias=@foobar\(dq
  )
  set(DOXYGEN_VERBATIM_VARS DOXYGEN_ALIASES)

  add_doxygen_docs(project_docs ${PROJECT_SOURCE_DIR})
endif()
.EE
.UNINDENT
.UNINDENT
.sp
The resultant \fBDoxyfile\fP configuration will contain the following lines:
.sp
\fBDoxyfile.project_docs\fP
.INDENT 7.0
.INDENT 3.5
.sp
.EX
PROJECT_BRIEF = \(dqString with spaces\(dq
ALIASES       = somealias=\(dq@some_command param\(dq anotherAlias=@foobar
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Deprecated Variables
.sp
For compatibility with previous versions of CMake, the following variables
are also defined but they are deprecated and should no longer be used:
.INDENT 0.0
.TP
.B \fBDOXYGEN_EXECUTABLE\fP
Deprecated since version 3.9: Use \fBDoxygen::doxygen\fP imported target instead of referring to the
\fBdoxygen\fP executable directly.

.sp
Cache variable containing the path to the \fBdoxygen\fP command.
.TP
.B \fBDOXYGEN_DOT_FOUND\fP
Deprecated since version 3.9.

.sp
Boolean result variable indicating whether \fBdot\fP executable is found.
.TP
.B \fBDOXYGEN_DOT_EXECUTABLE\fP
Deprecated since version 3.9: Use \fBDoxygen::dot\fP imported target instead of referring to the \fBdot\fP
executable directly.

.sp
Cache variable containing the path to the \fBdot\fP command\-line executable.
.TP
.B \fBDOXYGEN_DOT_PATH\fP
Deprecated since version 3.9.

.sp
Result variable containing the path to the directory where the \fBdot\fP
executable is located as reported in \fBDOXYGEN_DOT_EXECUTABLE\fP\&.  The path
may have forward slashes even on Windows and is not suitable for direct
substitution into a \fBDoxyfile.in\fP template.  If this value is needed, get
the \fI\%IMPORTED_LOCATION\fP property of the \fBDoxygen::dot\fP target
and use \fI\%get_filename_component()\fP to extract the directory part of
that path.  Consider also using \fI\%file(TO_NATIVE_PATH)\fP to prepare
the path for a Doxygen configuration file.
.TP
.B \fBDOXYGEN_SKIP_DOT\fP
Deprecated since version 3.9.

.sp
This hint variable has no effect when specifying components in
\fBfind_package(Doxygen COMPONENTS ...)\fP\&.  In backward\-compatibility mode
(i.e. without specifying components) it prevents this find module from
searching for Graphviz\(aqs \fBdot\fP utility.
.UNINDENT
.SS Examples
.SS Examples: Finding Doxygen
.sp
Finding Doxygen:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Doxygen and specifying a minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen 1.9)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Doxygen and making it required (if not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen REQUIRED)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Doxygen as required and specifying \fBdot\fP tool as required
component and \fBmscgen\fP and \fBdia\fP tools as optional components:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen REQUIRED COMPONENTS dot OPTIONAL_COMPONENTS mscgen dia)
.EE
.UNINDENT
.UNINDENT
.SS Example: Using Doxygen in CMake
.sp
The following example demonstrates how to find Doxygen and create documentation
from source files at build phase.  Once project is built, generated
documentation files will be located in the \fBhtml\fP directory inside the
project binary directory:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake_minimum_required(VERSION 3.24)
project(
  DoxygenExample
  DESCRIPTION \(dqExample project using Doxygen\(dq
  VERSION 1.2.3
)

add_executable(example example.c)

find_package(Doxygen)

if(Doxygen_FOUND)
  doxygen_add_docs(project_docs example.c ALL USE_STAMP_FILE)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
\fBexample.c\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
/**
 * @file example.c
 * @brief A simple example to demonstrate Doxygen.
 */

#include <stdio.h>

/**
 * @brief Calculates the sum of two integers.
 *
 * @param a First integer.
 * @param b Second integer.
 * @return Sum of a and b.
 *
 * @par Example
 * @code
 * int result = sum(3, 4);
 * printf(\(dq%d\en\(dq, result); // Outputs: 7
 * @endcode
 */
int sum(int a, int b) { return a + b; }

/**
 * @brief Main function.
 *
 * @return 0 on success.
 */
int main(void)
{
  int result = sum(5, 7);
  printf(\(dqResult: %d\en\(dq, result);
  return 0;
}
.EE
.UNINDENT
.UNINDENT
.SS Example: Configuring Doxygen With Variables
.sp
In the following example, Doxygen configuration is customized using CMake
variables.  The configuration sets file patterns when using a directory as
the source input (\fI\%CMAKE_CURRENT_SOURCE_DIR\fP), enables a theme
toggle for switching between light and dark modes, suppresses Doxygen\(aqs
standard output during the build phase, specifies a Markdown file as the
main page, and disables warnings about undocumented code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen)

if(Doxygen_FOUND)
  set(DOXYGEN_FILE_PATTERNS *.c *.cxx *.md)
  set(DOXYGEN_HTML_COLORSTYLE \(dqTOGGLE\(dq)
  set(DOXYGEN_QUIET YES)
  set(DOXYGEN_USE_MDFILE_AS_MAINPAGE \(dq${CMAKE_CURRENT_SOURCE_DIR}/README.md\(dq)
  set(DOXYGEN_WARN_IF_UNDOCUMENTED NO)

  doxygen_add_docs(example_docs ${CMAKE_CURRENT_SOURCE_DIR} ALL)
endif()
.EE
.UNINDENT
.UNINDENT
.SS Example: Custom Configuration File
.sp
In the following example, a custom \fBDoxyfile\fP configuration file is created
in the current binary directory (\fI\%CMAKE_CURRENT_BINARY_DIR\fP) prior
to calling the \fBdoxygen_add_doxs()\fP\&.  This allows project\-specific
configuration tags to be customized as needed:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Doxygen)

if(Doxygen_FOUND)
  configure_file(Doxyfile.in Doxyfile)

  doxygen_add_doxs(
    example_docs
    foo.c bar.c
    ALL
    USE_STAMP_FILE
    COMMENT \(dqGenerating project documentation with custom Doxyfile\(dq
    CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
  )
endif()
.EE
.UNINDENT
.UNINDENT
.sp
\fBDoxyfile.in\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
PROJECT_NAME           = \(dqCustomized project name\(dq
OUTPUT_DIRECTORY       = \(dq@CMAKE_CURRENT_BINARY_DIR@\(dq
# ...
.EE
.UNINDENT
.UNINDENT
.SS FindEnvModules
.sp
Added in version 3.15.

.sp
Finds an Environment Modules implementation and provides commands for use in
CMake scripts:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(EnvModules [...])
.EE
.UNINDENT
.UNINDENT
.sp
The Environment Modules system is a command\-line tool that manages Unix\-like
shell environments by dynamically modifying environment variables.
It is commonly used in High\-Performance Computing (HPC) environments to
support multiple software versions or configurations.
.sp
This module is compatible with the two most common implementations:
.INDENT 0.0
.IP \(bu 2
Lua\-based Lmod
.IP \(bu 2
TCL\-based Environment Modules
.UNINDENT
.sp
This module is primarily intended for setting up compiler and library
environments within a \fI\%CTest Script\fP (\fBctest \-S\fP).
It may also be used in a \fI\%CMake Script\fP
(\fBcmake \-P\fP).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The loaded environment will not persist beyond the end of the calling
process.  Do not use this module in CMake project code (such as
\fBCMakeLists.txt\fP) to load compiler environments, as the environment
changes will not be available during the build phase.  In such a case, load
the desired environment before invoking CMake or the generated build system.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBEnvModules_FOUND\fP
Boolean indicating whether a compatible Environment Modules framework is
found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBEnvModules_COMMAND\fP
The path to a low level module command to use.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling the
\fBfind_package(EnvModules)\fP:
.INDENT 0.0
.TP
.B \fBENV{MODULESHOME}\fP
This environment variable is usually set by the Environment Modules
implementation, and can be used as a hint to locate the module command to
execute.
.UNINDENT
.SS Commands
.sp
This module provides the following commands for interacting with the
Environment Modules system, if found:
.INDENT 0.0
.TP
.B env_module
Executes an arbitrary module command:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
env_module(<command> <args>...)
env_module(
  COMMAND <command> <args>...
  [OUTPUT_VARIABLE <out\-var>]
  [RESULT_VARIABLE <ret\-var>]
)
.EE
.UNINDENT
.UNINDENT
.sp
The options are:
.INDENT 7.0
.TP
.B \fBCOMMAND <command> <args>...\fP
The module sub\-command and arguments to execute as if passed directly to
the module command in the shell environment.
.TP
.B \fBOUTPUT_VARIABLE <out\-var>\fP
Stores the standard output of the executed module command in the specified
variable.
.TP
.B \fBRESULT_VARIABLE <ret\-var>\fP
Stores the return code of the executed module command in the specified
variable.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B env_module_swap
Swaps one module for another:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
env_module_swap(
  <out\-mod>
  <in\-mod>
  [OUTPUT_VARIABLE <out\-var>]
  [RESULT_VARIABLE <ret\-var>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This is functionally equivalent to the \fBmodule swap <out\-mod> <in\-mod>\fP
shell command.
.sp
The options are:
.INDENT 7.0
.TP
.B \fBOUTPUT_VARIABLE <out\-var>\fP
Stores the standard output of the executed module command in the specified
variable.
.TP
.B \fBRESULT_VARIABLE <ret\-var>\fP
Stores the return code of the executed module command in the specified
variable.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B env_module_list
Retrieves the list of currently loaded modules:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
env_module_list(<out\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
This is functionally equivalent to the \fBmodule list\fP shell command.
The result is stored in \fB<out\-var>\fP as a properly formatted CMake
\fI\%semicolon\-separated list\fP variable.
.UNINDENT
.INDENT 0.0
.TP
.B env_module_avail
Retrieves the list of available modules:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
env_module_avail([<mod\-prefix>] <out\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
This is functionally equivalent to the \fBmodule avail <mod\-prefix>\fP shell
command.  The result is stored in \fB<out\-var>\fP as a properly formatted
CMake \fI\%semicolon\-separated list\fP variable.
.UNINDENT
.SS Examples
.sp
In the following example, this module is used in a CTest script to configure
the compiler and libraries for a Cray Programming Environment.
After the Environment Modules system is found, the \fBenv_module()\fP command is
used to load the necessary compiler, MPI, and scientific libraries to set up
the build environment.  The \fBCRAYPE_LINK_TYPE\fP environment variable is set
to \fBdynamic\fP to specify dynamic linking.  This instructs the Cray Linux
Environment compiler driver to link against dynamic libraries at runtime,
rather than linking static libraries at compile time.  As a result, the
compiler produces dynamically linked executable files.
.sp
\fBexample\-script.cmake\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CTEST_BUILD_NAME \(dqCrayLinux\-CrayPE\-Cray\-dynamic\(dq)
set(CTEST_BUILD_CONFIGURATION Release)
set(CTEST_BUILD_FLAGS \(dq\-k \-j8\(dq)
set(CTEST_CMAKE_GENERATOR \(dqUnix Makefiles\(dq)

# ...

find_package(EnvModules REQUIRED)

# Clear all currently loaded Environment Modules to start with a clean state
env_module(purge)

# Load the base module\-handling system to use other modules
env_module(load modules)

# Load Cray Programming Environment (Cray PE) support, which manages
# platform\-specific optimizations and architecture selection
env_module(load craype)

# Load the Cray programming environment
env_module(load PrgEnv\-cray)

# Load settings targeting the Intel Knights Landing (KNL) CPU architecture
env_module(load craype\-knl)

# Load the Cray MPI (Message Passing Interface) library, needed for
# distributed computing
env_module(load cray\-mpich)

# Load Cray\(aqs scientific library package, which includes optimized math
# libraries (like BLAS, LAPACK)
env_module(load cray\-libsci)

set(ENV{CRAYPE_LINK_TYPE} dynamic)

# ...
.EE
.UNINDENT
.UNINDENT
.SS FindEXPAT
.sp
Finds the native Expat headers and library.  Expat is a stream\-oriented XML
parser library written in C.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBEXPAT::EXPAT\fP
Added in version 3.10.

.sp
Target encapsulating the Expat library (\fBexpat\fP) usage requirements.  This
target is available only if Expat is found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBEXPAT_INCLUDE_DIRS\fP
Include directories containing \fBexpat.h\fP and related headers needed to use
Expat.
.TP
.B \fBEXPAT_LIBRARIES\fP
Libraries needed to link against to use Expat.
.TP
.B \fBEXPAT_FOUND\fP
Boolean indicating whether the Expat is found.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBEXPAT_USE_STATIC_LIBS\fP
Added in version 3.28.

.sp
Set to \fBTRUE\fP to use static libraries.
.sp
Added in version 3.31: Implemented on non\-Windows platforms.

.UNINDENT
.SS Examples
.sp
Finding Expat library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(EXPAT)
target_link_libraries(project_target PRIVATE EXPAT::EXPAT)
.EE
.UNINDENT
.UNINDENT
.SS FindFLEX
.sp
Finds the Fast Lexical Analyzer (Flex) command\-line generator and its library,
and provides CMake commands to create custom build rules for using Flex:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX [<version>] ...)
.EE
.UNINDENT
.UNINDENT
.sp
Flex generates lexical analyzers, also known as \fIscanners\fP or \fIlexers\fP\&.  It also
includes a runtime library (\fBfl\fP) that supplies support functions for the
generated scanners, such as input handling, buffer management, and error
reporting.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBFLEX_FOUND\fP
Boolean indicating whether (the requested version of) Flex is found.
.TP
.B \fBFLEX_VERSION\fP
The version of Flex found.
.TP
.B \fBFLEX_INCLUDE_DIRS\fP
The include directories containing headers for using Flex library.
.TP
.B \fBFLEX_LIBRARIES\fP
The libraries needed to link against to use Flex library.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBFLEX_EXECUTABLE\fP
The path to the \fBflex\fP executable.
.UNINDENT
.SS Commands
.sp
This module provides the following commands if \fBflex\fP is found:
.SS Generating Scanners
.INDENT 0.0
.TP
.B flex_target
Creates a custom build rule to generate a scanner file from a lex file using
Flex:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
flex_target(
  <name>
  <input\-lex\-file>
  <output\-scanner\-file>
  [DEFINES_FILE <header>]
  [OPTIONS <options>...]
  [COMPILE_FLAGS <string>] # Deprecated
)
.EE
.UNINDENT
.UNINDENT
.sp
Changed in version 3.17: When policy \fI\%CMP0098\fP is set to \fBNEW\fP, \fBflex\fP runs in the
\fI\%CMAKE_CURRENT_BINARY_DIR\fP directory.

.INDENT 7.0
.TP
.B \fB<name>\fP
String used as an identifier for this command invocation.
.TP
.B \fB<input\-lex\-file>\fP
The path to an input Flex source file (\fB\&.l\fP).  If given as a relative
path, it will be interpreted relative to the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.TP
.B \fB<output\-scanner\-file>\fP
The path of the output file to be generated by Flex.  If given as a relative
path, it will be interpreted relative to the current Flex working directory.
.TP
.B \fBDEFINES_FILE <header>\fP
Added in version 3.5.

.sp
If Flex is configured to output a header file, this option may be used to
specify its name.  If given as a relative path, it will be interpreted
relative to the current Flex working directory.
.TP
.B \fBOPTIONS <options>...\fP
Added in version 4.0.

.sp
A \fI\%semicolon\-separated list\fP of extra options
added to the \fBflex\fP command line.
.TP
.B \fBCOMPILE_FLAGS <string>\fP
Deprecated since version 4.0: Superseded by \fBOPTIONS <options>...\fP\&.

.sp
A string of space\-separated extra options added to the \fBflex\fP command
line. A \fI\%semicolon\-separated list\fP will not
work.
.UNINDENT
.sp
Command variables
.sp
This command also defines the following variables:
.INDENT 7.0
.TP
.B \fBFLEX_<name>_DEFINED\fP
Boolean indicating whether this command was successfully invoked.
.TP
.B \fBFLEX_<name>_INPUT\fP
The Flex source file, an alias for \fB<input\-lex\-file>\fP\&.
.TP
.B \fBFLEX_<name>_OUTPUT_HEADER\fP
Added in version 3.5.

.sp
The header file generated by \fBflex\fP, if any.
.TP
.B \fBFLEX_<name>_OUTPUTS\fP
A list of files generated by \fBflex\fP, including the output scanner file,
and the header file.
.TP
.B \fBFLEX_<name>_OPTIONS\fP
Added in version 4.0.

.sp
A list of command\-line options used for the \fBflex\fP command.
.UNINDENT
.UNINDENT
.SS Adding Dependency Between Scanner and Parser
.INDENT 0.0
.TP
.B add_flex_bison_dependency
Adds the required dependency between a scanner and a parser:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
add_flex_bison_dependency(<flex\-name> <bison\-name>)
.EE
.UNINDENT
.UNINDENT
.sp
Flex scanners often rely on token definitions generated by Bison, meaning the
code produced by Flex depends on the header file created by Bison.
.sp
This command adds the required dependency between a scanner and a parser
where \fB<flex\-name>\fP and \fB<bison\-name>\fP are the first parameters of
respectively \fBflex_target(<name> ...)\fP and
\fI\%bison_target(<name> ...)\fP commands.
.UNINDENT
.SS Examples
.SS Examples: Finding Flex
.sp
Finding Flex:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Flex and specifying its minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX 2.5.13)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Flex and making it required (if Flex is not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX 2.5.13 REQUIRED)
.EE
.UNINDENT
.UNINDENT
.SS Example: Generating Scanner
.sp
Finding Flex and generating scanner source file in the current binary directory
from the lex source file in the current source directory:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX)

if(FLEX_FOUND)
  flex_target(MyScanner lexer.l lexer.cpp)
endif()

add_executable(foo foo.cc ${FLEX_MyScanner_OUTPUTS})
.EE
.UNINDENT
.UNINDENT
.SS Example: Command\-line Options
.sp
Adding additional command\-line options to the \fBflex\fP executable can be passed
as a list.  For example, adding the \fB\-\-warn\fP option to report warnings, and
the \fB\-\-noline\fP (\fB\-L\fP) to not generate \fB#line\fP directives.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX)

if(FLEX_FOUND)
  flex_target(MyScanner lexer.l lexer.cpp OPTIONS \-\-warn \-\-noline)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
\fI\%Generator expressions\fP can be used in
the \fBOPTIONS <options>...\fP argument.  For example, to add the \fB\-\-debug\fP
(\fB\-d\fP) option only for the \fBDebug\fP build type:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX)

if(FLEX_FOUND)
  flex_target(MyScanner lexer.l lexer.cpp OPTIONS $<$<CONFIG:Debug>:\-\-debug>)
endif()
.EE
.UNINDENT
.UNINDENT
.SS Example: Using Flex Library
.sp
Finding Flex and creating an interface \fI\%imported target\fP
that encapsulates its library usage requirements for linking to a project
target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLEX)

if(FLEX_FOUND AND NOT TARGET FLEX::fl)
  add_library(FLEX::fl INTERFACE IMPORTED)
  set_target_properties(
    FLEX::fl
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${FLEX_INCLUDE_DIRS}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${FLEX_LIBRARIES}\(dq
  )
endif()

if(FLEX_FOUND)
  flex_target(MyScanner lexer.l lexer.cpp)
endif()

add_executable(Foo foo.cc ${FLEX_MyScanner_OUTPUTS})
target_link_libraries(Foo PRIVATE FLEX::fl)
.EE
.UNINDENT
.UNINDENT
.SS Example: Using Flex and Bison
.sp
The following example demonstrates, how to use Flex and \fI\%Bison\fP in CMake:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(BISON)
find_package(FLEX)

if(BISON_FOUND AND FLEX_FOUND)
  bison_target(MyParser parser.y parser.cpp)
  flex_target(MyScanner lexer.l lexer.cpp)
  add_flex_bison_dependency(MyScanner MyParser)
endif()

add_executable(Foo foo.cc ${BISON_MyParser_OUTPUTS} ${FLEX_MyScanner_OUTPUTS})

# ...
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindBISON\fP module to find Bison parser generator.
.UNINDENT
.SS FindFLTK
.sp
Finds the Fast Light Toolkit (FLTK), a cross\-platform toolkit for GUI
development.
.sp
FLTK uses CMake\-based build system and provides a package configuration file for
projects to find it.  As of its 1.4.0 version it also provides
\fI\%Imported Targets\fP that encapsulate usage requirements.  For example,
\fBfltk::fltk\fP, which can be linked to project targets where FLTK is needed.
This module takes that into account and first attempts to find FLTK in
\fIconfig mode\fP\&.  If the configuration file is not available, it falls back to
\fImodule mode\fP and searches standard locations. See also to the official FLTK
documentation for more information, how to use FLTK with CMake.
.sp
Added in version 3.11: Debug and Release library variants are found separately and use
per\-configuration variables.

.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBFLTK_FOUND\fP
Boolean indicating whether FLTK is found.
.TP
.B \fBFLTK_LIBRARIES\fP
Libraries needed to link against to use FLTK.
.TP
.B \fBFLTK_WRAP_UI\fP
Boolean indicating whether the \fBfluid\fP executable is found.  This variable
is available only if FLTK is found in \fImodule mode\fP and can be used, for
example, to conditionally invoke the \fI\%fltk_wrap_ui()\fP command if it is
needed and available.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables are also available to set or use:
.INDENT 0.0
.TP
.B \fBFLTK_FLUID_EXECUTABLE\fP
The path to the \fBfluid\fP binary tool.
.TP
.B \fBFLTK_INCLUDE_DIR\fP
The include directory containing header files needed to use FLTK.
.TP
.B \fBFLTK_BASE_LIBRARY_RELEASE\fP
Added in version 3.11.

.sp
The path to the release (optimized) FLTK base library.
.TP
.B \fBFLTK_BASE_LIBRARY_DEBUG\fP
Added in version 3.11.

.sp
The path to the debug FLTK base library.
.TP
.B \fBFLTK_GL_LIBRARY_RELEASE\fP
Added in version 3.11.

.sp
The path to the release (optimized) FLTK GL library.
.TP
.B \fBFLTK_GL_LIBRARY_DEBUG\fP
Added in version 3.11.

.sp
The path to the debug FLTK GL library.
.TP
.B \fBFLTK_FORMS_LIBRARY_RELEASE\fP
Added in version 3.11.

.sp
The path to the release (optimized) FLTK Forms library.
.TP
.B \fBFLTK_FORMS_LIBRARY_DEBUG\fP
Added in version 3.11.

.sp
The path to the debug FLTK Forms library.
.TP
.B \fBFLTK_IMAGES_LIBRARY_RELEASE\fP
Added in version 3.11.

.sp
The path to the release (optimized) FLTK Images protobuf library.
.TP
.B \fBFLTK_IMAGES_LIBRARY_DEBUG\fP
Added in version 3.11.

.sp
The path to the debug FLTK Images library.
.UNINDENT
.SS Input Variables
.sp
By default, this module searches for all FLTK libraries and its \fBfluid\fP
executable.  The following variables can be set before calling
\fBfind_package(FLTK)\fP to indicate which elements are optional for a successful
configuration:
.INDENT 0.0
.TP
.B \fBFLTK_SKIP_FLUID\fP
Set to boolean true to mark the \fBfluid\fP executable as optional.
.TP
.B \fBFLTK_SKIP_FORMS\fP
Set to boolean true to mark the FLTK Forms library as optional; it will
therefore not be included in the \fBFLTK_LIBRARIES\fP result variable.
.TP
.B \fBFLTK_SKIP_IMAGES\fP
Set to boolean true to mark the FLTK Image library as optional; it will
therefore not be included in the \fBFLTK_LIBRARIES\fP result variable.
.TP
.B \fBFLTK_SKIP_OPENGL\fP
Set to boolean true to mark the FLTK OpenGL library as optional; it will
therefore not be included in the \fBFLTK_LIBRARIES\fP result variable.
.UNINDENT
.SS Examples
.sp
Finding FLTK and conditionally creating a \fBfltk::fltk\fP imported interface
target, if it is not provided by the upstream FLTK package.  Imported target can
then be linked to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLTK)

if(FLTK_FOUND AND NOT TARGET fltk::fltk)
  add_library(fltk::fltk INTERFACE IMPORTED)
  set_target_properties(
    fltk::fltk
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${FLTK_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${FLTK_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE fltk::fltk)
.EE
.UNINDENT
.UNINDENT
.SS FindFLTK2
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically for FLTK version 2.x.  The 2.0 series was
originally a development branch intended as the next major version of FLTK.
However, it never reached stable release status, and active development has
shifted back to the FLTK 1.x branch.  For finding FLTK, including stable and
modern versions, use the \fI\%FindFLTK\fP module instead.
.UNINDENT
.UNINDENT
.sp
Finds the Fast Light Toolkit (FLTK) version 2.x, a cross\-platform toolkit for
GUI development.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBFLTK2_FOUND\fP
Boolean indicating whether FLTK 2.x is found.
.TP
.B \fBFLTK2_LIBRARIES\fP
Libraries needed to link against to use FLTK 2.x.
.TP
.B \fBFLTK2_WRAP_UI\fP
Boolean indicating whether the \fBfluid2\fP executable is found.  This variable
can be used, for example, to conditionally invoke the \fI\%fltk_wrap_ui()\fP
command if it is needed and available.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBFLTK2_FLUID_EXECUTABLE\fP
The path to the \fBfluid2\fP binary tool.
.TP
.B \fBFLTK2_INCLUDE_DIR\fP
The directory containing header files needed to use FLTK 2.x.
.TP
.B \fBFLTK2_BASE_LIBRARY\fP
The path to the FLTK 2.x library (\fBfltk2\fP).
.TP
.B \fBFLTK2_GL_LIBRARY\fP
The path to the FLTK 2.x OpenGL compatibility library (\fBfltk2_gl\fP).
.TP
.B \fBFLTK2_IMAGES_LIBRARY\fP
The path to the FLTK 2.x Images library (\fBfltk2_images\fP).
.UNINDENT
.SS Examples
.sp
Finding FLTK version 2:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(FLTK2)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindFLTK\fP module to find FLTK in a version\-agnostic way.
.UNINDENT
.SS FindFontconfig
.sp
Added in version 3.14.

.sp
Finds Fontconfig, a library for font configuration and customization.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBFontconfig::Fontconfig\fP
Target encapsulating the Fontconfig usage requirements, available if
Fontconfig is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBFontconfig_FOUND\fP
Boolean indicating whether the (requested version of) Fontconfig is found.
.TP
.B \fBFontconfig_VERSION\fP
The version of Fontconfig found.
.TP
.B \fBFontconfig_LIBRARIES\fP
The libraries to link against to use Fontconfig.
.TP
.B \fBFontconfig_INCLUDE_DIRS\fP
The include directories containing headers needed to use Fontconfig.
.TP
.B \fBFontconfig_COMPILE_OPTIONS\fP
Compiler options needed to use Fontconfig.  These should be passed to
\fI\%target_compile_options()\fP when not using the
\fBFontconfig::Fontconfig\fP imported target.
.UNINDENT
.SS Examples
.sp
Finding Fontconfig and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Fontconfig)
target_link_libraries(project_target PRIVATE Fontconfig::Fontconfig)
.EE
.UNINDENT
.UNINDENT
.SS FindFreetype
.sp
Finds the FreeType font renderer library.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBFreetype::Freetype\fP
Added in version 3.10.

.sp
Target encapsulating the Freetype library usage requirements, available if
Freetype is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBFreetype_FOUND\fP
Boolean indicating whether the (requested version of) Freetype is found.  For
backward compatibility, the \fBFREETYPE_FOUND\fP variable is also set to the
same value.
.TP
.B \fBFREETYPE_INCLUDE_DIRS\fP
Include directories containing headers needed to use Freetype.  This is the
concatenation of \fBFREETYPE_INCLUDE_DIR_ft2build\fP and
\fBFREETYPE_INCLUDE_DIR_freetype2\fP variables.
.TP
.B \fBFREETYPE_LIBRARIES\fP
Libraries needed to link against for using Freetype.
.TP
.B \fBFREETYPE_VERSION_STRING\fP
The version of Freetype found.
.UNINDENT
.sp
Added in version 3.7: Debug and Release library variants are found separately.

.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBFREETYPE_INCLUDE_DIR_ft2build\fP
The directory containing the main Freetype API configuration header.
.TP
.B \fBFREETYPE_INCLUDE_DIR_freetype2\fP
The directory containing Freetype public headers.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBFREETYPE_DIR\fP
The user may set this environment variable to the root directory of a Freetype
installation to find Freetype in non\-standard locations.
.UNINDENT
.SS Examples
.sp
Finding Freetype and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Freetype)
target_link_libraries(project_target PRIVATE Freetype::Freetype)
.EE
.UNINDENT
.UNINDENT
.SS FindGettext
.sp
Finds the GNU gettext tools and provides commands for producing multi\-lingual
messages:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gettext [<version>] ...)
.EE
.UNINDENT
.UNINDENT
.sp
GNU gettext is a system for internationalization (i18n) and localization
(l10n), consisting of command\-line tools and a runtime library (\fBlibintl\fP).
This module finds the gettext tools (such as \fBmsgmerge\fP and \fBmsgfmt\fP),
while the runtime library can be found using the separate \fI\%FindIntl\fP
module, which abstracts \fBlibintl\fP handling across various implementations.
.sp
Common file types used with gettext:
.INDENT 0.0
.TP
.B POT files
Portable Object Template (\fB\&.pot\fP) files used as the source template for
translations.
.TP
.B PO files
Portable Object (\fB\&.po\fP) files containing human\-readable translations.
.TP
.B MO files
Machine Object (\fB\&.mo\fP) files compiled from \fB\&.po\fP files for runtime use.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGettext_FOUND\fP
Boolean indicating whether (the requested version of) gettext is found.  For
backward compatibility, the \fBGETTEXT_FOUND\fP variable is also set to the same
value.
.TP
.B \fBGETTEXT_VERSION_STRING\fP
The version of gettext found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBGETTEXT_MSGMERGE_EXECUTABLE\fP
The full path to the \fBmsgmerge\fP tool for merging message catalog and
template.
.TP
.B \fBGETTEXT_MSGFMT_EXECUTABLE\fP
The full path to the \fBmsgfmt\fP tool for compiling message catalog to a binary
format.
.UNINDENT
.SS Commands
.sp
This module provides the following commands to work with gettext in CMake, if
gettext is found:
.INDENT 0.0
.TP
.B gettext_process_po_files
Creates a build rule that processes one or more \fB\&.po\fP translation files
into binary \fB\&.mo\fP files for a specified translatable language locale:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gettext_process_po_files(
  <language>
  [ALL]
  [INSTALL_DESTINATION <destdir>]
  PO_FILES <po\-files>...
)
.EE
.UNINDENT
.UNINDENT
.sp
This command defines a custom target that compiles the given \fB<po\-files>\fP
into \fB\&.mo\fP files for the specified \fB<language>\fP\&.  On first invocation,
it also creates a global custom target named \fBpofiles\fP, to which all
subsequent invocations contribute.  This target can be used to build all
translation files collectively or referenced in other CMake commands.
.sp
This command should be invoked separately for each language locale to
generate the appropriate \fB\&.mo\fP files per locale.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<language>\fP
The target translatable language locale of the PO files.
.sp
This string is typically formatted as a locale identifier (e.g., \fBde_DE\fP
for German as used in Germany, or \fBde_AT\fP for German as used in Austria,
etc.).  The part before the underscore specifies the language, and the
part after specifies the country or regional variant.  In some cases, a
shorter form using only the language code (e.g., \fBde\fP) may also be used.
.TP
.B \fBALL\fP
This option adds the generated target to the default CMake build target so
that translations are built by default.
.TP
.B \fBINSTALL_DESTINATION <destdir>\fP
Specifies the installation directory for the generated \fB\&.mo\fP files at
the install phase.  If specified, files are installed to:
\fB<destdir>/<language>/LC_MESSAGES/*.mo\fP\&.  If not specified, files are
not installed.
.TP
.B \fBPO_FILES <po\-files>...\fP
A list of one or more \fB\&.po\fP translation files to be compiled into
\fB\&.mo\fP files at build phase for the specified \fB<language>\fP\&.  Relative
paths will be interpreted relative to the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B gettext_process_pot_file
Creates a build rule that processes a gettext Portable Object Template
(\fB\&.pot\fP) file and associated \fB\&.po\fP files into compiled gettext Machine
Object (\fB\&.mo\fP) files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gettext_process_pot_file(
  <pot\-file>
  [ALL]
  [INSTALL_DESTINATION <destdir>]
  LANGUAGES <languages>...
)
.EE
.UNINDENT
.UNINDENT
.sp
This command defines a custom target named \fBpotfiles\fP that compiles the
given \fB<pot\-file>\fP and language\-specific \fB\&.po\fP files into binary \fB\&.mo\fP
files for each specified language.  The corresponding \fB<language>.po\fP
files must exist in the current binary directory
(\fI\%CMAKE_CURRENT_BINARY_DIR\fP) before this command is invoked.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<pot\-file>\fP
The path to the gettext Portable Object Template file (\fB\&.pot\fP) serving
as the source for translations.  If given as a relative path, it will be
interpreted relative to the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.TP
.B \fBALL\fP
Adds the generated target to the default CMake build target so that the
files are built by default.
.TP
.B \fBINSTALL_DESTINATION <destdir>\fP
Specifies the installation directory for the generated \fB\&.mo\fP files at
the install phase.  If specified, files are installed to:
\fB<destdir>/<language>/LC_MESSAGES/<pot\-base\-filename>.mo\fP\&.  If not
specified, files are not installed.
.TP
.B \fBLANGUAGES <languages>...\fP
A list of one or more translatable language locales (e.g., \fBen_US\fP,
\fBfr\fP, \fBde_DE\fP, \fBzh_CN\fP, etc.).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B gettext_create_translations
Creates a build rule that processes a given \fB\&.pot\fP template file and
associated \fB\&.po\fP translation files into compiled Machine Object (\fB\&.mo\fP)
files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gettext_create_translations(<pot\-file> [ALL] <po\-files>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command defines a custom target named \fBtranslations\fP that compiles
the specified \fB<pot\-file>\fP and \fB<po\-files>\fP into binary \fB\&.mo\fP files.
It also automatically adds an install rule for the generated \fB\&.mo\fP files,
installing them into the default
\fBshare/locale/<language>/LC_MESSAGES/<pot\-base\-filename>.mo\fP path during
the install phase.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<pot\-file>\fP
The path to the gettext Portable Object Template file (\fB\&.pot\fP) serving
as the source for translations.  If given as a relative path, it will be
interpreted relative to the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.TP
.B \fBALL\fP
Adds the generated target to the default CMake build target so that
translations are created by default during the build.
.TP
.B \fB<po\-files>...\fP
A list of one or more translation source files in \fB\&.po\fP format, whose
filenames must follow the format \fB<language>.po\fP\&.  Relative paths will
be interpreted relative to the current source directory
(\fI\%CMAKE_CURRENT_SOURCE_DIR\fP).
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
For better control over build and installation behavior, use
\fI\%gettext_process_po_files()\fP instead.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Examples
.SS Examples: Finding gettext
.sp
Finding the GNU gettext tools:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gettext)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding gettext and specifying a minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gettext 0.21)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding gettext and making it required (if not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gettext REQUIRED)
.EE
.UNINDENT
.UNINDENT
.SS Example: Working With gettext in CMake
.sp
When starting with gettext, \fB\&.pot\fP file is considered to be created manually.
For example, using a \fBxgettext\fP tool on the provided \fBmain.cxx\fP source
code file:
.sp
\fBmain.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <iostream>
#include <libintl.h>
#include <locale.h>

int main()
{
  // Set locale from environment
  setlocale(LC_ALL, \(dq\(dq);

  // Bind the text domain
  const char* dir = std::getenv(\(dqTEXTDOMAINDIR\(dq);
  if (!dir) {
    dir = \(dq/usr/local/share/locale\(dq;
  }
  bindtextdomain(\(dqMyApp\(dq, dir);
  textdomain(\(dqMyApp\(dq);

  std::cout << gettext(\(dqHello, World\(dq) << std::endl;

  return 0;
}
.EE
.UNINDENT
.UNINDENT
.sp
The \fBxgettext\fP tool extracts all strings from \fBgettext()\fP calls in provided
source code and creates translatable strings:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ xgettext \-o MyApp.pot main.cxx
.EE
.UNINDENT
.UNINDENT
.sp
Translatable files can be initialized by the project manually using
\fBmsginit\fP tool:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ mkdir \-p locale/de_DE
$ msginit \-l de_DE.UTF8 \-o locale/de_DE/MyApp.po \-i MyApp.pot \-\-no\-translator
.EE
.UNINDENT
.UNINDENT
.sp
which creates a human\-readable file that can be translated into a desired
language (adjust as needed):
.sp
\fBlocale/de_DE/MyApp.po\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
msgid \(dq\(dq
msgstr \(dq\(dq
\(dqLanguage: de\en\(dq
\(dqContent\-Type: text/plain; charset=UTF\-8\en\(dq
\(dqContent\-Transfer\-Encoding: 8bit\en\(dq
\(dqPlural\-Forms: nplurals=2; plural=(n != 1);\en\(dq

msgid \(dqHello, World\(dq
msgstr \(dqHallo, Welt\(dq
.EE
.UNINDENT
.UNINDENT
.sp
In CMake, the \fI\%gettext_process_po_files()\fP command provided by this
module automatically creates the needed \fB\&.mo\fP files that application loads
at runtime depending on the system environment variables such as \fBLANG\fP\&.
In the following example, also the \fI\%GNUInstallDirs\fP module is used
to provide the \fBCMAKE_INSTALL_LOCALEDIR\fP variable:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake_minimum_required(VERSION 3.24)
project(GettextExample)
include(GNUInstallDirs)

find_package(Gettext)

if(Gettext_FOUND)
  foreach(language IN ITEMS de_DE)
    gettext_process_po_files(
      ${language}
      ALL
      PO_FILES locale/${language}/MyApp.po
      INSTALL_DESTINATION ${CMAKE_INSTALL_LOCALEDIR}
    )
  endforeach()
endif()

add_executable(example main.cxx)

# Find and link Intl library to use gettext() from libintl.h
find_package(Intl)
target_link_libraries(example PRIVATE Intl::Intl)

install(TARGETS example)
.EE
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-B build
$ cmake \-\-build build
$ DESTDIR=$(pwd)/stage cmake \-\-install build
.EE
.UNINDENT
.UNINDENT
.sp
To utilize the translations, the \fBde_DE\fP locale needs to be enabled on the
system (see \fBlocale \-a\fP).  And then the localized output can be run:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ LANG=de_DE.UTF\-8 TEXTDOMAINDIR=./stage/usr/local/share/locale \e
  ./stage/usr/local/bin/example
.EE
.UNINDENT
.UNINDENT
.SS Example: Processing POT File
.sp
The \fI\%gettext_process_pot_file()\fP command processes \fB\&.po\fP translation
files located in the current binary directory into \fB\&.mo\fP files:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gettext)

if(Gettext_FOUND)
  set(languages de_DE fr zh_CN)

  foreach(language IN LISTS languages)
    configure_file(locale/${language}.po ${language}.po COPYONLY)
  endforeach()

  gettext_process_pot_file(
    MyApp.pot
    ALL
    INSTALL_DESTINATION ${CMAKE_INSTALL_LOCALEDIR}
    LANGUAGES ${languages}
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS Example: Creating Translations
.sp
Using a simplified \fI\%gettext_create_translations()\fP command to create
\fB\&.mo\fP files:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gettext)

if(Gettext_FOUND)
  gettext_create_translations(
    MyApp.pot
    ALL
    locale/de_DE.po
    locale/fr.po
    locale/zh_CN.po
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindIntl\fP module to find the Gettext runtime library (libintl).
.UNINDENT
.SS FindGIF
.sp
Finds the Graphics Interchange Format (GIF) library (\fBgiflib\fP).
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBGIF::GIF\fP
Added in version 3.14.

.sp
Target that encapsulates the usage requirements of the GIF library, available
when the library is found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBGIF_FOUND\fP
Boolean indicating whether the GIF library was found.
.TP
.B \fBGIF_INCLUDE_DIRS\fP
Include directories needed to use the GIF library.
.TP
.B \fBGIF_LIBRARIES\fP
Libraries needed to link to the GIF library.
.TP
.B \fBGIF_VERSION\fP
Version string of the GIF library found (for example, \fB5.1.4\fP).  For GIF
library versions prior to 4.1.6, version string will be set only to \fB3\fP or
\fB4\fP as these versions did not provide version information in their headers.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBGIF_INCLUDE_DIR\fP
Directory containing the \fBgif_lib.h\fP and other GIF library headers.
.TP
.B \fBGIF_LIBRARY\fP
Path to the GIF library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBGIF_DIR\fP
Environment variable that can be set to help locate a GIF library installed in
a custom location.  It should point to the installation destination that was
used when configuring, building, and installing GIF library:
\fB\&./configure \-\-prefix=$GIF_DIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding GIF library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GIF)
target_link_libraries(project_target PRIVATE GIF::GIF)
.EE
.UNINDENT
.UNINDENT
.SS FindGit
.sp
Finds the Git distributed version control system.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP when the
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP:
.INDENT 0.0
.TP
.B \fBGit::Git\fP
Added in version 3.14.

.sp
Target that encapsulates Git command\-line client executable.  It can be used
in \fI\%generator expressions\fP, and
commands like \fI\%add_custom_target()\fP and \fI\%add_custom_command()\fP\&.
This target is available only if Git is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGit_FOUND\fP
Boolean indicating whether the Git was found.  For backward compatibility, the
\fBGIT_FOUND\fP variable is also set to the same value.
.TP
.B \fBGIT_VERSION_STRING\fP
The version of Git found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBGIT_EXECUTABLE\fP
Path to the \fBgit\fP command\-line client executable.
.UNINDENT
.SS Examples
.sp
Finding Git and retrieving the latest commit from the project repository:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Git)
if(Git_FOUND)
  execute_process(
    COMMAND ${GIT_EXECUTABLE} \-\-no\-pager log \-n 1 HEAD \(dq\-\-pretty=format:%h %s\(dq
    OUTPUT_VARIABLE output
    RESULT_VARIABLE result
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(result EQUAL 0)
    message(STATUS \(dqLast Git commit: ${output}\(dq)
  endif()
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindGLEW
.sp
Finds the OpenGL Extension Wrangler Library (GLEW).
.sp
GLEW is a cross\-platform C/C++ library that helps manage OpenGL extensions by
providing efficient run\-time mechanisms to query and load OpenGL functionality
beyond the core specification.
.sp
Added in version 3.7: Debug and Release library variants are found separately.

.sp
Added in version 3.15: If GLEW is built using its CMake\-based build system, it provides a CMake
package configuration file (\fBGLEWConfig.cmake\fP).  This module now takes that
into account and first attempts to find GLEW in \fIconfig mode\fP\&.  If the
configuration file is not available, it falls back to \fImodule mode\fP and
searches standard locations.

.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBGLEW::GLEW\fP
Added in version 3.1.

.sp
The main imported target encapsulating the GLEW usage requirements, available
if GLEW is found.  It maps usage requirements of either \fBGLEW::glew\fP or
\fBGLEW::glew_s\fP target depending on their availability.
.TP
.B \fBGLEW::glew\fP
Added in version 3.15.

.sp
Target encapsulating the usage requirements for a shared GLEW library.  This
target is available if GLEW is found and static libraries aren\(aqt requested via
the \fBGLEW_USE_STATIC_LIBS\fP hint variable (see below).
.TP
.B \fBGLEW::glew_s\fP
Added in version 3.15.

.sp
Target encapsulating the usage requirements for a static GLEW library.  This
target is available if GLEW is found and the \fBGLEW_USE_STATIC_LIBS\fP hint
variable is set to boolean true.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGLEW_FOUND\fP
Boolean indicating whether GLEW is found.
.TP
.B \fBGLEW_VERSION\fP
Added in version 3.15.

.sp
The version of GLEW found.
.TP
.B \fBGLEW_VERSION_MAJOR\fP
Added in version 3.15.

.sp
The major version of GLEW found.
.TP
.B \fBGLEW_VERSION_MINOR\fP
Added in version 3.15.

.sp
The minor version of GLEW found.
.TP
.B \fBGLEW_VERSION_MICRO\fP
Added in version 3.15.

.sp
The micro version of GLEW found.
.TP
.B \fBGLEW_INCLUDE_DIRS\fP
Include directories needed to use GLEW library.
.TP
.B \fBGLEW_LIBRARIES\fP
Libraries needed to link against to use GLEW library (shared or static
depending on configuration).
.TP
.B \fBGLEW_SHARED_LIBRARIES\fP
Added in version 3.15.

.sp
Libraries needed to link against to use shared GLEW library.
.TP
.B \fBGLEW_STATIC_LIBRARIES\fP
Added in version 3.15.

.sp
Libraries needed to link against to use static GLEW library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling
\fBfind_package(GLEW)\fP to influence this module\(aqs behavior:
.INDENT 0.0
.TP
.B \fBGLEW_USE_STATIC_LIBS\fP
Added in version 3.15.

.sp
Set to boolean true to find static GLEW library and create the
\fBGLEW::glew_s\fP imported target for static linkage.
.TP
.B \fBGLEW_VERBOSE\fP
Added in version 3.15.

.sp
Set to boolean true to output a detailed log of this module.  Can be used, for
example, for debugging.
.UNINDENT
.SS Examples
.sp
Finding GLEW and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GLEW)
target_link_libraries(project_target PRIVATE GLEW::GLEW)
.EE
.UNINDENT
.UNINDENT
.sp
Using the static GLEW library, if found:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(GLEW_USE_STATIC_LIBS TRUE)
find_package(GLEW)
target_link_libraries(project_target PRIVATE GLEW::GLEW)
.EE
.UNINDENT
.UNINDENT
.SS FindGLUT
.sp
Finds the OpenGL Utility Toolkit (GLUT) library, which provides a simple API for
creating windows, handling input, and managing events in OpenGL applications.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBGLUT::GLUT\fP
Added in version 3.1.

.sp
Target encapsulating the GLUT usage requirements, available if GLUT is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGLUT_FOUND\fP
Boolean indicating whether GLUT is found.
.TP
.B \fBGLUT_INCLUDE_DIRS\fP
Added in version 3.23.

.sp
Include directories needed to use GLUT.  Starting with CMake 3.23, this
variable is intended to be used in target usage requirements instead of the
cache variable \fBGLUT_INCLUDE_DIR\fP, which is intended for finding GLUT.
.TP
.B \fBGLUT_LIBRARIES\fP
List of libraries needed to link against for using GLUT.
.UNINDENT
.SS Cache Variables
.sp
This module may set the following cache variables depending on platform.
These variables may optionally be set to help this module find the
correct files, but should not be used as result variables:
.INDENT 0.0
.TP
.B \fBGLUT_INCLUDE_DIR\fP
The full path to the directory containing \fBGL/glut.h\fP (without the \fBGL/\fP).
.TP
.B \fBGLUT_glut_LIBRARY\fP
The full path to the \fBglut\fP library.
.TP
.B \fBGLUT_Xi_LIBRARY\fP
The full path to the dependent \fBXi\fP (X Input Device Extension) library on
some systems.
.TP
.B \fBGLUT_Xmu_LIBRARY\fP
The full path to the dependent \fBXmu\fP (X Miscellaneous Utilities) library on
some systems.
.UNINDENT
.SS Examples
.sp
Finding GLUT and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GLUT)
target_link_libraries(project_target PRIVATE GLUT::GLUT)
.EE
.UNINDENT
.UNINDENT
.SS FindGnuplot
.sp
Finds the Gnuplot command\-line graphing utility for generating two\- and
three\-dimensional plots (\fBgnuplot\fP).
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBGnuplot_FOUND\fP
Boolean indicating whether Gnuplot has been found.  For backward
compatibility, the \fBGNUPLOT_FOUND\fP variable is also set to the same value.
.TP
.B \fBGNUPLOT_VERSION_STRING\fP
The version of Gnuplot found.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Version detection is available only for Gnuplot 4 and later.  Earlier
versions did not provide version output.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBGNUPLOT_EXECUTABLE\fP
Absolute path to the \fBgnuplot\fP executable.
.UNINDENT
.SS Examples
.sp
Finding Gnuplot:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Gnuplot)
.EE
.UNINDENT
.UNINDENT
.SS FindGnuTLS
.sp
Finds the GNU Transport Layer Security library (GnuTLS).  The GnuTLS
package includes the main libraries (libgnutls and libdane), as well as the
optional gnutls\-openssl compatibility extra library.  They are all distributed
as part of the same release.  This module checks for the presence of the main
libgnutls library and provides usage requirements for integrating GnuTLS into
CMake projects.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBGnuTLS::GnuTLS\fP
Added in version 3.16.

.sp
Target encapsulating the GnuTLS usage requirements, available if GnuTLS is
found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGnuTLS_FOUND\fP
Boolean indicating whether the (requested version of) GnuTLS is found.  For
backward compatibility, the \fBGNUTLS_FOUND\fP variable is also set to the same
value.
.TP
.B \fBGNUTLS_VERSION\fP
Added in version 3.16.

.sp
The version of GnuTLS found.
.TP
.B \fBGNUTLS_INCLUDE_DIRS\fP
Include directories needed to use GnuTLS.
.TP
.B \fBGNUTLS_LIBRARIES\fP
Libraries needed to link against to use GnuTLS.
.TP
.B \fBGNUTLS_DEFINITIONS\fP
Compiler options required for using GnuTLS.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBGNUTLS_INCLUDE_DIR\fP
The directory containing the \fBgnutls/gnutls.h\fP header file.
.TP
.B \fBGNUTLS_LIBRARY\fP
The path to the GnuTLS library.
.UNINDENT
.SS Deprecated Variables
.sp
These variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBGNUTLS_VERSION_STRING\fP
Deprecated since version 3.16: Superseded by \fBGNUTLS_VERSION\fP\&.

.sp
The version of GnuTLS found.
.UNINDENT
.SS Examples
.sp
Finding GnuTLS and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GnuTLS)
target_link_libraries(project_target PRIVATE GnuTLS::GnuTLS)
.EE
.UNINDENT
.UNINDENT
.SS FindGSL
.sp
Added in version 3.2.

.sp
Finds the native GNU Scientific Library (GSL) includes and libraries.
.sp
The GNU Scientific Library (GSL) is a numerical library for C and C++
programmers. It is free software under the GNU General Public
License.
.SS Imported Targets
.sp
If GSL is found, this module defines the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBGSL::gsl\fP
The main GSL library that provides all usage requirements to use GSL.
.TP
.B \fBGSL::gslcblas\fP
The CBLAS support library used by GSL.  It is linked also into the
\fBGSL::gsl\fP target but provided separately for granularity.
.UNINDENT
.SS Result Variables
.sp
This module will set the following variables in the project:
.INDENT 0.0
.TP
.B \fBGSL_FOUND\fP
True if GSL is found on the local system.
.TP
.B \fBGSL_INCLUDE_DIRS\fP
Directory containing GSL header files.
.TP
.B \fBGSL_LIBRARIES\fP
The GSL libraries.
.TP
.B \fBGSL_VERSION\fP
The version of the discovered GSL installation.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBGSL_ROOT_DIR\fP
Set this variable to a directory that contains a GSL installation.
.sp
If this variable is not set, this module will use pkg\-config and default paths
to find GSL.  If this variable is provided, then this module expects to find
libraries at \fB${GSL_ROOT_DIR}/lib\fP and the GSL headers at
\fB${GSL_ROOT_DIR}/include/gsl\fP\&.
.sp
The library directory may optionally provide Release and Debug folders.  If
available, the libraries named \fBgsld\fP, \fBgslblasd\fP or \fBcblasd\fP are
recognized as debug libraries.  For Unix\-like systems, this module will also
use \fBgsl\-config\fP (if found) to aid in the discovery of GSL.
.UNINDENT
.SS Cache Variables
.sp
This module may set the following variables depending on platform and type
of GSL installation discovered.  These variables may optionally be set to
help this module find the correct files:
.INDENT 0.0
.TP
.B \fBGSL_CBLAS_LIBRARY\fP
Location of the GSL CBLAS library.
.TP
.B \fBGSL_CBLAS_LIBRARY_DEBUG\fP
Location of the debug GSL CBLAS library (if any).
.TP
.B \fBGSL_CONFIG_EXECUTABLE\fP
Location of the \fBgsl\-config\fP script (if any).
.TP
.B \fBGSL_LIBRARY\fP
Location of the GSL library.
.TP
.B \fBGSL_LIBRARY_DEBUG\fP
Location of the debug GSL library (if any).
.UNINDENT
.SS Examples
.sp
Finding GSL and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GSL)
target_link_libraries(project_target PRIVATE GSL::gsl)
.EE
.UNINDENT
.UNINDENT
.SS FindGTest
.sp
Finds GoogleTest, the Google C++ testing and mocking framework:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTest [...])
.EE
.UNINDENT
.UNINDENT
.sp
The GoogleTest framework also includes GoogleMock, a library for writing
and using C++ mock classes.  On some systems, GoogleMock may be distributed
as a separate package.
.sp
When both debug and release (optimized) variants of the GoogleTest and
GoogleMock libraries are available, this module selects the appropriate
variants based on the current \fI\%Build Configuration\fP\&.
.sp
Added in version 3.20: If GoogleTest is built and installed using its CMake\-based build system, it
provides a \fI\%package configuration file\fP
(\fBGTestConfig.cmake\fP) that can be used with \fI\%find_package()\fP in
\fI\%Config mode\fP\&.  By default, this module now searches for that
configuration file and, if found, returns the results without further
action.  If the upstream configuration file is not found, this module falls
back to \fI\%Module mode\fP and searches standard locations.

.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBGTest::gtest\fP
Added in version 3.20.

.sp
Target encapsulating the usage requirements of the GoogleTest \fBgtest\fP
library, available if GoogleTest is found.  The \fBgtest\fP library provides
the core GoogleTest testing framework functionality.
.TP
.B \fBGTest::gtest_main\fP
Added in version 3.20.

.sp
Target encapsulating the usage requirements of the GoogleTest \fBgtest_main\fP
library, available if GoogleTest is found.  The \fBgtest_main\fP library
provides a \fBmain()\fP function, allowing tests to be run without defining
one manually.
.sp
Only link to \fBGTest::gtest_main\fP if GoogleTest should supply the
\fBmain()\fP function for the executable.  If the project is supplying its
own \fBmain()\fP implementation, link only to \fBGTest::gtest\fP\&.
.TP
.B \fBGTest::gmock\fP
Added in version 3.23.

.sp
Target encapsulating the usage requirements of the GoogleMock \fBgmock\fP
library, available if GoogleTest and its Mock library are found.  The
\fBgmock\fP library provides facilities for writing and using mock classes
in C++.
.TP
.B \fBGTest::gmock_main\fP
Added in version 3.23.

.sp
Target encapsulating the usage requirements of the GoogleMock \fBgmock_main\fP
library, available if GoogleTest and \fBgmock_main\fP are found.  The
\fBgmock_main\fP library provides a \fBmain()\fP function, allowing GoogleMock
tests to be run without defining one manually.
.sp
Only link to \fBGTest::gmock_main\fP if GoogleTest should supply the
\fBmain()\fP function for the executable.  If project is supplying its own
\fBmain()\fP implementation, link only to \fBGTest::gmock\fP\&.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGTest_FOUND\fP
Boolean indicating whether GoogleTest is found.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling
\fBfind_package(GTest)\fP:
.INDENT 0.0
.TP
.B \fBGTEST_ROOT\fP
The root directory of the GoogleTest installation (may also be set as an
environment variable).  This variable is used only when GoogleTest is found
in \fI\%Module mode\fP\&.
.TP
.B \fBGTEST_MSVC_SEARCH\fP
When compiling with MSVC, this variable controls which GoogleTest build
variant to search for, based on the runtime library linkage model.  This
variable is used only when GoogleTest is found in \fI\%Module mode\fP and
accepts one of the following values:
.INDENT 7.0
.TP
.B \fBMD\fP
(Default) Searches for shared library variants of GoogleTest that are
built to link against the dynamic C runtime.  These libraries are
typically compiled with the MSVC runtime flags \fB/MD\fP or \fB/MDd\fP (for
Release or Debug, respectively).
.TP
.B \fBMT\fP
Searches for static library variants of GoogleTest that are built to
link against the static C runtime.  These libraries are typically
compiled with the MSVC runtime flags \fB/MT\fP or \fB/MTd\fP\&.
.UNINDENT
.UNINDENT
.SS Deprecated Items
.SS Deprecated Variables
.sp
The following variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBGTEST_INCLUDE_DIRS\fP
Deprecated since version 4.1: Use the \fBGTest::gtest\fP imported target instead, which exposes the
required include directories through its
\fI\%INTERFACE_INCLUDE_DIRECTORIES\fP target property.

.sp
Result variable that provides include directories containing headers
needed to use GoogleTest.  This variable is only guaranteed to be available
when GoogleTest is found in \fI\%Module mode\fP\&.
.TP
.B \fBGTEST_LIBRARIES\fP
Deprecated since version 4.1: Use the \fBGTest::gtest\fP imported target instead.

.sp
Result variable providing libraries needed to link against to use the
GoogleTest \fBgtest\fP library.  Note that projects are also responsible
for linking with an appropriate thread library in addition to the libraries
specified by this variable.
.TP
.B \fBGTEST_MAIN_LIBRARIES\fP
Deprecated since version 4.1: Use the \fBGTest::gtest_main\fP imported target instead.

.sp
Result variable providing libraries needed to link against to use the
GoogleTest \fBgtest_main\fP library.
.TP
.B \fBGTEST_BOTH_LIBRARIES\fP
Deprecated since version 4.1: Use the \fBGTest::gtest\fP and \fBGTest::gtest_main\fP imported targets
instead.

.sp
Result variable providing both \fBgtest\fP and \fBgtest_main\fP libraries
combined.
.UNINDENT
.SS Deprecated Imported Targets
.sp
For backward compatibility, this module also provides the following imported
targets (available since CMake 3.5):
.INDENT 0.0
.TP
.B \fBGTest::GTest\fP
Deprecated since version 3.20: Use the \fBGTest::gtest\fP imported target instead.

.sp
Imported target linking the \fBGTest::gtest\fP library.
.TP
.B \fBGTest::Main\fP
Deprecated since version 3.20: Use the \fBGTest::gtest_main\fP imported target instead.

.sp
Imported target linking the \fBGTest::gtest_main\fP library.
.UNINDENT
.SS Examples
.SS Examples: Finding GoogleTest
.sp
Finding GoogleTest:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GoogleTest)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding GoogleTest and making it required (if not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GoogleTest REQUIRED)
.EE
.UNINDENT
.UNINDENT
.SS Examples: Using Imported Targets
.sp
In the following example, the \fBGTest::gtest\fP imported target is linked to
a project target, which enables using the core GoogleTest testing framework:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTest REQUIRED)

target_link_libraries(foo PRIVATE GTest::gtest)
.EE
.UNINDENT
.UNINDENT
.sp
In the next example, the \fBGTest::gtest_main\fP imported target is also linked
to the executable, and a test is registered.  The \fBGTest::gtest_main\fP library
provides a \fBmain()\fP function, so there is no need to write one manually.
The \fBGTest::gtest\fP library is still linked because the test code directly
uses things provided by \fBGTest::gtest\fP, and good practice is to link directly
to libraries used directly.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
enable_testing()

find_package(GTest REQUIRED)

add_executable(foo foo.cc)
target_link_libraries(foo PRIVATE GTest::gtest GTest::gtest_main)

add_test(NAME AllTestsInFoo COMMAND foo)
.EE
.UNINDENT
.UNINDENT
.SS Deeper Integration With CTest
.sp
This module is commonly used with the \fI\%GoogleTest\fP module, which
provides \fI\%gtest_discover_tests()\fP and \fI\%gtest_add_tests()\fP
commands to help integrate GoogleTest infrastructure with CTest:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTest)
target_link_libraries(example PRIVATE GTest::gtest GTest::gtest_main)

include(GoogleTest)
gtest_discover_tests(example)

# ...
.EE
.UNINDENT
.UNINDENT
.sp
Changed in version 3.9: Previous CMake versions defined the \fI\%gtest_add_tests()\fP command in
this module.

.SS FindGTK
.sp
Finds GTK, glib and GTKGLArea.
.sp
GTK is a multi\-platform toolkit for creating graphical user interfaces.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module works only on Unix\-like systems and was intended for early GTK
branch of 1.x, which is no longer maintained.  Use the latest supported GTK
version and \fI\%FindPkgConfig\fP module to find GTK in CMake instead of
this module.  For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk4>=4.14)
target_link_libraries(example PRIVATE PkgConfig::GTK)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGTK_FOUND\fP
Boolean indicating whether GTK is found.
.TP
.B \fBGTK_GL_FOUND\fP
Boolean indicating whether GTK\(aqs GL features are found.
.TP
.B \fBGTK_INCLUDE_DIR\fP
Include directories containing headers needed to use GTK.
.TP
.B \fBGTK_LIBRARIES\fP
Libraries needed to link against for using GTK.
.UNINDENT
.SS Examples
.sp
Finding GTK 1.x and creating an interface \fI\%imported target\fP that encapsulates its usage requirements for linking to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTK)

if(GTK_FOUND)
  add_library(GTK::GTK INTERFACE IMPORTED)
  set_target_properties(
    GTK::GTK
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${GTK_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${GTK_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE GTK::GTK)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindGTK2\fP module to find GTK version 2.
.UNINDENT
.SS FindGTK2
.sp
Finds the GTK widget libraries and several of its other optional components.
.sp
GTK is a multi\-platform toolkit for creating graphical user interfaces.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically for GTK version 2.x, which is obsolete and no
longer maintained.  Use the latest supported GTK version and
\fI\%FindPkgConfig\fP module to find GTK in CMake instead of this module.
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk4>=4.14)
target_link_libraries(example PRIVATE PkgConfig::GTK)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Components
.sp
This module supports optional components, which can be specified with the
\fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTK2 [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Supported components include:
.INDENT 0.0
.INDENT 2.0
.IP \(bu 2
\fBatk\fP
.IP \(bu 2
\fBatkmm\fP
.IP \(bu 2
\fBcairo\fP
.IP \(bu 2
\fBcairomm\fP
.IP \(bu 2
\fBgdk_pixbuf\fP
.IP \(bu 2
\fBgdk\fP
.IP \(bu 2
\fBgdkmm\fP
.IP \(bu 2
\fBgio\fP
.IP \(bu 2
\fBgiomm\fP
.IP \(bu 2
\fBglade\fP
.IP \(bu 2
\fBglademm\fP
.IP \(bu 2
\fBglib\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fBglibmm\fP
.IP \(bu 2
\fBgmodule\fP
.IP \(bu 2
\fBgobject\fP
.IP \(bu 2
\fBgthread\fP
.IP \(bu 2
\fBgtk\fP
.IP \(bu 2
\fBgtkmm\fP
.IP \(bu 2
\fBpango\fP
.IP \(bu 2
\fBpangocairo\fP
.IP \(bu 2
\fBpangoft2\fP
.IP \(bu 2
\fBpangomm\fP
.IP \(bu 2
\fBpangoxft\fP
.IP \(bu 2
\fBsigc\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Added in version 3.16.7: \fBharfbuzz\fP

.UNINDENT
.sp
If no components are specified, module by default searches for the \fBgtk\fP
component.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP (subject to
component selection):
.INDENT 0.0
.TP
.B \fBGTK2::<component>\fP
Target encapsulating the specified GTK component usage requirements,
available if GTK and this component are found.  The \fB<component>\fP should
be written in the same case, as listed above.  For example, use
\fBGTK2::gtk\fP for the \fBgtk\fP component, or \fBGTK2::gdk_pixbuf\fP for the
\fBgdk_pixbuf\fP component, etc.
.TP
.B \fBGTK2::sigc++\fP
Added in version 3.5.

.sp
Target encapsulating the usage requirements to enable c++11 on its dependents
when using sigc++ 2.5.1 or higher.  This target is automatically applied to
dependent targets as needed.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBGTK2_FOUND\fP
Boolean indicating whether GTK and all specified components are found.
.TP
.B \fBGTK2_VERSION\fP
The version of GTK found (x.y.z).
.TP
.B \fBGTK2_MAJOR_VERSION\fP
The major version of GTK found.
.TP
.B \fBGTK2_MINOR_VERSION\fP
The minor version of GTK found.
.TP
.B \fBGTK2_PATCH_VERSION\fP
The patch version of GTK found.
.TP
.B \fBGTK2_INCLUDE_DIRS\fP
Include directories containing headers needed to use GTK.
.TP
.B \fBGTK2_LIBRARIES\fP
Libraries needed to link against to use GTK.
.TP
.B \fBGTK2_TARGETS\fP
Added in version 3.5.

.sp
A list of all defined imported targets.
.TP
.B \fBGTK2_DEFINITIONS\fP
Additional compiler flags needed to use GTK.
.UNINDENT
.SS Input Variables
.sp
This module accepts the following optional variables before calling the
\fBfind_package(GTK2)\fP:
.INDENT 0.0
.TP
.B \fBGTK2_DEBUG\fP
Boolean variable that enables verbose debugging output of this module.
.TP
.B \fBGTK2_ADDITIONAL_SUFFIXES\fP
A list of additional path suffixes to search for include files.
.TP
.B \fBGTK2_USE_IMPORTED_TARGETS\fP
Added in version 3.5.

.sp
When this variable is set to boolean true, \fBGTK2_LIBRARIES\fP variable will
contain a list imported targets instead of library paths.
.UNINDENT
.SS Examples
.SS Examples: Finding GTK version 2
.sp
Call \fI\%find_package()\fP once.  Here are some examples to pick from.
.sp
Require GTK 2.6 or later:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTK2 2.6 REQUIRED COMPONENTS gtk)
.EE
.UNINDENT
.UNINDENT
.sp
Require GTK 2.10 or later and its Glade component:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTK2 2.10 REQUIRED COMPONENTS gtk glade)
.EE
.UNINDENT
.UNINDENT
.sp
Search for GTK/GTKMM 2.8 or later:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTK2 2.8 COMPONENTS gtk gtkmm)
.EE
.UNINDENT
.UNINDENT
.sp
Finding GTK 2 and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(GTK2)
add_executable(mygui mygui.cc)
target_link_libraries(mygui PRIVATE GTK2::gtk)
.EE
.UNINDENT
.UNINDENT
.SS Examples: Finding GTK version 3 or later
.sp
Finding GTK 3 with \fI\%FindPkgConfig\fP instead of this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK3 REQUIRED IMPORTED_TARGET gtk+\-3.0>=3.14)
target_link_libraries(example PRIVATE PkgConfig::GTK3)
.EE
.UNINDENT
.UNINDENT
.sp
Or similarly to find GTK 4:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK4 REQUIRED IMPORTED_TARGET gtk4>=4.14)
target_link_libraries(example PRIVATE PkgConfig::GTK4)
.EE
.UNINDENT
.UNINDENT
.SS FindHDF5
.sp
Finds Hierarchical Data Format (HDF5), a library for reading and writing
self\-describing array data:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5 [<version>] ... [COMPONENTS <components>...] ...)
.EE
.UNINDENT
.UNINDENT
.sp
If the HDF5 library is built using its CMake\-based build system, it will as
of HDF5 version 1.8.15 provide its own CMake Package Configuration file
(\fBhdf5\-config.cmake\fP) for use with the \fI\%find_package()\fP command in
\fIconfig mode\fP\&.  By default, this module searches for this file and, if found,
returns the results based on the found configuration.
.sp
If the upstream configuration file is not found, this module falls back to
\fImodule mode\fP and invokes the HDF5 wrapper compiler typically installed
with the HDF5 library.  Depending on the configuration, this wrapper
compiler is named either \fBh5cc\fP (serial) or \fBh5pcc\fP (parallel).  If
found, the wrapper is queried with the \fB\-show\fP argument to determine the
compiler and linker flags required for building an HDF5 client application.
Both serial and parallel versions of the HDF5 wrapper are considered.  The
first directory containing either is used.  If both versions are found in the
same directory, the serial version is preferred by default.  To change this
behavior, set the variable \fBHDF5_PREFER_PARALLEL\fP to \fBTRUE\fP\&.
.sp
In addition to finding the include directories and libraries needed to compile
an HDF5 application, this module also attempts to find additional tools
provided by the HDF5 distribution, which can be useful for regression testing
or development workflows.
.SS Components
.sp
This module supports optional components, which can be specified with the
\fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5 [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Supported components include:
.INDENT 0.0
.TP
.B \fBC\fP
Finds the \fBHDF5\fP C library (C bindings).
.TP
.B \fBCXX\fP
Finds the \fBHDF5\fP C++ library (C++ bindings).
.TP
.B \fBFortran\fP
Finds the \fBHDF5\fP Fortran library (Fortran bindings).
.TP
.B \fBHL\fP
This component can be used in combination with other components to find the
high\-level (HL) HDF5 library variants for C, CXX, and/or Fortran, which
provide high\-level functions.
.UNINDENT
.sp
If no components are specified, then this module will by default search for the
\fBC\fP component.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBHDF5::HDF5\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for all found HDF5 libraries
(\fBHDF5_LIBRARIES\fP), available if HDF5 and all required components are found.
.TP
.B \fBhdf5::hdf5\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for the HDF5 C library, available
if HDF5 library and its \fBC\fP component are found.
.TP
.B \fBhdf5::hdf5_cpp\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for the HDF5 C and C++ libraries,
available if HDF5 library, and its \fBC\fP and \fBCXX\fP components are found.
.TP
.B \fBhdf5::hdf5_fortran\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for the HDF5 Fortran library,
available if HDF5 library and its \fBFortran\fP component are found.
.TP
.B \fBhdf5::hdf5_hl\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for the HDF5 high\-level C library,
available if HDF5 library and its \fBC\fP, and \fBHL\fP components are found.
.TP
.B \fBhdf5::hdf5_hl_cpp\fP
Added in version 3.19.

.sp
High\-level C++ library.
.sp
Target encapsulating the usage requirements for the HDF5 high\-level C and
high\-level C++ libraries, available if HDF5 library and its \fBC\fP, \fBCXX\fP,
and \fBHL\fP components are found.
.TP
.B \fBhdf5::hdf5_hl_fortran\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for the HDF5 high\-level Fortran
library, available if HDF5 library and its \fBFortran\fP, and \fBHL\fP components
are found.
.TP
.B \fBhdf5::h5diff\fP
Added in version 3.19.

.sp
Imported executable target encapsulating the usage requirements for the
\fBh5diff\fP executable, available if \fBh5diff\fP is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBHDF5_FOUND\fP
Boolean indicating whether (the requested version of) HDF5 is found.
.TP
.B \fBHDF5_VERSION\fP
Added in version 3.3.

.sp
The version of HDF5 library found.
.TP
.B \fBHDF5_INCLUDE_DIRS\fP
Include directories containing header files needed to use HDF5.
.TP
.B \fBHDF5_DEFINITIONS\fP
Required compiler definitions for using HDF5.
.TP
.B \fBHDF5_LIBRARIES\fP
Libraries of all requested bindings needed to link against to use HDF5.
.TP
.B \fBHDF5_HL_LIBRARIES\fP
Required libraries for the HDF5 high\-level API for all bindings,
if the \fBHL\fP component is enabled.
.TP
.B \fBHDF5_IS_PARALLEL\fP
Boolean indicating whether the HDF5 library has parallel IO support.
.UNINDENT
.sp
For each enabled language binding component, a corresponding
\fBHDF5_<LANG>_LIBRARIES\fP variable, and potentially
\fBHDF5_<LANG>_DEFINITIONS\fP, will be defined.  If the \fBHL\fP component is
enabled, then \fBHDF5_<LANG>_HL_LIBRARIES\fP variables will also be defined:
.INDENT 0.0
.TP
.B \fBHDF5_C_DEFINITIONS\fP
Required compiler definitions for HDF5 C bindings.
.TP
.B \fBHDF5_CXX_DEFINITIONS\fP
Required compiler definitions for HDF5 C++ bindings.
.TP
.B \fBHDF5_Fortran_DEFINITIONS\fP
Required compiler definitions for HDF5 Fortran bindings.
.TP
.B \fBHDF5_C_INCLUDE_DIRS\fP
Required include directories for HDF5 C bindings.
.TP
.B \fBHDF5_CXX_INCLUDE_DIRS\fP
Required include directories for HDF5 C++ bindings.
.TP
.B \fBHDF5_Fortran_INCLUDE_DIRS\fP
Required include directories for HDF5 Fortran bindings.
.TP
.B \fBHDF5_C_LIBRARIES\fP
Required libraries for the HDF5 C bindings.
.TP
.B \fBHDF5_CXX_LIBRARIES\fP
Required libraries for the HDF5 C++ bindings.
.TP
.B \fBHDF5_Fortran_LIBRARIES\fP
Required libraries for the HDF5 Fortran bindings.
.TP
.B \fBHDF5_C_HL_LIBRARIES\fP
Required libraries for the high\-level C bindings, if the \fBHL\fP component
is enabled.
.TP
.B \fBHDF5_CXX_HL_LIBRARIES\fP
Required libraries for the high\-level C++ bindings, if the \fBHL\fP
component is enabled.
.TP
.B \fBHDF5_Fortran_HL_LIBRARIES\fP
Required libraries for the high\-level Fortran bindings, if the \fBHL\fP
component is enabled.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBHDF5_C_COMPILER_EXECUTABLE\fP
The path to the HDF5 C wrapper compiler.
.TP
.B \fBHDF5_CXX_COMPILER_EXECUTABLE\fP
The path to the HDF5 C++ wrapper compiler.
.TP
.B \fBHDF5_Fortran_COMPILER_EXECUTABLE\fP
The path to the HDF5 Fortran wrapper compiler.
.TP
.B \fBHDF5_C_COMPILER_EXECUTABLE_NO_INTERROGATE\fP
Added in version 3.6.

.sp
The path to the primary C compiler which is also the HDF5 wrapper.
This variable is used only in \fImodule mode\fP\&.
.TP
.B \fBHDF5_CXX_COMPILER_EXECUTABLE_NO_INTERROGATE\fP
Added in version 3.6.

.sp
The path to the primary C++ compiler which is also the HDF5 wrapper.
This variable is used only in \fImodule mode\fP\&.
.TP
.B \fBHDF5_Fortran_COMPILER_EXECUTABLE_NO_INTERROGATE\fP
Added in version 3.6.

.sp
The path to the primary Fortran compiler which is also the HDF5 wrapper.
This variable is used only in \fImodule mode\fP\&.
.TP
.B \fBHDF5_DIFF_EXECUTABLE\fP
The path to the HDF5 dataset comparison tool (\fBh5diff\fP).
.UNINDENT
.SS Hints
.sp
The following variables can be set before calling the \fBfind_package(HDF5)\fP
to guide the search for HDF5 library:
.INDENT 0.0
.TP
.B \fBHDF5_PREFER_PARALLEL\fP
Added in version 3.4.

.sp
Set this to boolean true to prefer parallel HDF5 (by default, serial is
preferred).  This variable is used only in \fImodule mode\fP\&.
.TP
.B \fBHDF5_FIND_DEBUG\fP
Added in version 3.9.

.sp
Set this to boolean true to get extra debugging output by this module.
.TP
.B \fBHDF5_NO_FIND_PACKAGE_CONFIG_FILE\fP
Added in version 3.8.

.sp
Set this to boolean true to skip finding and using CMake package configuration
file (\fBhdf5\-config.cmake\fP).
.TP
.B \fBHDF5_USE_STATIC_LIBRARIES\fP
Set this to boolean value to determine whether or not to prefer a
static link to a dynamic link for \fBHDF5\fP and all of its dependencies.
.sp
Added in version 3.10: Support for \fBHDF5_USE_STATIC_LIBRARIES\fP on Windows.

.UNINDENT
.SS Examples
.SS Examples: Finding HDF5
.sp
Finding HDF5:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5)
.EE
.UNINDENT
.UNINDENT
.sp
Specifying a minimum required version of HDF5 to find:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5 1.8.15)
.EE
.UNINDENT
.UNINDENT
.sp
Finding HDF5 and making it required (if HDF5 is not found, processing stops with
an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5 1.8.15 REQUIRED)
.EE
.UNINDENT
.UNINDENT
.sp
Searching for static HDF5 libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(HDF5_USE_STATIC_LIBRARIES TRUE)
find_package(HDF5)
.EE
.UNINDENT
.UNINDENT
.sp
Specifying components to find high\-level C and C++ functions:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5 COMPONENTS C CXX HL)
.EE
.UNINDENT
.UNINDENT
.SS Examples: Using HDF5
.sp
Finding HDF5 and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5)
target_link_libraries(project_target PRIVATE HDF5::HDF5)
.EE
.UNINDENT
.UNINDENT
.sp
Using Fortran HDF5 and HDF5\-HL functions:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HDF5 COMPONENTS Fortran HL)
target_link_libraries(project_target PRIVATE HDF5::HDF5)
.EE
.UNINDENT
.UNINDENT
.SS FindHg
.sp
Finds the Mercurial command\-line client executable (\fBhg\fP) and provides a
command for extracting information from a Mercurial working copy:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Hg [<version>] [...])
.EE
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBHg_FOUND\fP
Boolean indicating whether (the requested version of) Mercurial client is
found.  For backward compatibility, the \fBHG_FOUND\fP variable is also set
to the same value.
.TP
.B \fBHG_VERSION_STRING\fP
The version of Mercurial found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBHG_EXECUTABLE\fP
Absolute path to the Mercurial command\-line client (\fBhg\fP).
.UNINDENT
.SS Commands
.sp
This module provides the following command when Mercurial client (\fBhg\fP) is
found:
.INDENT 0.0
.TP
.B Hg_WC_INFO
Added in version 3.1.

.sp
Extracts information of a Mercurial working copy:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
Hg_WC_INFO(<dir> <var\-prefix>)
.EE
.UNINDENT
.UNINDENT
.sp
This command defines the following variables if running Mercurial client on
working copy located at a given location \fB<dir>\fP succeeds; otherwise a
\fBSEND_ERROR\fP message is generated:
.INDENT 7.0
.TP
.B \fB<var\-prefix>_WC_CHANGESET\fP
Current changeset.
.TP
.B \fB<var\-prefix>_WC_REVISION\fP
Current revision.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding the Mercurial client and retrieving information about the current
project\(aqs working copy:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Hg)
if(Hg_FOUND)
  Hg_WC_INFO(${PROJECT_SOURCE_DIR} Project)
  message(\(dqCurrent revision is ${Project_WC_REVISION}\(dq)
  message(\(dqCurrent changeset is ${Project_WC_CHANGESET}\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindHSPELL
.sp
Finds Hebrew spell\-checker (Hspell) and morphology engine.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBHSPELL_FOUND\fP
Boolean indicating whether the Hspell is found.
.TP
.B \fBHSPELL_VERSION_STRING\fP
The version of Hspell found (x.y).
.TP
.B \fBHSPELL_MAJOR_VERSION\fP
The major version of Hspell.
.TP
.B \fBHSPELL_MINOR_VERSION\fP
The minor version of Hspell.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBHSPELL_INCLUDE_DIR\fP
The Hspell include directory.
.TP
.B \fBHSPELL_LIBRARIES\fP
The libraries needed to use Hspell.
.UNINDENT
.SS Examples
.sp
Finding Hspell:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HSPELL)
.EE
.UNINDENT
.UNINDENT
.SS FindHTMLHelp
.sp
This module finds the Microsoft HTML Help Compiler and its API.  It is part of
the HTML Help Workshop.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
HTML Help Workshop is in maintenance mode only and is considered deprecated.
For modern documentation, consider alternatives such as Microsoft Help Viewer
for producing \fB\&.mshc\fP files or web\-based documentation tools.
.UNINDENT
.UNINDENT
.SS Cache Variables
.sp
This module may set the following cache variables:
.INDENT 0.0
.TP
.B \fBHTML_HELP_COMPILER\fP
Full path to the HTML Help Compiler (\fBhhc.exe\fP), used to compile \fB\&.chm\fP
files.
.TP
.B \fBHTML_HELP_INCLUDE_PATH\fP
Directory containing \fBhtmlhelp.h\fP, required for applications integrating the
HTML Help API.
.TP
.B \fBHTML_HELP_LIBRARY\fP
Full path to \fBhtmlhelp.lib\fP library, required for linking applications that
use the HTML Help API.
.UNINDENT
.SS Examples
.sp
Finding HTML Help Compiler:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(HTMLHelp)
message(STATUS \(dqHTML Help Compiler found at: ${HTML_HELP_COMPILER}\(dq)
.EE
.UNINDENT
.UNINDENT
.SS FindIce
.sp
Added in version 3.1.

.sp
Finds the Internet Communication Engine (Ice) programs, libraries and datafiles.
Ice is an open\-source remote procedure call (RPC) framework developed by ZeroC
and provides SDKs for various languages to develop network applications.
.sp
Added in version 3.4: Imported targets for components and many new \fB*_EXECUTABLE\fP variables.

.sp
Added in version 3.7: Debug and Release library variants are found separately.

.sp
Added in version 3.10: Ice 3.7 support, including new components, programs and the Nuget package.

.SS Components
.sp
Ice consists of several libraries and programs (executables).  This find module
supports components, which can be specified using the \fI\%find_package()\fP
command, to select specific Ice libraries for use in a CMake project.
Executables provided by Ice installation are always searched automatically,
regardless of the specified components.
.sp
The list of available components depends on the Ice version in use.  To
successfully find Ice, at least one component must be specified:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Ice COMPONENTS <components>...)
.EE
.UNINDENT
.UNINDENT
.sp
Supported components include:
.INDENT 0.0
.INDENT 2.0
.IP \(bu 2
\fBFreeze\fP
.IP \(bu 2
\fBGlacier2\fP
.IP \(bu 2
\fBIce\fP
.IP \(bu 2
\fBIceBox\fP
.IP \(bu 2
\fBIceDB\fP
.IP \(bu 2
\fBIceDiscovery\fP
.IP \(bu 2
\fBIceGrid\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fBIceLocatorDiscovery\fP
.IP \(bu 2
\fBIcePatch\fP
.IP \(bu 2
\fBIceSSL\fP
.IP \(bu 2
\fBIceStorm\fP
.IP \(bu 2
\fBIceUtil\fP
.IP \(bu 2
\fBIceXML\fP
.IP \(bu 2
\fBSlice\fP
.UNINDENT
.UNINDENT
.sp
Ice 3.7 and later also include C++11\-specific components:
.INDENT 0.0
.INDENT 2.0
.IP \(bu 2
\fBGlacier2++11\fP
.IP \(bu 2
\fBIce++11\fP
.IP \(bu 2
\fBIceBox++11\fP
.IP \(bu 2
\fBIceDiscovery++11\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fBIceGrid++11\fP
.IP \(bu 2
\fBIceLocatorDiscovery++11\fP
.IP \(bu 2
\fBIceSSL++11\fP
.IP \(bu 2
\fBIceStorm++11\fP
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBIce::<component>\fP
Added in version 3.4.

.sp
Target encapsulating the usage requirements for the specified Ice component
(library), available if that component is found.  The \fB<component>\fP should
be written in the same case, as listed above.  For example, use
\fBIce::Glacier2\fP for the Ice Glacier2 library, or \fBIce::Ice++11\fP for the
Ice++11 library, etc.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBIce_FOUND\fP
Boolean indicating whether the main programs, libraries and all requested
components for using Ice were found.
.TP
.B \fBIce_VERSION\fP
The version of Ice release found.
.TP
.B \fBIce_INCLUDE_DIRS\fP
The include directories containing headers needed to use Ice.
.TP
.B \fBIce_LIBRARIES\fP
Component libraries needed to link against to use Ice.
.TP
.B \fBIce_SLICE_DIRS\fP
The data directories containing interface definitions (\fB*.ice\fP files) for
Slice (Specification Language for Ice).
.UNINDENT
.sp
Ice component libraries are stored in:
.INDENT 0.0
.TP
.B \fBIce_<COMPONENT>_FOUND\fP
Boolean indicating whether the specified Ice component is found.  The
\fB<COMPONENT>\fP should be written in uppercase.
.TP
.B \fBIce_<COMPONENT>_LIBRARIES\fP
Libraries provided by the specified Ice component.  The \fB<COMPONENT>\fP should
be written in uppercase.
.UNINDENT
.sp
Slice programs are stored in:
.INDENT 0.0
.TP
.B \fBIce_SLICE2CONFLUENCE_EXECUTABLE\fP
Added in version 3.14.

.sp
The path to the \fBslice2confluence\fP executable.
.TP
.B \fBIce_SLICE2CPP_EXECUTABLE\fP
The path to the \fBslice2cpp\fP executable.
.TP
.B \fBIce_SLICE2CS_EXECUTABLE\fP
The path to the \fBslice2cs\fP executable.
.TP
.B \fBIce_SLICE2FREEZEJ_EXECUTABLE\fP
The path to the \fBslice2freezej\fP executable.
.TP
.B \fBIce_SLICE2FREEZE_EXECUTABLE\fP
The path to the \fBslice2freeze\fP executable.
.TP
.B \fBIce_SLICE2HTML_EXECUTABLE\fP
The path to the \fBslice2html\fP executable.
.TP
.B \fBIce_SLICE2JAVA_EXECUTABLE\fP
The path to the \fBslice2java\fP executable.
.TP
.B \fBIce_SLICE2JS_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBslice2js\fP executable.
.TP
.B \fBIce_SLICE2MATLAB_EXECUTABLE\fP
Added in version 3.14.

.sp
The path to the \fBslice2matlab\fP executable.
.TP
.B \fBIce_SLICE2OBJC_EXECUTABLE\fP
Added in version 3.10.

.sp
The path to the \fBslice2objc\fP executable.
.TP
.B \fBIce_SLICE2PHP_EXECUTABLE\fP
The path to the \fBslice2php\fP executable.
.TP
.B \fBIce_SLICE2PY_EXECUTABLE\fP
The path to the \fBslice2py\fP executable.
.TP
.B \fBIce_SLICE2RB_EXECUTABLE\fP
The path to the \fBslice2rb\fP executable.
.UNINDENT
.sp
Ice programs are stored in:
.INDENT 0.0
.TP
.B \fBIce_GLACIER2ROUTER_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBglacier2router\fP executable.
.TP
.B \fBIce_ICEBOX_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicebox\fP executable.
.TP
.B \fBIce_ICEBOX++11_EXECUTABLE\fP
Added in version 3.10.

.sp
The path to the \fBicebox++11\fP executable.
.TP
.B \fBIce_ICEBOXADMIN_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBiceboxadmin\fP executable.
.TP
.B \fBIce_ICEBOXD_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBiceboxd\fP executable.
.TP
.B \fBIce_ICEBOXNET_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBiceboxnet\fP executable.
.TP
.B \fBIce_ICEBRIDGE_EXECUTABLE\fP
Added in version 3.10.

.sp
The path to the \fBicebridge\fP executable.
.TP
.B \fBIce_ICEGRIDADMIN_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicegridadmin\fP executable.
.TP
.B \fBIce_ICEGRIDDB_EXECUTABLE\fP
Added in version 3.10.

.sp
The path to the \fBicegriddb\fP executable.
.TP
.B \fBIce_ICEGRIDNODE_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicegridnode\fP executable.
.TP
.B \fBIce_ICEGRIDNODED_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicegridnoded\fP executable.
.TP
.B \fBIce_ICEGRIDREGISTRY_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicegridregistry\fP executable.
.TP
.B \fBIce_ICEGRIDREGISTRYD_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicegridregistryd\fP executable.
.TP
.B \fBIce_ICEPATCH2CALC_EXECUTABLE\fP
The path to the \fBicepatch2calc\fP executable.
.TP
.B \fBIce_ICEPATCH2CLIENT_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicepatch2client\fP executable.
.TP
.B \fBIce_ICEPATCH2SERVER_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicepatch2server\fP executable.
.TP
.B \fBIce_ICESERVICEINSTALL_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBiceserviceinstall\fP executable.
.TP
.B \fBIce_ICESTORMADMIN_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicestormadmin\fP executable.
.TP
.B \fBIce_ICESTORMDB_EXECUTABLE\fP
Added in version 3.10.

.sp
The path to the \fBicestormdb\fP executable.
.TP
.B \fBIce_ICESTORMMIGRATE_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBicestormmigrate\fP executable.
.UNINDENT
.sp
Ice database programs are stored in the following variables (on Windows, they
are included with the Ice installation; on other platforms, they are usually
available through standard Berkeley DB packages):
.INDENT 0.0
.TP
.B \fBIce_DB_ARCHIVE_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_archive\fP executable.
.TP
.B \fBIce_DB_CHECKPOINT_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_checkpoint\fP executable.
.TP
.B \fBIce_DB_DEADLOCK_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_deadlock\fP executable.
.TP
.B \fBIce_DB_DUMP_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_dump\fP executable.
.TP
.B \fBIce_DB_HOTBACKUP_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_hotbackup\fP executable.
.TP
.B \fBIce_DB_LOAD_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_load\fP executable.
.TP
.B \fBIce_DB_LOG_VERIFY_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_log_verify\fP executable.
.TP
.B \fBIce_DB_PRINTLOG_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_printlog\fP executable.
.TP
.B \fBIce_DB_RECOVER_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_recover\fP executable.
.TP
.B \fBIce_DB_STAT_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_stat\fP executable.
.TP
.B \fBIce_DB_TUNER_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_tuner\fP executable.
.TP
.B \fBIce_DB_UPGRADE_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_upgrade\fP executable.
.TP
.B \fBIce_DB_VERIFY_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdb_verify\fP executable.
.TP
.B \fBIce_DUMPDB_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBdumpdb\fP executable.
.TP
.B \fBIce_TRANSFORMDB_EXECUTABLE\fP
Added in version 3.4.

.sp
The path to the \fBtransformdb\fP executable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBIce_<PROGRAM>_EXECUTABLE\fP
The path to the specified \fB<PROGRAM>\fP executable;  The \fB<PROGRAM>\fP is the
uppercase name of the Ice program as listed in above result variables of
executables.
.TP
.B \fBIce_INCLUDE_DIR\fP
The directory containing Ice headers.
.TP
.B \fBIce_SLICE_DIR\fP
The data directory containing interface definitions for Slice.
.TP
.B \fBIce_<COMPONENT>_LIBRARY\fP
The path to the library for the specified component.  The \fB<COMPONENT>\fP
should be written in uppercase.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBIce_HOME\fP
Set this CMake variable to the root of the Ice installation in order to
search for Ice in a custom location.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
On Windows, Ice 3.7.0 and later provide libraries via the NuGet
package manager.  Appropriate NuGet packages will be searched for
using \fI\%CMAKE_PREFIX_PATH\fP, or alternatively \fBIce_HOME\fP may be
set to the location of a specific NuGet package to restrict the search.
.UNINDENT
.UNINDENT
.TP
.B \fBICE_HOME\fP
Environment variable (uppercased) may also be set to the root of the Ice
installation;  The \fBIce_HOME\fP CMake variable takes precedence.
.TP
.B \fBIce_DEBUG\fP
Set this variable to boolean true to enable debug output from this module.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, none of the above variables need to be set unless multiple Ice
versions are installed and a specific one is required.  On Windows, the most
recent version is typically found using the registry.  On Unix\-like systems,
programs, headers, and libraries are usually found in standard locations,
although \fBIce_SLICE_DIRS\fP might not be detected automatically (commonly
known locations are searched).  All other variables default based on the value
of \fBIce_HOME\fP, if set.
.sp
It\(aqs also possible to set \fBIce_HOME\fP while selectively overriding specific
locations for individual components;  This might be required, for example, in
newer versions of Visual Studio if the heuristics are not sufficient to
identify the correct programs and libraries for the specific Visual Studio
version.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding the Ice core library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Ice COMPONENTS Ice)
target_link_libraries(project_target PRIVATE Ice::Ice)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Ice core library and IceSSL library, and linking them to a project
target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Ice COMPONENTS Ice IceSSL)
target_link_libraries(project_target PRIVATE Ice::Ice Ice::IceSSL)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Ice core library as required component and Ice Freeze library as
optional:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Ice COMPONENTS Ice OPTIONAL_COMPONENTS Freeze)
.EE
.UNINDENT
.UNINDENT
.SS FindIconv
.sp
Added in version 3.11.

.sp
This module finds the \fBiconv()\fP POSIX.1 functions on the system.  These
functions might be provided in the standard C library or externally in the form
of an additional library.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBIconv::Iconv\fP
Target encapsulating the iconv usage requirements, available only if iconv is
found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBIconv_FOUND\fP
Boolean indicating if the iconv support was found.
.TP
.B \fBIconv_INCLUDE_DIRS\fP
The include directories containing the iconv headers.
.TP
.B \fBIconv_LIBRARIES\fP
The iconv libraries to be linked.
.TP
.B \fBIconv_VERSION\fP
Added in version 3.21.

.sp
The version of iconv found (x.y).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Some libiconv implementations don\(aqt embed the version in their header files.
In this case the variables \fBIconv_VERSION*\fP will be empty.
.UNINDENT
.UNINDENT
.TP
.B \fBIconv_VERSION_MAJOR\fP
Added in version 3.21.

.sp
The major version of iconv.
.TP
.B \fBIconv_VERSION_MINOR\fP
Added in version 3.21.

.sp
The minor version of iconv.
.TP
.B \fBIconv_IS_BUILT_IN\fP
A boolean variable indicating whether iconv support is stemming from the C
standard library or not.  Even if the C library provides \fBiconv()\fP, the
presence of an external \fBlibiconv\fP implementation might lead to this being
false.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBIconv_INCLUDE_DIR\fP
The directory containing the iconv headers.
.TP
.B \fBIconv_LIBRARY\fP
The iconv library (if not implicitly given in the C library).
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
On POSIX platforms, iconv might be part of the C library and the cache
variables \fBIconv_INCLUDE_DIR\fP and \fBIconv_LIBRARY\fP might be empty.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding iconv and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Iconv)
target_link_libraries(project_target PRIVATE Iconv::Iconv)
.EE
.UNINDENT
.UNINDENT
.SS FindIcotool
.sp
Finds \fBicotool\fP, command\-line program for converting and creating Win32 icon
and cursor files.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBIcotool_FOUND\fP
True if \fBicotool\fP has been found.  For backward compatibility, the
\fBICOTOOL_FOUND\fP variable is also set to the same value.
.TP
.B \fBICOTOOL_VERSION_STRING\fP
The version of \fBicotool\fP found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBICOTOOL_EXECUTABLE\fP
The full path to the \fBicotool\fP tool.
.UNINDENT
.SS Examples
.sp
Finding \fBicotool\fP and executing it in a process to create \fB\&.ico\fP icon from
the source \fB\&.png\fP image located in the current source directory:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Icotool)
if(Icotool_FOUND)
  execute_process(
    COMMAND
      ${ICOTOOL_EXECUTABLE} \-c \-o ${CMAKE_CURRENT_BINARY_DIR}/img.ico img.png
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindICU
.sp
Added in version 3.7.

.sp
Finds the International Components for Unicode (ICU) libraries and programs.
.sp
Added in version 3.11: Support for static libraries on Windows.

.SS Components
.sp
This module supports the following components:
.INDENT 0.0
.TP
.B \fBdata\fP
Finds the ICU Data library.  On Windows, this library component is named
\fBdt\fP, otherwise any of these component names may be used, and the
appropriate platform\-specific library name will be automatically selected.
.TP
.B \fBi18n\fP
Finds the ICU Internationalization library.  On Windows, this library
component is named \fBin\fP, otherwise any of these component names may be used,
and the appropriate platform\-specific library name will be automatically
selected.
.TP
.B \fBio\fP
Finds the ICU Stream and I/O (Unicode stdio) library.
.TP
.B \fBle\fP
Finds the deprecated ICU Layout Engine library, which has been removed as of
ICU version 58.
.TP
.B \fBlx\fP
Finds the ICU Layout Extensions Engine library, used for paragraph layout.
.TP
.B \fBtest\fP
Finds the ICU test suits.
.TP
.B \fBtu\fP
Finds the ICU Tool Utility library.
.TP
.B \fBuc\fP
Finds the base ICU Common and Data libraries.  This library is required by
all other ICU libraries and is recommended to include when working with ICU
components.
.UNINDENT
.sp
At least one component should be specified for this module to successfully find
ICU:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ICU COMPONENTS <components>...)
.EE
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.sp
\fBICU::<component>\fP
.INDENT 0.0
.INDENT 3.5
Target encapsulating the usage requirements for the specified ICU component,
available only if that component is found.  The \fB<component>\fP should be
written in lowercase, as listed above.  For example, use \fBICU::i18n\fP for the
Internationalization library.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBICU_FOUND\fP
Boolean indicating whether the main programs and libraries were found.
.TP
.B \fBICU_INCLUDE_DIRS\fP
The include directories containing the ICU headers.
.TP
.B \fBICU_LIBRARIES\fP
Component libraries to be linked.
.TP
.B \fBICU_VERSION\fP
The version of the ICU release found.
.UNINDENT
.sp
ICU programs are defined in the following variables:
.INDENT 0.0
.TP
.B \fBICU_GENCNVAL_EXECUTABLE\fP
The path to the \fBgencnval\fP executable.
.TP
.B \fBICU_ICUINFO_EXECUTABLE\fP
The path to the \fBicuinfo\fP executable.
.TP
.B \fBICU_GENBRK_EXECUTABLE\fP
The path to the \fBgenbrk\fP executable.
.TP
.B \fBICU_ICU\-CONFIG_EXECUTABLE\fP
The path to the \fBicu\-config\fP executable.
.TP
.B \fBICU_GENRB_EXECUTABLE\fP
The path to the \fBgenrb\fP executable.
.TP
.B \fBICU_GENDICT_EXECUTABLE\fP
The path to the \fBgendict\fP executable.
.TP
.B \fBICU_DERB_EXECUTABLE\fP
The path to the \fBderb\fP executable.
.TP
.B \fBICU_PKGDATA_EXECUTABLE\fP
The path to the \fBpkgdata\fP executable.
.TP
.B \fBICU_UCONV_EXECUTABLE\fP
The path to the \fBuconv\fP executable.
.TP
.B \fBICU_GENCFU_EXECUTABLE\fP
The path to the \fBgencfu\fP executable.
.TP
.B \fBICU_MAKECONV_EXECUTABLE\fP
The path to the \fBmakeconv\fP executable.
.TP
.B \fBICU_GENNORM2_EXECUTABLE\fP
The path to the \fBgennorm2\fP executable.
.TP
.B \fBICU_GENCCODE_EXECUTABLE\fP
The path to the \fBgenccode\fP executable.
.TP
.B \fBICU_GENSPREP_EXECUTABLE\fP
The path to the \fBgensprep\fP executable.
.TP
.B \fBICU_ICUPKG_EXECUTABLE\fP
The path to the \fBicupkg\fP executable.
.TP
.B \fBICU_GENCMN_EXECUTABLE\fP
The path to the \fBgencmn\fP executable.
.UNINDENT
.sp
ICU component libraries are defined in the following variables:
.INDENT 0.0
.TP
.B \fBICU_<COMPONENT>_FOUND\fP
Boolean indicating whether the ICU component was found; The \fB<COMPONENT>\fP
should be written in uppercase.
.TP
.B \fBICU_<COMPONENT>_LIBRARIES\fP
Libraries for component; The \fB<COMPONENT>\fP should be written in uppercase.
.UNINDENT
.sp
ICU datafiles are defined in the following variables:
.INDENT 0.0
.TP
.B \fBICU_MAKEFILE_INC\fP
The path to the \fBMakefile.inc\fP file.
.TP
.B \fBICU_PKGDATA_INC\fP
The path to the \fBpkgdata.inc\fP file.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBICU_<PROGRAM>_EXECUTABLE\fP
The path to executable \fB<PROGRAM>\fP; The \fB<PROGRAM>\fP should be written in
uppercase. These variables correspond to the ICU program result variables
listed above.
.TP
.B \fBICU_INCLUDE_DIR\fP
The directory containing the ICU headers.
.TP
.B \fBICU_<COMPONENT>_LIBRARY\fP
The library for the ICU component.  The \fB<COMPONENT>\fP should be written in
uppercase.
.UNINDENT
.SS Hints
.sp
This module reads hints about search results from:
.INDENT 0.0
.TP
.B \fBICU_ROOT\fP
The root of the ICU installation.  The environment variable \fBICU_ROOT\fP may
also be used; the \fBICU_ROOT\fP variable takes precedence.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, none of the above variables will need to be set, unless
multiple versions of ICU are available and a specific version is required.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding ICU components and linking them to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ICU COMPONENTS i18n io uc)
target_link_libraries(project_target PRIVATE ICU::i18n ICU::io ICU::uc)
.EE
.UNINDENT
.UNINDENT
.SS FindImageMagick
.sp
Finds ImageMagick, a software suite for displaying, converting, and manipulating
raster images.
.sp
Added in version 3.9: Support for ImageMagick 7.

.SS Components
.sp
This module supports components and searches for a set of ImageMagick tools.
Typical components include the names of ImageMagick executables, but are not
limited to the following (future versions of ImageMagick may provide additional
components not listed here):
.INDENT 0.0
.IP \(bu 2
\fBanimate\fP
.IP \(bu 2
\fBcompare\fP
.IP \(bu 2
\fBcomposite\fP
.IP \(bu 2
\fBconjure\fP
.IP \(bu 2
\fBconvert\fP
.IP \(bu 2
\fBdisplay\fP
.IP \(bu 2
\fBidentify\fP
.IP \(bu 2
\fBimport\fP
.IP \(bu 2
\fBmogrify\fP
.IP \(bu 2
\fBmontage\fP
.IP \(bu 2
\fBstream\fP
.UNINDENT
.sp
There are also components for the following ImageMagick APIs:
.INDENT 0.0
.TP
.B \fBMagick++\fP
Finds the ImageMagick C++ API.
.TP
.B \fBMagickWand\fP
Finds the ImageMagick MagickWand C API.
.TP
.B \fBMagickCore\fP
Finds the ImageMagick MagickCore low\-level C API.
.UNINDENT
.sp
Components can be specified using the \fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ImageMagick [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
If no components are specified, the module only searches for the ImageMagick
executable directory.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBImageMagick::Magick++\fP
Added in version 3.26.

.sp
Target encapsulating the ImageMagick C++ API usage requirements, available if
ImageMagick C++ is found.
.TP
.B \fBImageMagick::MagickWand\fP
Added in version 3.26.

.sp
Target encapsulating the ImageMagick MagickWand C API usage requirements,
available if MagickWand is found.
.TP
.B \fBImageMagick::MagickCore\fP
Added in version 3.26.

.sp
Target encapsulating the ImageMagick MagickCore low\-level C API usage
requirements, available if MagickCore is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBImageMagick_FOUND\fP
Boolean indicating whether ImageMagick and all its requested components are
found.
.TP
.B \fBImageMagick_VERSION_STRING\fP
The version of ImageMagick found.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Version detection is available only for ImageMagick 6 and later.
.UNINDENT
.UNINDENT
.TP
.B \fBImageMagick_INCLUDE_DIRS\fP
All include directories needed to use ImageMagick.
.TP
.B \fBImageMagick_LIBRARIES\fP
Libraries needed to link against to use ImageMagick.
.TP
.B \fBImageMagick_COMPILE_OPTIONS\fP
Added in version 3.26.

.sp
Compile options of all libraries.
.TP
.B \fBImageMagick_<component>_FOUND\fP
Boolean indicating whether the ImageMagick \fB<component>\fP is found.
.TP
.B \fBImageMagick_<component>_EXECUTABLE\fP
The full path to \fB<component>\fP executable.
.TP
.B \fBImageMagick_<component>_INCLUDE_DIRS\fP
Include directories containing headers needed to use the ImageMagick
\fB<component>\fP\&.
.TP
.B \fBImageMagick_<component>_COMPILE_OPTIONS\fP
Added in version 3.26.

.sp
Compile options of the ImageMagick \fB<component>\fP\&.
.TP
.B \fBImageMagick_<component>_LIBRARIES\fP
Added in version 3.31.

.sp
Libraries needed to link against to use the ImageMagick \fB<component>\fP\&.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBImageMagick_EXECUTABLE_DIR\fP
The full path to directory containing ImageMagick executables.
.UNINDENT
.SS Examples
.sp
Finding ImageMagick with its component \fBMagick++\fP  and linking it to a project
target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ImageMagick COMPONENTS Magick++)
target_link_libraries(example PRIVATE ImageMagick::Magick++)
.EE
.UNINDENT
.UNINDENT
.SS FindIntl
.sp
Added in version 3.2.

.sp
Finds internationalization support that includes message translation functions
such as \fBgettext()\fP\&.  These functions originate from the GNU \fBlibintl\fP
library, which is part of the GNU gettext utilities, but may also be provided by
the standard C library.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBIntl::Intl\fP
Added in version 3.20.

.sp
Target encapsulating the Intl usage requirements, available if Intl is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBIntl_FOUND\fP
Boolean indicating whether the Intl is found.
.TP
.B \fBIntl_INCLUDE_DIRS\fP
Include directories containing headers needed to use Intl.
.TP
.B \fBIntl_LIBRARIES\fP
The libraries needed to link against to use Intl.
.TP
.B \fBIntl_VERSION\fP
Added in version 3.21.

.sp
The version of the found Intl implementation or library, in the format
\fBx.y.z\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Some Intl implementations don\(aqt embed the version in their header files.
In this case the variables \fBIntl_VERSION*\fP will be empty.
.UNINDENT
.UNINDENT
.TP
.B \fBIntl_VERSION_MAJOR\fP
Added in version 3.21.

.sp
The major version of Intl found.
.TP
.B \fBIntl_VERSION_MINOR\fP
Added in version 3.21.

.sp
The minor version of Intl found.
.TP
.B \fBIntl_VERSION_PATCH\fP
Added in version 3.21.

.sp
The patch version of Intl found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBIntl_INCLUDE_DIR\fP
The directory containing the \fBlibintl.h\fP header file.
.TP
.B \fBIntl_LIBRARY\fP
The path to the Intl library (if any).
.TP
.B \fBIntl_IS_BUILT_IN\fP
Added in version 3.20.

.sp
Boolean indicating whether the found Intl functionality is provided by the
standard C library rather than a separate \fBlibintl\fP library.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
On some platforms, such as Linux with GNU libc, the gettext functions are
present in the C standard library and libintl is not required.  The
\fBIntl_LIBRARY\fP and \fBIntl_INCLUDE_DIR\fP will be empty in this case.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding the Intl support and linking the imported target for use in a project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Intl)
target_link_libraries(app PRIVATE Intl::Intl)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindGettext\fP module to find and use the GNU gettext tools
(\fBmsgmerge\fP, \fBmsgfmt\fP, etc.).
.UNINDENT
.SS FindJasper
.sp
Finds the JasPer Image Coding Toolkit for handling image data in a variety of
formats, such as the JPEG\-2000.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBJasper::Jasper\fP
Added in version 3.22.

.sp
Target encapsulating the JasPer library usage requirements, available only if
the library is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBJasper_FOUND\fP
Boolean indicating whether the JasPer is found.  For backward compatibility,
the \fBJASPER_FOUND\fP variable is also set to the same value.
.TP
.B \fBJASPER_INCLUDE_DIRS\fP
Added in version 3.22.

.sp
The include directories needed to use the JasPer library.
.TP
.B \fBJASPER_LIBRARIES\fP
The libraries needed to use JasPer.
.TP
.B \fBJASPER_VERSION_STRING\fP
The version of JasPer found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBJASPER_INCLUDE_DIR\fP
The directory containing the \fBjasper/jasper.h\fP and other headers needed to
use the JasPer library.
.TP
.B \fBJASPER_LIBRARY_RELEASE\fP
The path to the release (optimized) variant of the JasPer library.
.TP
.B \fBJASPER_LIBRARY_DEBUG\fP
The path to the debug variant of the JasPer library.
.UNINDENT
.SS Examples
.sp
Finding the JasPer library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Jasper)
target_link_libraries(project_target PRIVATE Jasper::Jasper)
.EE
.UNINDENT
.UNINDENT
.SS FindJava
.sp
Finds the Java installation and determines its runtime tools and development
components.
.sp
Added in version 3.10: Support for Java 9+ version parsing.

.SS Components
.sp
This module supports the following components:
.INDENT 0.0
.TP
.B \fBRuntime\fP
Finds the Java Runtime Environment used to execute Java byte\-compiled
applications.
.TP
.B \fBDevelopment\fP
Finds development tools (\fBjava\fP, \fBjavac\fP, \fBjavah\fP, \fBjar\fP, and
\fBjavadoc\fP).  Specifying this component also implies the \fBRuntime\fP
component.
.TP
.B \fBIdlJ\fP
Added in version 3.4.

.sp
Finds the Interface Description Language (IDL) to Java compiler.
.TP
.B \fBJarSigner\fP
Added in version 3.4.

.sp
Finds the signer and verifier tool for Java Archive (JAR) files.
.UNINDENT
.sp
Components can optionally be specified using the standard syntax with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Java [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
If no \fBCOMPONENTS\fP are specified, the module searches for the \fBRuntime\fP
component by default.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBJava_FOUND\fP
Boolean indicating whether Java with all specified components is found.
.TP
.B \fBJava_<component>_FOUND\fP
Boolean indicating whether the \fB<component>\fP is found.
.TP
.B \fBJava_VERSION\fP
Version of Java found.  This is set to:
\fB<major>[.<minor>[.<patch>[.<tweak>]]]\fP\&.
.TP
.B \fBJava_VERSION_MAJOR\fP
The major version of Java found.
.TP
.B \fBJava_VERSION_MINOR\fP
The minor version of Java found.
.TP
.B \fBJava_VERSION_PATCH\fP
The patch version of Java found.
.TP
.B \fBJava_VERSION_TWEAK\fP
The tweak version of Java found (part after the underscore character \fB_\fP).
.TP
.B \fBJava_VERSION_STRING\fP
Version of Java found, e.g., \fB1.6.0_12\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fBJava_VERSION\fP and \fBJava_VERSION_STRING\fP are not guaranteed to be
identical.  For example, some Java versions may return:
\fBJava_VERSION_STRING = 1.8.0_17\fP and \fBJava_VERSION = 1.8.0.17\fP\&.
.sp
Another example is the Java OEM, with \fBJava_VERSION_STRING = 1.8.0\-oem\fP
and \fBJava_VERSION = 1.8.0\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBJava_JAVA_EXECUTABLE\fP
The full path to the Java runtime.
.TP
.B \fBJava_JAVAC_EXECUTABLE\fP
The full path to the Java compiler.
.TP
.B \fBJava_JAVAH_EXECUTABLE\fP
The full path to the Java header generator.
.TP
.B \fBJava_JAVADOC_EXECUTABLE\fP
The full path to the Java documentation generator.
.TP
.B \fBJava_IDLJ_EXECUTABLE\fP
Added in version 3.4.

.sp
The full path to the Java idl compiler.
.TP
.B \fBJava_JAR_EXECUTABLE\fP
The full path to the Java archiver.
.TP
.B \fBJava_JARSIGNER_EXECUTABLE\fP
Added in version 3.4.

.sp
The full path to the Java jar signer.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBJAVA_HOME\fP
The caller can set this variable to specify the installation directory of Java
explicitly.
.UNINDENT
.SS Examples
.sp
Finding Java:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Java)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Java with at least the specified minimum version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Java 1.8)
.EE
.UNINDENT
.UNINDENT
.sp
Finding Java and making it required (if Java is not found, processing stops with
an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Java 1.8 REQUIRED)
.EE
.UNINDENT
.UNINDENT
.sp
Specifying the needed Java components to find:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Java COMPONENTS Development JarSigner)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindJNI\fP module to find Java Native Interface (JNI).
.IP \(bu 2
The \fI\%UseJava\fP module to use Java in CMake.
.UNINDENT
.SS FindJNI
.sp
Finds the Java Native Interface (JNI) include directories and libraries.
.sp
JNI enables Java code running in a Java Virtual Machine (JVM) or Dalvik Virtual
Machine (DVM) on Android to call and be called by native applications and
libraries written in other languages such as C and C++.
.sp
This module finds if Java is installed and determines where the
include files and libraries are.  It also determines what the name of
the library is.
.sp
Added in version 3.24: Imported targets, components, and Android NDK support.
.sp
When using Android NDK, the corresponding package version is reported and a
specific release can be requested. At Android API level 31 and above, the
additional \fBNativeHelper\fP component can be requested. \fBNativeHelper\fP is
also exposed as an implicit dependency of the \fBJVM\fP component (only if this
does not cause a conflict) which provides a uniform access to JVM functions.

.SS Components
.sp
This module supports optional components, which can be specified with the
\fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(JNI [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Supported components include:
.INDENT 0.0
.TP
.B \fBAWT\fP
Added in version 3.24.

.sp
Finds the Java Abstract Window Toolkit (AWT).
.TP
.B \fBJVM\fP
Added in version 3.24.

.sp
Finds the Java Virtual Machine (JVM).
.TP
.B \fBNativeHelper\fP
Added in version 3.24.

.sp
Finds the NativeHelper library on Android (\fBlibnativehelper.so\fP), which
exposes JVM functions such as \fBJNI_CreateJavaVM()\fP\&.
.UNINDENT
.sp
If no components are specified, the module defaults are:
.INDENT 0.0
.IP \(bu 2
When targeting Android with API level 31 and above: module looks for the
\fBNativeHelper\fP component.  For other Android API levels, components are by
default not set.
.IP \(bu 2
When targeting other systems: module looks for \fBAWT\fP and \fBJVM\fP components.
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBJNI::JNI\fP
Added in version 3.24.

.sp
Main target encapsulating all JNI usage requirements, available if \fBjni.h\fP
is found.
.TP
.B \fBJNI::AWT\fP
Added in version 3.24.

.sp
Target encapsulating the Java AWT Native Interface (JAWT) library usage
requirements, available if the \fBAWT\fP component is found.
.TP
.B \fBJNI::JVM\fP
Added in version 3.24.

.sp
Target encapsulating the Java Virtual Machine (JVM) library usage
requirements, available if component \fBJVM\fP is found.
.TP
.B \fBJNI::NativeHelper\fP
Added in version 3.24.

.sp
Target encapsulating the NativeHelper library usage requirements, available
when targeting Android API level 31 and above, and the library is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBJNI_FOUND\fP
Boolean indicating whether the JNI is found.
.TP
.B \fBJNI_<component>_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the \fB<component>\fP is found.
.TP
.B \fBJNI_VERSION\fP
Full Android NDK package version (including suffixes such as \fB\-beta3\fP and
\fB\-rc1\fP) or undefined otherwise.
.TP
.B \fBJNI_VERSION_MAJOR\fP
Added in version 3.24.

.sp
Android NDK major version or undefined otherwise.
.TP
.B \fBJNI_VERSION_MINOR\fP
Added in version 3.24.

.sp
Android NDK minor version or undefined otherwise.
.TP
.B \fBJNI_VERSION_PATCH\fP
Added in version 3.24.

.sp
Android NDK patch version or undefined otherwise.
.TP
.B \fBJNI_INCLUDE_DIRS\fP
The include directories needed to use the JNI.
.TP
.B \fBJNI_LIBRARIES\fP
The libraries (JAWT and JVM) needed to link against to use JNI.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables are also available to set or use:
.INDENT 0.0
.TP
.B \fBJAVA_INCLUDE_PATH\fP
The directory containing the \fBjni.h\fP header.
.TP
.B \fBJAVA_INCLUDE_PATH2\fP
The directory containing machine\-dependent headers \fBjni_md.h\fP and
\fBjniport.h\fP\&.  This variable is defined only if \fBjni.h\fP depends on one of
these headers.  In contrast, Android NDK \fBjni.h\fP can be typically used
standalone.
.TP
.B \fBJAVA_AWT_INCLUDE_PATH\fP
The directory containing the \fBjawt.h\fP header.
.TP
.B \fBJAVA_AWT_LIBRARY\fP
The path to the Java AWT Native Interface (JAWT) library.
.TP
.B \fBJAVA_JVM_LIBRARY\fP
The path to the Java Virtual Machine (JVM) library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBJAVA_HOME\fP
The caller can set this variable to specify the installation directory of Java
explicitly.
.UNINDENT
.SS Examples
.sp
Finding JNI and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(JNI)
target_link_libraries(project_target PRIVATE JNI::JNI)
.EE
.UNINDENT
.UNINDENT
.sp
Finding JNI with AWT component specified and linking them to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(JNI COMPONENTS AWT)
target_link_libraries(project_target PRIVATE JNI::JNI JNI::AWT)
.EE
.UNINDENT
.UNINDENT
.sp
A more common way to use Java and JNI in CMake is to use a dedicated
\fI\%UseJava\fP module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Java)
find_package(JNI)
include(UseJava)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindJava\fP module to find Java runtime tools and development
components.
.IP \(bu 2
The \fI\%UseJava\fP module to use Java in CMake.
.UNINDENT
.SS FindJPEG
.sp
Finds the Joint Photographic Experts Group (JPEG) library (\fBlibjpeg\fP).
.sp
Changed in version 3.12: Debug and Release JPEG library variants are now found separately.

.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBJPEG::JPEG\fP
Added in version 3.12.

.sp
Target encapsulating the JPEG library usage requirements.  It is available
only when JPEG is found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBJPEG_FOUND\fP
Boolean indicating whether the JPEG is found.
.TP
.B \fBJPEG_INCLUDE_DIRS\fP
Include directories containing headers needed to use JPEG.
.TP
.B \fBJPEG_LIBRARIES\fP
Libraries needed to link to JPEG.
.TP
.B \fBJPEG_VERSION\fP
Added in version 3.12.

.sp
The version of the JPEG library found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBJPEG_INCLUDE_DIR\fP
Directory containing the \fBjpeglib.h\fP and related header files.
.TP
.B \fBJPEG_LIBRARY_RELEASE\fP
Added in version 3.12.

.sp
Path to the release (optimized) variant of the JPEG library.
.TP
.B \fBJPEG_LIBRARY_DEBUG\fP
Added in version 3.12.

.sp
Path to the debug variant of the JPEG library.
.UNINDENT
.SS Obsolete Variables
.sp
The following legacy variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBJPEG_LIBRARY\fP
Changed in version 3.12: This variable has been superseded by the \fBJPEG_LIBRARY_RELEASE\fP and
\fBJPEG_LIBRARY_DEBUG\fP variables.

.sp
Path to the JPEG library.
.UNINDENT
.SS Examples
.sp
Finding JPEG library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(JPEG)
target_link_libraries(project_target PRIVATE JPEG::JPEG)
.EE
.UNINDENT
.UNINDENT
.SS FindKDE3
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for KDE version 3, which is obsolete and
no longer maintained.  For modern application development using KDE
technologies with CMake, use a newer version of KDE, and refer to the
\X'tty: link https://develop.kde.org/docs/getting-started/building/cmake-build/'\fI\%KDE documentation\fP\X'tty: link'\&.
.UNINDENT
.UNINDENT
.sp
This module finds KDE 3 include directories, libraries, and KDE\-specific
preprocessor tools.  It provides usage requirements for building KDE 3 software
and defines several helper commands to simplify working with KDE 3 in CMake.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBKDE3_FOUND\fP
Boolean indicating whether KDE 3 is found.
.TP
.B \fBKDE3_DEFINITIONS\fP
Compiler definitions required for compiling KDE 3 software.
.TP
.B \fBKDE3_INCLUDE_DIRS\fP
The KDE and the Qt include directories, for use with the
\fI\%target_include_directories()\fP command.
.TP
.B \fBKDE3_LIB_DIR\fP
The directory containing the installed KDE 3 libraries, for use with the
\fI\%target_link_directories()\fP command.
.TP
.B \fBQT_AND_KDECORE_LIBS\fP
A list containing both the Qt and the kdecore library, typically used together
when linking KDE 3.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBKDE3_INCLUDE_DIR\fP
The directory containing KDE 3 header files.
.TP
.B \fBKDE3_DCOPIDL_EXECUTABLE\fP
The path to the \fBdcopidl\fP executable.
.TP
.B \fBKDE3_DCOPIDL2CPP_EXECUTABLE\fP
The path to the \fBdcopidl2cpp\fP executable.
.TP
.B \fBKDE3_KCFGC_EXECUTABLE\fP
The path to the \fBkconfig_compiler\fP executable.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBKDE3_BUILD_TESTS\fP
Provided as a user adjustable option.  Set this variable to boolean true to
build KDE 3 testcases.
.UNINDENT
.SS Commands
.sp
This module provides the following commands to work with KDE 3 in CMake:
.INDENT 0.0
.TP
.B kde3_automoc
Enables automatic processing with \fBmoc\fP for the given source files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_automoc(<sources>...)
.EE
.UNINDENT
.UNINDENT
.sp
Call this command to enable automatic \fBmoc\fP file handling.  For example,
if a source file (e.g., \fBfoo.cpp\fP) contains \fBinclude \(dqfoo.moc\(dq\fP, a
\fBmoc\fP file for the corresponding header (\fBfoo.h\fP) will be generated
automatically.  To skip processing for a specific source file, set the
\fI\%SKIP_AUTOMOC\fP source file property.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_moc_files
Processes header files with \fBmoc\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_moc_files(<variable> <headers>...)
.EE
.UNINDENT
.UNINDENT
.sp
If not using \fBkde3_automoc()\fP, this command can be used to generate \fBmoc\fP
files for one or more \fB<headers>\fP files.  The generated files are named
\fB<filename>.moc.cpp\fP and the resulting list of these generated source files
is stored in the variable named \fB<variable>\fP for use in project targets.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_dcop_skels
Generates KIDL and DCOP skeletons:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_dcop_skels(<variable> <dcop\-headers>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command generates \fB\&.kidl\fP and DCOP skeleton source files from the given
DCOP header files.  The resulting list of generated source files is stored in
the variable named \fB<variable>\fP for use in project targets.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_dcop_stubs
Generates DCOP stubs:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_dcop_stubs(<variable> <headers>...)
.EE
.UNINDENT
.UNINDENT
.sp
Use this command to generate DCOP stubs from one or more given header files.
The resulting list of generated source files is stored in the variable named
\fB<variable>\fP for use in project targets.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_ui_files
Adds Qt designer UI files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_ui_files(<variable> <ui\-files>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command creates the implementation files from the given Qt designer
\fB\&.ui\fP files.  The resulting list of generated files is stored in the
variable named \fB<variable>\fP for use in project targets.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_kcfg_files
Adds KDE kconfig compiler files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_kcfg_files(<variable> <kcfgc\-files>...)
.EE
.UNINDENT
.UNINDENT
.sp
Use this command to add KDE kconfig compiler files (\fB\&.kcfgc\fP) to the
application/library.  The resulting list of generated source files is stored
in the variable named \fB<variable>\fP for use in project targets.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_install_libtool_file
Creates and installs a libtool file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_install_libtool_file(<target>)
.EE
.UNINDENT
.UNINDENT
.sp
This command creates and installs a basic libtool file for the given target
\fB<target>\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_executable
Adds KDE executable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_executable(<name> <sources>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command is functionally identical to the built\-in
\fI\%add_executable()\fP command.  It was originally intended to support
additional features in future versions of this module.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_kpart
Creates a KDE plugin:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_kpart(<name> [WITH_PREFIX] <sources>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command creates a KDE plugin (KPart, kioslave, etc.) from one or more
source files \fB<sources>\fP\&.  It also creates and installs an appropriate
libtool \fB\&.la\fP file.
.sp
If the \fBWITH_PREFIX\fP option is given, the resulting plugin name will be
prefixed with \fBlib\fP\&.  Otherwise, no prefix is added.
.UNINDENT
.INDENT 0.0
.TP
.B kde3_add_kdeinit_executable
Creates a KDE application as a module loadable via kdeinit:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
kde3_add_kdeinit_executable(<name> <sources>...)
.EE
.UNINDENT
.UNINDENT
.sp
This command creates a library named \fBkdeinit_<name>\fP from one or more
source files \fB<sources>\fP\&.  It also builds a small executable linked against
this library.
.UNINDENT
.SS Examples
.sp
Finding KDE 3:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(KDE3)
.EE
.UNINDENT
.UNINDENT
.SS FindKDE4
.sp
Find KDE4 and provide all necessary variables and macros to compile
software for it.  It looks for KDE 4 in the following directories in
the given order:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
CMAKE_INSTALL_PREFIX
KDEDIRS
/opt/kde4
.EE
.UNINDENT
.UNINDENT
.sp
Please look in \fBFindKDE4Internal.cmake\fP and \fBKDE4Macros.cmake\fP for more
information.  They are installed with the KDE 4 libraries in
$KDEDIRS/share/apps/cmake/modules/.
.sp
Author: Alexander Neundorf <\X'tty: link mailto:neundorf@kde.org'\fI\%neundorf@kde.org\fP\X'tty: link'>
.SS FindLAPACK
.sp
Find Linear Algebra PACKage (LAPACK) library
.sp
This module finds an installed Fortran library that implements the
\X'tty: link https://netlib.org/lapack/'\fI\%LAPACK linear\-algebra interface\fP\X'tty: link'\&.
.sp
At least one of the \fBC\fP, \fBCXX\fP, or \fBFortran\fP languages must be enabled.
.SS Input Variables
.sp
The following variables may be set to influence this module\(aqs behavior:
.INDENT 0.0
.TP
.B \fBBLA_STATIC\fP
if \fBON\fP use static linkage
.TP
.B \fBBLA_VENDOR\fP
Set to one of the \fI\%BLAS/LAPACK Vendors\fP to search for BLAS only
from the specified vendor.  If not set, all vendors are considered.
.TP
.B \fBBLA_F95\fP
if \fBON\fP tries to find the BLAS95/LAPACK95 interfaces
.TP
.B \fBBLA_PREFER_PKGCONFIG\fP
Added in version 3.20.

.sp
if set \fBpkg\-config\fP will be used to search for a LAPACK library first
and if one is found that is preferred
.TP
.B \fBBLA_PKGCONFIG_LAPACK\fP
Added in version 3.25.

.sp
If set, the \fBpkg\-config\fP method will look for this module name instead of
just \fBlapack\fP\&.
.TP
.B \fBBLA_SIZEOF_INTEGER\fP
Added in version 3.22.

.sp
Specify the BLAS/LAPACK library integer size:
.INDENT 7.0
.TP
.B \fB4\fP
Search for a BLAS/LAPACK with 32\-bit integer interfaces.
.TP
.B \fB8\fP
Search for a BLAS/LAPACK with 64\-bit integer interfaces.
.TP
.B \fBANY\fP
Search for any BLAS/LAPACK.
Most likely, a BLAS/LAPACK with 32\-bit integer interfaces will be found.
.UNINDENT
.TP
.B \fBBLA_THREAD\fP
Added in version 4.1.

.sp
Specify the BLAS/LAPACK threading model:
.INDENT 7.0
.TP
.B \fBSEQ\fP
Sequential model
.TP
.B \fBOMP\fP
OpenMP model
.TP
.B \fBANY\fP
Search for any BLAS/LAPACK, if both are available most likely \fBOMP\fP will
be found.
.UNINDENT
.sp
This is currently only supported by NVIDIA NVPL.
.UNINDENT
.SS Imported Targets
.sp
This module defines the following \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBLAPACK::LAPACK\fP
Added in version 3.18.

.sp
The libraries to use for LAPACK, if found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLAPACK_FOUND\fP
library implementing the LAPACK interface is found
.TP
.B \fBLAPACK_LINKER_FLAGS\fP
uncached list of required linker flags (excluding \fB\-l\fP and \fB\-L\fP).
.TP
.B \fBLAPACK_LIBRARIES\fP
uncached list of libraries (using full path name) to link against
to use LAPACK
.TP
.B \fBLAPACK95_LIBRARIES\fP
uncached list of libraries (using full path name) to link against
to use LAPACK95
.TP
.B \fBLAPACK95_FOUND\fP
library implementing the LAPACK95 interface is found
.UNINDENT
.SS Intel MKL
.sp
To use the Intel MKL implementation of LAPACK, a project must enable at least
one of the \fBC\fP or \fBCXX\fP languages.  Set \fBBLA_VENDOR\fP to an Intel MKL
variant either on the command\-line as \fB\-DBLA_VENDOR=Intel10_64lp\fP or in
project code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(BLA_VENDOR Intel10_64lp)
find_package(LAPACK)
.EE
.UNINDENT
.UNINDENT
.sp
In order to build a project using Intel MKL, and end user must first
establish an Intel MKL environment.  See the \fI\%FindBLAS\fP module
section on \fI\%Intel MKL\fP for details.
.SS FindLATEX
.sp
Finds LaTeX compiler and Latex\-related software like BibTeX.  LaTeX is a
typesetting system for the production of technical and scientific documentation.
.SS Components
.sp
Added in version 3.2.

.sp
Components can be optionally specified using a standard CMake syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LATEX [COMPONENTS <component>...])
.EE
.UNINDENT
.UNINDENT
.sp
Supported components are:
.INDENT 0.0
.TP
.B \fBPDFLATEX\fP
Finds the PdfLaTeX compiler.
.TP
.B \fBXELATEX\fP
Finds the XeLaTeX compiler.
.TP
.B \fBLUALATEX\fP
Finds the LuaLaTeX compiler.
.TP
.B \fBBIBTEX\fP
Finds the BibTeX compiler.
.TP
.B \fBBIBER\fP
Finds the Biber compiler.
.TP
.B \fBMAKEINDEX\fP
Finds the MakeIndex compiler.
.TP
.B \fBXINDY\fP
Find the xindy compiler.
.TP
.B \fBDVIPS\fP
Finds the DVI\-to\-PostScript (DVIPS) converter.
.TP
.B \fBDVIPDF\fP
Finds the DVIPDF converter.
.TP
.B \fBPS2PDF\fP
Finds the the PS2PDF converter.
.TP
.B \fBPDFTOPS\fP
Finds the PDF\-to\-PostScript converter.
.TP
.B \fBLATEX2HTML\fP
Finds the converter for converting LaTeX documents to HTML.
.TP
.B \fBHTLATEX\fP
Finds htlatex compiler.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLATEX_FOUND\fP
Boolean indicating whether the LaTex compiler and all its required components
are found.
.TP
.B \fBLATEX_<component>_FOUND\fP
Boolean indicating whether the LaTeX \fB<component>\fP is found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLATEX_COMPILER\fP
The path to the LaTeX compiler.
.TP
.B \fBPDFLATEX_COMPILER\fP
The path to the PdfLaTeX compiler.
.TP
.B \fBXELATEX_COMPILER\fP
The path to the XeLaTeX compiler.
.TP
.B \fBLUALATEX_COMPILER\fP
The path to the LuaLaTeX compiler.
.TP
.B \fBBIBTEX_COMPILER\fP
The path to the BibTeX compiler.
.TP
.B \fBBIBER_COMPILER\fP
The path to the Biber compiler.
.TP
.B \fBMAKEINDEX_COMPILER\fP
The path to the MakeIndex compiler.
.TP
.B \fBXINDY_COMPILER\fP
The path to the xindy compiler.
.TP
.B \fBDVIPS_CONVERTER\fP
The path to the DVIPS converter.
.TP
.B \fBDVIPDF_CONVERTER\fP
The path to the DVIPDF converter.
.TP
.B \fBPS2PDF_CONVERTER\fP
The path to the PS2PDF converter.
.TP
.B \fBPDFTOPS_CONVERTER\fP
The path to the pdftops converter.
.TP
.B \fBLATEX2HTML_CONVERTER\fP
The path to the LaTeX2Html converter.
.TP
.B \fBHTLATEX_COMPILER\fP
The path to the htlatex compiler.
.UNINDENT
.SS Examples
.sp
Finding LaTeX in a project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LATEX)
.EE
.UNINDENT
.UNINDENT
.sp
Finding LaTeX compiler and specifying which additional LaTeX components are
required for LaTeX to be considered found:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LATEX COMPONENTS PDFLATEX)

if(LATEX_FOUND)
  execute_process(COMMAND ${LATEX_COMPILER} ...)
  execute_process(COMMAND ${PDFLATEX_COMPILER} ...)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Or finding LaTeX compiler and specifying multiple components:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LATEX COMPONENTS BIBTEX PS2PDF)

if(LATEXT_FOUND)
  # ...
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindLibArchive
.sp
Finds the libarchive library and include directories.  Libarchive is a
multi\-format archive and compression library.
.SS Import Targets
.sp
This module defines the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBLibArchive::LibArchive\fP
Added in version 3.17.

.sp
A target for linking against libarchive.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLibArchive_FOUND\fP
Boolean indicating whether libarchive was found.
.TP
.B \fBLibArchive_INCLUDE_DIRS\fP
Include search path for using libarchive.
.TP
.B \fBLibArchive_LIBRARIES\fP
Libraries to link against libarchive.
.TP
.B \fBLibArchive_VERSION\fP
A 3\-component version string (\fBmajor.minor.patch\fP) of libarchive found.
.sp
Added in version 3.6: Support for a new libarchive version string format.  Starting from
libarchive version 3.2, a different preprocessor macro is used in the header
to define the version.  In CMake 3.5 and earlier, this variable will be set
only for libarchive versions 3.1 and earlier.  In CMake 3.6 and newer, this
variable will be set for all libarchive versions.

.UNINDENT
.SS Examples
.sp
Finding LibArchive and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LibArchive)
target_link_libraries(project_target PRIVATE LibArchive::LibArchive)
.EE
.UNINDENT
.UNINDENT
.SS FindLibinput
.sp
Added in version 3.14.

.sp
Finds the libinput library which handles input devices in Wayland compositors
and provides a generic X.Org input driver.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBLibinput::Libinput\fP
Target encapsulating the libinput library usage requirements, available only
if library is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLibinput_FOUND\fP
Boolean indicating whether the (requested version of) libinput library is
found.
.TP
.B \fBLibinput_VERSION\fP
The version of the libinput found.
.TP
.B \fBLibinput_LIBRARIES\fP
The libraries to link against to use the libinput library.
.TP
.B \fBLibinput_INCLUDE_DIRS\fP
The include directories containing headers needed to use the libinput library.
.TP
.B \fBLibinput_COMPILE_OPTIONS\fP
Compile options needed to use the libinput library.  These can be passed to
the \fI\%target_compile_options()\fP command, when not using the
\fBLibinput::Libinput\fP imported target.
.UNINDENT
.SS Examples
.sp
Finding the libinput library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Libinput)
target_link_libraries(project_target PRIVATE Libinput::Libinput)
.EE
.UNINDENT
.UNINDENT
.SS FindLibLZMA
.sp
Finds the data compression library that implements the LZMA (Lempel–Ziv–Markov
chain algorithm) \- liblzma.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBLibLZMA::LibLZMA\fP
Added in version 3.14.

.sp
Target encapsulating the liblzma library usage requirements, available only if
liblzma is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLibLZMA_FOUND\fP
Boolean indicating whether the liblzma is found.  For backward compatibility,
the \fBLIBLZMA_FOUND\fP variable is also set to the same value.
.TP
.B \fBLIBLZMA_INCLUDE_DIRS\fP
Include directories containing headers needed to use liblzma.
.TP
.B \fBLIBLZMA_LIBRARIES\fP
Libraries needed to link against to use liblzma.
.TP
.B \fBLIBLZMA_VERSION\fP
Added in version 3.26.

.sp
The version of liblzma found (available as a string, for example, \fB5.0.3\fP).
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLIBLZMA_HAS_AUTO_DECODER\fP
Boolean sanity check result indicating whether the \fBlzma_auto_decoder()\fP
function (automatic decoder functionality) is found in liblzma (required).
.TP
.B \fBLIBLZMA_HAS_EASY_ENCODER\fP
Boolean sanity check result indicating whether the \fBlzma_easy_encoder()\fP
function (basic encoder API) is found in liblzma (required).
.TP
.B \fBLIBLZMA_HAS_LZMA_PRESET\fP
Boolean sanity check result indicating whether the \fBlzma_lzma_preset()\fP
function (preset compression configuration) is found in liblzma (required).
.UNINDENT
.SS Legacy Variables
.sp
The following variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBLIBLZMA_VERSION_MAJOR\fP
The major version of liblzma found.
.TP
.B \fBLIBLZMA_VERSION_MINOR\fP
The minor version of liblzma found.
.TP
.B \fBLIBLZMA_VERSION_PATCH\fP
The patch version of liblzma found.
.TP
.B \fBLIBLZMA_VERSION_STRING\fP
The version of liblzma found.
.sp
Changed in version 3.26: Superseded by \fBLIBLZMA_VERSION\fP\&.

.UNINDENT
.SS Examples
.sp
Finding the liblzma library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LibLZMA)
target_link_libraries(project_target PRIVATE LibLZMA::LibLZMA)
.EE
.UNINDENT
.UNINDENT
.SS FindLibXml2
.sp
Finds the XML processing library (libxml2).
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBLibXml2::LibXml2\fP
Added in version 3.12.

.sp
Target encapsulating the libxml2 library usage requirements, available only if
library is found.
.TP
.B \fBLibXml2::xmllint\fP
Added in version 3.17.

.sp
Target encapsulating the xmllint command\-line executable, available only if
xmllint executable is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLibXml2_FOUND\fP
Boolean indicating whether the libxml2 library is found.
.TP
.B \fBLIBXML2_INCLUDE_DIRS\fP
Include directories needed to use the libxml2 library.
.TP
.B \fBLIBXML2_LIBRARIES\fP
Libraries needed to link against to use the libxml2 library.
.TP
.B \fBLIBXML2_DEFINITIONS\fP
The compiler switches required for using libxml2.
.TP
.B \fBLIBXML2_VERSION_STRING\fP
The version of the libxml2 found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLIBXML2_INCLUDE_DIR\fP
The include directory containing libxml2 headers.
.TP
.B \fBLIBXML2_LIBRARY\fP
The path to the libxml2 library.
.TP
.B \fBLIBXML2_XMLLINT_EXECUTABLE\fP
The path to the XML checking tool \fBxmllint\fP coming with libxml2.
.UNINDENT
.SS Examples
.sp
Finding the libxml2 library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LibXml2)
target_link_libraries(project_target PRIVATE LibXml2::LibXml2)
.EE
.UNINDENT
.UNINDENT
.SS FindLibXslt
.sp
Finds the XSL Transformations, Extensible Stylesheet Language Transformations
(XSLT) library (libxslt).
.SS Imported Targets
.sp
Added in version 3.18.

.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBLibXslt::LibXslt\fP
Target encapsulating the usage requirements of the libxslt library.  This
target is available only if libxslt is found.
.TP
.B \fBLibXslt::LibExslt\fP
Target encapsulating the usage requirements for the libexslt library. Part of
the libxslt package, libexslt provides optional extensions to XSLT on top of
libxslt.  This target is available only if the main libxslt library is found.
.TP
.B \fBLibXslt::xsltproc\fP
Target encapsulating the command\-line XSLT processor (\fBxsltproc\fP).  This
tool, part of the libxslt package, applies XSLT stylesheets to XML documents
as a command\-line alternative to the libxslt library.  This target is
available only if the \fBxsltproc\fP executable is found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBLibXslt_FOUND\fP
Boolean indicating whether the libxslt is found.  For backward compatibility,
the \fBLIBXSLT_FOUND\fP variable is also set to the same value.
.TP
.B \fBLIBXSLT_LIBRARIES\fP
Libraries needed to link to libxslt.
.TP
.B \fBLIBXSLT_DEFINITIONS\fP
Compiler switches required for using libxslt.
.TP
.B \fBLIBXSLT_VERSION_STRING\fP
Version of libxslt found.
.TP
.B \fBLIBXSLT_EXSLT_LIBRARIES\fP
Libraries needed when linking against the exslt library.  These are available
and needed only when using exslt library.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLIBXSLT_INCLUDE_DIR\fP
Directory containing \fBlibxslt/xslt.h\fP and other libxslt header files.
.TP
.B \fBLIBXSLT_EXSLT_INCLUDE_DIR\fP
Added in version 3.18.

.sp
Directory containing \fBlibexslt/exslt.h\fP and other exslt\-related headers.
These are needed only when using exslt (extensions to XSLT).
.TP
.B \fBLIBXSLT_XSLTPROC_EXECUTABLE\fP
Full path to the XSLT processor executable \fBxsltproc\fP if found.  This path
is optional.
.UNINDENT
.SS Examples
.sp
Finding libxslt library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LibXslt)
target_link_libraries(foo PRIVATE LibXslt::LibXslt)
.EE
.UNINDENT
.UNINDENT
.sp
When project also needs the extensions to XSLT (exslt) library, both targets
should be linked:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LibXslt)
target_link_libraries(foo PRIVATE LibXslt::LibXslt LibXslt::LibExslt)
.EE
.UNINDENT
.UNINDENT
.sp
Example, how to use XSLT processor in a custom command build rule:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LibXslt)

if(TARGET LibXslt::xsltproc)
  # Executed when some build rule depends on example.html.
  add_custom_command(
    OUTPUT example.html
    COMMAND LibXslt::xsltproc \-o example.html transform.xslt example.xml
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindLTTngUST
.sp
Added in version 3.6.

.sp
Finds the \X'tty: link https://lttng.org/'\fI\%LTTng\fP\X'tty: link' (Linux Trace Toolkit: next generation)
user space tracing library (LTTng\-UST).
.SS Imported Targets
.sp
This module defines the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBLTTng::UST\fP
Target providing the LTTng\-UST library usage requirements.  This target is
available only when LTTng\-UST is found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBLTTngUST_FOUND\fP
Boolean indicating whether the LTTng\-UST library is found.  For backward
compatibility, the \fBLTTNGUST_FOUND\fP variable is also set to the same value.
.TP
.B \fBLTTNGUST_VERSION_STRING\fP
The LTTng\-UST version.
.TP
.B \fBLTTNGUST_HAS_TRACEF\fP
\fBTRUE\fP if the \fBtracef()\fP API is available in the system\(aqs LTTng\-UST.
.TP
.B \fBLTTNGUST_HAS_TRACELOG\fP
\fBTRUE\fP if the \fBtracelog()\fP API is available in the system\(aqs LTTng\-UST.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLTTNGUST_INCLUDE_DIRS\fP
The LTTng\-UST include directories.
.TP
.B \fBLTTNGUST_LIBRARIES\fP
The libraries needed to use LTTng\-UST.
.UNINDENT
.SS Examples
.sp
Finding the LTTng\-UST library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(LTTugNST)
target_link_libraries(project_target PRIVATE LTTng::UST)
.EE
.UNINDENT
.UNINDENT
.SS FindLua
.sp
Finds the Lua library.  Lua is a embeddable scripting language.
.sp
Added in version 3.18: Support for Lua 5.4.

.sp
When working with Lua, its library headers are intended to be included in
project source code as:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <lua.h>
.EE
.UNINDENT
.UNINDENT
.sp
and not:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <lua/lua.h>
.EE
.UNINDENT
.UNINDENT
.sp
This is because, the location of Lua headers may differ across platforms and may
exist in locations other than \fBlua/\fP\&.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLua_FOUND\fP
Boolean indicating whether (the requested version of) Lua is found.  For
backward compatibility, the \fBLUA_FOUND\fP variable is also set to the same
value.
.TP
.B \fBLUA_VERSION_STRING\fP
The version of Lua found.
.TP
.B \fBLUA_VERSION_MAJOR\fP
The major version of Lua found.
.TP
.B \fBLUA_VERSION_MINOR\fP
The minor version of Lua found.
.TP
.B \fBLUA_VERSION_PATCH\fP
The patch version of Lua found.
.TP
.B \fBLUA_LIBRARIES\fP
Libraries needed to link against to use Lua.  This list includes both \fBlua\fP
and \fBlualib\fP libraries.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLUA_INCLUDE_DIR\fP
The directory containing the Lua header files, such as \fBlua.h\fP,
\fBlualib.h\fP, and \fBlauxlib.h\fP, needed to use Lua.
.UNINDENT
.SS Examples
.sp
Finding the Lua library and creating an interface \fI\%imported target\fP that encapsulates its usage requirements for linking to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Lua)

if(Lua_FOUND AND NOT TARGET Lua::Lua)
  add_library(Lua::Lua INTERFACE IMPORTED)
  set_target_properties(
    Lua::Lua
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${LUA_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${LUA_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE Lua::Lua)
.EE
.UNINDENT
.UNINDENT
.SS FindLua50
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically for Lua version branch 5.0, which is obsolete and
not maintained anymore.  In new code use the latest supported Lua version and
the version\-agnostic module \fI\%FindLua\fP instead.
.UNINDENT
.UNINDENT
.sp
Finds the Lua library.  Lua is a embeddable scripting language.
.sp
When working with Lua, its library headers are intended to be included in
project source code as:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <lua.h>
.EE
.UNINDENT
.UNINDENT
.sp
and not:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <lua/lua.h>
.EE
.UNINDENT
.UNINDENT
.sp
This is because, the location of Lua headers may differ across platforms and may
exist in locations other than \fBlua/\fP\&.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLua50_FOUND\fP
Boolean indicating whether Lua is found.  For backward compatibility, the
\fBLUA50_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLUA_INCLUDE_DIR\fP
The directory containing the Lua header files, such as \fBlua.h\fP,
\fBlualib.h\fP, and \fBlauxlib.h\fP, needed to use Lua.
.TP
.B \fBLUA_LIBRARIES\fP
Libraries needed to link against to use Lua.  This list includes both \fBlua\fP
and \fBlualib\fP libraries.
.UNINDENT
.SS Examples
.sp
Finding the Lua 5.0 library and creating an interface \fI\%imported target\fP that encapsulates its usage requirements for linking to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Lua50)

if(Lua50_FOUND AND NOT TARGET Lua50::Lua50)
  add_library(Lua50::Lua50 INTERFACE IMPORTED)
  set_target_properties(
    Lua50::Lua50
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${LUA_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${LUA_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE Lua50::Lua50)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindLua\fP module to find Lua in version\-agnostic way.
.UNINDENT
.SS FindLua51
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically for Lua version branch 5.1, which is obsolete and
not maintained anymore.  In new code use the latest supported Lua version and
the version\-agnostic module \fI\%FindLua\fP instead.
.UNINDENT
.UNINDENT
.sp
Finds the Lua library.  Lua is a embeddable scripting language.
.sp
When working with Lua, its library headers are intended to be included in
project source code as:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <lua.h>
.EE
.UNINDENT
.UNINDENT
.sp
and not:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <lua/lua.h>
.EE
.UNINDENT
.UNINDENT
.sp
This is because, the location of Lua headers may differ across platforms and may
exist in locations other than \fBlua/\fP\&.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBLua51_FOUND\fP
Boolean indicating whether Lua is found.  For backward compatibility, the
\fBLUA51_FOUND\fP variable is also set to the same value.
.TP
.B \fBLUA_VERSION_STRING\fP
The version of Lua found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBLUA_INCLUDE_DIR\fP
The directory containing the Lua header files, such as \fBlua.h\fP,
\fBlualib.h\fP, and \fBlauxlib.h\fP, needed to use Lua.
.TP
.B \fBLUA_LIBRARIES\fP
Libraries needed to link against to use Lua.
.UNINDENT
.SS Examples
.sp
Finding the Lua 5.1 library and creating an interface \fI\%imported target\fP that encapsulates its usage requirements for linking to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Lua51)

if(Lua51_FOUND AND NOT TARGET Lua51::Lua51)
  add_library(Lua51::Lua51 INTERFACE IMPORTED)
  set_target_properties(
    Lua51::Lua51
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${LUA_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${LUA_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE Lua51::Lua51)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindLua\fP module to find Lua in version\-agnostic way.
.UNINDENT
.SS FindMatlab
.sp
Finds Matlab or Matlab Compiler Runtime (MCR) and provides Matlab tools,
libraries and compilers to CMake.
.sp
This package primary purpose is to find the libraries associated with Matlab
or the MCR in order to be able to build Matlab extensions (mex files). It
can also be used:
.INDENT 0.0
.IP \(bu 2
to run specific commands in Matlab in case Matlab is available
.IP \(bu 2
for declaring Matlab unit test
.IP \(bu 2
to retrieve various information from Matlab (mex extensions, versions and
release queries, ...)
.UNINDENT
.sp
Added in version 3.12: Added Matlab Compiler Runtime (MCR) support.

.sp
The module supports the following components:
.INDENT 0.0
.IP \(bu 2
\fBENG_LIBRARY\fP and \fBMAT_LIBRARY\fP: respectively the \fBENG\fP and \fBMAT\fP
libraries of Matlab
.IP \(bu 2
\fBMAIN_PROGRAM\fP the Matlab binary program. Note that this component is not
available on the MCR version, and will yield an error if the MCR is found
instead of the regular Matlab installation.
.IP \(bu 2
\fBMEX_COMPILER\fP the MEX compiler.
.IP \(bu 2
\fBMCC_COMPILER\fP the MCC compiler, included with the Matlab Compiler add\-on.
.IP \(bu 2
\fBSIMULINK\fP the Simulink environment.
.UNINDENT
.sp
Added in version 3.7: Added the \fBMAT_LIBRARY\fP component.

.sp
Added in version 3.13: Added the \fBENGINE_LIBRARY\fP, \fBDATAARRAY_LIBRARY\fP and \fBMCC_COMPILER\fP
components.

.sp
Changed in version 3.14: Removed the \fBMX_LIBRARY\fP, \fBENGINE_LIBRARY\fP and \fBDATAARRAY_LIBRARY\fP
components.  These libraries are found unconditionally.

.sp
Added in version 3.30: Added support for specifying a version range to \fI\%find_package()\fP and
added support for specifying \fBREGISTRY_VIEW\fP to \fI\%find_package()\fP,
\fI\%matlab_extract_all_installed_versions_from_registry()\fP and
\fI\%matlab_get_all_valid_matlab_roots_from_registry()\fP\&. The default
behavior remained unchanged, by using the registry view \fBTARGET\fP\&.

.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The version given to the \fI\%find_package()\fP directive is the Matlab
\fBversion\fP, which should not be confused with the Matlab \fIrelease\fP name
(e.g. \fIR2023b\fP).
The \fI\%matlab_get_version_from_release_name()\fP and
\fI\%matlab_get_release_name_from_version()\fP provide a mapping
between the release name and the version.
.UNINDENT
.UNINDENT
.sp
The variable \fI\%Matlab_ROOT_DIR\fP may be specified in order to give
the path of the desired Matlab version. Otherwise, the behavior is platform
specific:
.INDENT 0.0
.IP \(bu 2
Windows: The installed versions of Matlab/MCR are retrieved from the
Windows registry. The \fBREGISTRY_VIEW\fP argument may optionally be specified
to manually control whether 32bit or 64bit versions shall be searched for.
.IP \(bu 2
macOS: The installed versions of Matlab/MCR are given by the MATLAB
default installation paths under \fB$HOME/Applications\fP and \fB/Applications\fP\&.
If no such application is found, it falls back to the one that might be
accessible from the \fBPATH\fP\&.
.IP \(bu 2
Unix: The desired Matlab should be accessible from the \fBPATH\fP\&. This does
not work for MCR installation and \fI\%Matlab_ROOT_DIR\fP should be
specified on this platform.
.UNINDENT
.sp
Additional information is provided when \fI\%MATLAB_FIND_DEBUG\fP is set.
When a Matlab/MCR installation is found automatically and the \fBMATLAB_VERSION\fP
is not given, the version is queried from Matlab directly (on Windows this
may pop up a Matlab window) or from the MCR installation.
.sp
The mapping of the release names and the version of Matlab is performed by
defining pairs (name, version).  The variable
\fI\%MATLAB_ADDITIONAL_VERSIONS\fP may be provided before the call to
the \fI\%find_package()\fP in order to handle additional versions.
.sp
A Matlab scripts can be added to the set of tests using the
\fI\%matlab_add_unit_test()\fP\&. By default, the Matlab unit test framework
will be used (>= 2013a) to run this script, but regular \fB\&.m\fP files
returning an exit code can be used as well (0 indicating a success).
.SS Module Input Variables
.sp
Users or projects may set the following variables to configure the module
behavior:
.INDENT 0.0
.TP
.B \fI\%Matlab_ROOT\fP
Added in version 3.25.

.sp
Default value for \fI\%Matlab_ROOT_DIR\fP, the root of the Matlab
installation.
.TP
.B \fI\%Matlab_ROOT_DIR\fP
The root of the Matlab installation.
.TP
.B \fI\%MATLAB_FIND_DEBUG\fP
outputs debug information
.TP
.B \fI\%MATLAB_ADDITIONAL_VERSIONS\fP
additional versions of Matlab for the automatic retrieval of the installed
versions.
.UNINDENT
.SS Imported Targets
.sp
Added in version 3.22.

.sp
This module defines the following \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBMatlab::mex\fP
The \fBmex\fP library, always available for MATLAB installations. Available for
MCR installations if provided by MCR.
.TP
.B \fBMatlab::mx\fP
The mx library of Matlab (arrays), always available for MATLAB installations.
Available for MCR installations if provided by MCR.
.TP
.B \fBMatlab::eng\fP
Matlab engine library. Available only if the \fBENG_LIBRARY\fP component
is requested.
.TP
.B \fBMatlab::mat\fP
Matlab matrix library. Available only if the \fBMAT_LIBRARY\fP component
is requested.
.TP
.B \fBMatlab::MatlabEngine\fP
Matlab C++ engine library, always available for MATLAB R2018a and newer.
Available for MCR installations if provided by MCR.
.TP
.B \fBMatlab::MatlabDataArray\fP
Matlab C++ data array library, always available for MATLAB R2018a and newer.
Available for MCR installations if provided by MCR.
.UNINDENT
.SS Variables defined by the module
.SS Result variables
.INDENT 0.0
.TP
.B \fBMatlab_FOUND\fP
\fBTRUE\fP if the Matlab installation is found, \fBFALSE\fP
otherwise. All variable below are defined if Matlab is found.
.TP
.B \fBMatlab_VERSION\fP
Added in version 3.27.

.sp
the numerical version (e.g. 23.2.0) of Matlab found. Not to be confused with
Matlab release name (e.g. R2023b) that can be obtained with
\fI\%matlab_get_release_name_from_version()\fP\&.
.TP
.B \fBMatlab_ROOT_DIR\fP
the final root of the Matlab installation determined by the FindMatlab
module.
.TP
.B \fBMatlab_MAIN_PROGRAM\fP
the Matlab binary program. Available only if the component \fBMAIN_PROGRAM\fP
is given in the \fI\%find_package()\fP directive.
.TP
.B \fBMatlab_INCLUDE_DIRS\fP
the path of the Matlab libraries headers
.TP
.B \fBMatlab_MEX_LIBRARY\fP
library for mex, always available for MATLAB installations. Available for MCR
installations if provided by MCR.
.TP
.B \fBMatlab_MX_LIBRARY\fP
mx library of Matlab (arrays), always available for MATLAB installations.
Available for MCR installations if provided by MCR.
.TP
.B \fBMatlab_ENG_LIBRARY\fP
Matlab engine library. Available only if the component \fBENG_LIBRARY\fP
is requested.
.TP
.B \fBMatlab_MAT_LIBRARY\fP
Matlab matrix library. Available only if the component \fBMAT_LIBRARY\fP
is requested.
.TP
.B \fBMatlab_ENGINE_LIBRARY\fP
Added in version 3.13.

.sp
Matlab C++ engine library, always available for MATLAB R2018a and newer.
Available for MCR installations if provided by MCR.
.TP
.B \fBMatlab_DATAARRAY_LIBRARY\fP
Added in version 3.13.

.sp
Matlab C++ data array library, always available for MATLAB R2018a and newer.
Available for MCR installations if provided by MCR.
.TP
.B \fBMatlab_LIBRARIES\fP
the whole set of libraries of Matlab
.TP
.B \fBMatlab_MEX_COMPILER\fP
the mex compiler of Matlab. Currently not used.
Available only if the component \fBMEX_COMPILER\fP is requested.
.TP
.B \fBMatlab_MCC_COMPILER\fP
Added in version 3.13.

.sp
the mcc compiler of Matlab. Included with the Matlab Compiler add\-on.
Available only if the component \fBMCC_COMPILER\fP is requested.
.UNINDENT
.SS Cached variables
.INDENT 0.0
.TP
.B \fBMatlab_MEX_EXTENSION\fP
the extension of the mex files for the current platform (given by Matlab).
.TP
.B \fBMatlab_ROOT_DIR\fP
the location of the root of the Matlab installation found. If this value
is changed by the user, the result variables are recomputed.
.UNINDENT
.SS Provided commands
.INDENT 0.0
.TP
.B \fI\%matlab_get_version_from_release_name()\fP
returns the version from the Matlab release name
.TP
.B \fI\%matlab_get_release_name_from_version()\fP
returns the release name from the Matlab version
.TP
.B \fI\%matlab_add_mex()\fP
adds a target compiling a MEX file.
.TP
.B \fI\%matlab_add_unit_test()\fP
adds a Matlab unit test file as a test to the project.
.TP
.B \fI\%matlab_extract_all_installed_versions_from_registry()\fP
parses the registry for all Matlab versions. Available on Windows only.
The part of the registry parsed is dependent on the host processor
.TP
.B \fI\%matlab_get_all_valid_matlab_roots_from_registry()\fP
returns all the possible Matlab or MCR paths, according to a previously
given list. Only the existing/accessible paths are kept. This is mainly
useful for the searching all possible Matlab installation.
.TP
.B \fI\%matlab_get_mex_suffix()\fP
returns the suffix to be used for the mex files
(platform/architecture dependent)
.TP
.B \fI\%matlab_get_version_from_matlab_run()\fP
returns the version of Matlab/MCR, given the full directory of the Matlab/MCR
installation path.
.UNINDENT
.SS Known issues
.INDENT 0.0
.TP
\fBSymbol clash in a MEX target\fP
By default, every symbols inside a MEX
file defined with the command \fI\%matlab_add_mex()\fP have hidden
visibility, except for the entry point. This is the default behavior of
the MEX compiler, which lowers the risk of symbol collision between the
libraries shipped with Matlab, and the libraries to which the MEX file is
linking to. This is also the default on Windows platforms.
.sp
However, this is not sufficient in certain case, where for instance your
MEX file is linking against libraries that are already loaded by Matlab,
even if those libraries have different SONAMES.
A possible solution is to hide the symbols of the libraries to which the
MEX target is linking to. This can be achieved in GNU GCC compilers with
the linker option \fB\-Wl,\-\-exclude\-libs,ALL\fP\&.
.TP
\fBTests using GPU resources\fP
in case your MEX file is using the GPU and
in order to be able to run unit tests on this MEX file, the GPU resources
should be properly released by Matlab. A possible solution is to make
Matlab aware of the use of the GPU resources in the session, which can be
performed by a command such as \fBD = gpuDevice()\fP at the beginning of
the test script (or via a fixture).
.UNINDENT
.SS Reference
.INDENT 0.0
.TP
.B Matlab_ROOT_DIR
The root folder of the Matlab installation. If set before the call to
\fI\%find_package()\fP, the module will look for the components in that
path. If not set, then an automatic search of Matlab
will be performed. If set, it should point to a valid version of Matlab.
.UNINDENT
.INDENT 0.0
.TP
.B MATLAB_FIND_DEBUG
If set, the lookup of Matlab and the intermediate configuration steps are
outputted to the console.
.UNINDENT
.INDENT 0.0
.TP
.B MATLAB_ADDITIONAL_VERSIONS
If set, specifies additional versions of Matlab that may be looked for.
The variable should be a list of strings, organized by pairs of release
name and versions, such as follows:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set(MATLAB_ADDITIONAL_VERSIONS
    \(dqrelease_name1=corresponding_version1\(dq
    \(dqrelease_name2=corresponding_version2\(dq
    ...
    )
.EE
.UNINDENT
.UNINDENT
.sp
Example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set(MATLAB_ADDITIONAL_VERSIONS
    \(dqR2013b=8.2\(dq
    \(dqR2013a=8.1\(dq
    \(dqR2012b=8.0\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The order of entries in this list matters when several versions of
Matlab are installed. The priority is set according to the ordering in
this list.
.UNINDENT
.INDENT 0.0
.TP
.B matlab_get_version_from_release_name
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_get_version_from_release_name(release version)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
Input: \fBrelease\fP is the release name (e.g. R2023b)
.IP \(bu 2
Output: \fBversion\fP is the version of Matlab (e.g. 23.2.0)
.UNINDENT
.sp
Returns the version of Matlab from a release name
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command provides correct versions mappings for Matlab but not MCR.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B matlab_get_release_name_from_version
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_get_release_name_from_version(version release_name)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
Input: \fBversion\fP is the version of Matlab (e.g. 23.2.0)
.IP \(bu 2
Output: \fBrelease_name\fP is the release name (R2023b)
.UNINDENT
.sp
Returns the release name from the version of Matlab
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command provides correct version mappings for Matlab but not MCR.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B matlab_extract_all_installed_versions_from_registry
This function parses the Windows registry and finds the Matlab versions that
are installed. The found versions are stored in a given \fB<versions\-var>\fP\&.
.INDENT 7.0
.TP
.B matlab_extract_all_installed_versions_from_registry(<versions\-var> [REGISTRY_VIEW\ view])
Added in version 3.30.

.INDENT 7.0
.IP \(bu 2
Output: \fB<versions\-var>\fP is a list of all the versions of Matlab found
.IP \(bu 2
Input: \fBREGISTRY_VIEW\fP Optional registry view to use for registry
interaction. The argument is passed (or omitted) to
\fI\%cmake_host_system_information()\fP without further checks or
modification.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B matlab_extract_all_installed_versions_from_registry(<win64> <versions\-var>)
.INDENT 7.0
.IP \(bu 2
Input: \fBwin64\fP is a boolean to search for the 64 bit version of
Matlab. Set to \fBON\fP to use the 64bit registry view or \fBOFF\fP to use the
32bit registry view. If finer control is needed, see signature above.
.IP \(bu 2
Output: \fB<versions\-var>\fP is a list of all the versions of Matlab found
.UNINDENT
.UNINDENT
.sp
The returned list contains all versions under
\fBHKLM\eSOFTWARE\eMathworks\eMATLAB\fP,
\fBHKLM\eSOFTWARE\eMathworks\eMATLAB Runtime\fP and
\fBHKLM\eSOFTWARE\eMathworks\eMATLAB Compiler Runtime\fP or an empty list in
case an error occurred (or nothing found).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Only the versions are provided. No check is made over the existence of the
installation referenced in the registry,
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B matlab_get_all_valid_matlab_roots_from_registry
Populates the Matlab root with valid versions of Matlab or
Matlab Runtime (MCR).
The returned matlab_roots is organized in triplets
\fB(type,version_number,matlab_root_path)\fP, where \fBtype\fP
indicates either \fBMATLAB\fP or \fBMCR\fP\&.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_get_all_valid_matlab_roots_from_registry(matlab_versions matlab_roots [REGISTRY_VIEW view])
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
Input: \fBmatlab_versions\fP of each of the Matlab or MCR installations
.IP \(bu 2
Output: \fBmatlab_roots\fP location of each of the Matlab or MCR installations
.IP \(bu 2
Input: \fBREGISTRY_VIEW\fP Optional registry view to use for registry
interaction. The argument is passed (or omitted) to
\fI\%cmake_host_system_information()\fP without further checks or
modification.
.UNINDENT
.sp
Added in version 3.30: The optional \fBREGISTRY_VIEW\fP argument was added to provide a more precise
interface on how to interact with the Windows Registry.

.UNINDENT
.INDENT 0.0
.TP
.B matlab_get_mex_suffix
Returns the extension of the mex files (the suffixes).
This function should not be called before the appropriate Matlab root has
been found.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_get_mex_suffix(matlab_root mex_suffix)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
Input: \fBmatlab_root\fP root of Matlab/MCR install e.g. \fBMatlab_ROOT_DIR\fP
.IP \(bu 2
Output: \fBmex_suffix\fP variable name in which the suffix will be returned.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B matlab_get_version_from_matlab_run
This function runs Matlab program specified on arguments and extracts its
version. If the path provided for the Matlab installation points to an MCR
installation, the version is extracted from the installed files.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_get_version_from_matlab_run(matlab_binary_path matlab_list_versions)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
Input: \fBmatlab_binary_path\fP path of the \fImatlab\fP binary executable
.IP \(bu 2
Output: \fBmatlab_list_versions\fP the version extracted from Matlab
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B matlab_add_unit_test
Adds a Matlab unit test to the test set of cmake/ctest.
This command requires the component \fBMAIN_PROGRAM\fP and hence is not
available for an MCR installation.
.sp
The unit test uses the Matlab unittest framework (default, available
starting Matlab 2013b+) except if the option \fBNO_UNITTEST_FRAMEWORK\fP
is given.
.sp
The function expects one Matlab test script file to be given.
In the case \fBNO_UNITTEST_FRAMEWORK\fP is given, the unittest script file
should contain the script to be run, plus an exit command with the exit
value. This exit value will be passed to the ctest framework (0 success,
non 0 failure). Additional arguments accepted by \fI\%add_test()\fP can be
passed through \fBTEST_ARGS\fP (eg. \fBCONFIGURATION <config> ...\fP).
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_add_unit_test(
    NAME <name>
    UNITTEST_FILE matlab_file_containing_unittest.m
    [CUSTOM_TEST_COMMAND matlab_command_to_run_as_test]
    [UNITTEST_PRECOMMAND matlab_command_to_run]
    [TIMEOUT timeout]
    [ADDITIONAL_PATH path1 [path2 ...]]
    [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]
    [TEST_ARGS arg1 [arg2 ...]]
    [NO_UNITTEST_FRAMEWORK]
    )
.EE
.UNINDENT
.UNINDENT
.sp
Function Parameters:
.INDENT 7.0
.TP
.B \fBNAME\fP
name of the unittest in ctest.
.TP
.B \fBUNITTEST_FILE\fP
the matlab unittest file. Its path will be automatically
added to the Matlab path.
.TP
.B \fBCUSTOM_TEST_COMMAND\fP
Matlab script command to run as the test.
If this is not set, then the following is run:
\fBruntests(\(aqmatlab_file_name\(aq), exit(max([ans(1,:).Failed]))\fP
where \fBmatlab_file_name\fP is the \fBUNITTEST_FILE\fP without the extension.
.TP
.B \fBUNITTEST_PRECOMMAND\fP
Matlab script command to be ran before the file
containing the test (eg. GPU device initialization based on CMake
variables).
.TP
.B \fBTIMEOUT\fP
the test timeout in seconds. Defaults to 180 seconds as the
Matlab unit test may hang.
.TP
.B \fBADDITIONAL_PATH\fP
a list of paths to add to the Matlab path prior to
running the unit test.
.TP
.B \fBMATLAB_ADDITIONAL_STARTUP_OPTIONS\fP
a list of additional option in order
to run Matlab from the command line.
\fB\-nosplash \-nodesktop \-nodisplay\fP are always added.
.TP
.B \fBTEST_ARGS\fP
Additional options provided to the add_test command. These
options are added to the default options (eg. \(dqCONFIGURATIONS Release\(dq)
.TP
.B \fBNO_UNITTEST_FRAMEWORK\fP
when set, indicates that the test should not
use the unittest framework of Matlab (available for versions >= R2013a).
.TP
.B \fBWORKING_DIRECTORY\fP
This will be the working directory for the test. If specified it will
also be the output directory used for the log file of the test run.
If not specified the temporary directory \fB${CMAKE_BINARY_DIR}/Matlab\fP will
be used as the working directory and the log location.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B matlab_add_mex
Adds a Matlab MEX target.
This commands compiles the given sources with the current tool\-chain in
order to produce a MEX file. The final name of the produced output may be
specified, as well as additional link libraries, and a documentation entry
for the MEX file. Remaining arguments of the call are passed to the
\fI\%add_library()\fP or \fI\%add_executable()\fP command.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
matlab_add_mex(
    NAME <name>
    [EXECUTABLE | MODULE | SHARED]
    SRC src1 [src2 ...]
    [OUTPUT_NAME output_name]
    [DOCUMENTATION file.txt]
    [LINK_TO target1 target2 ...]
    [R2017b | R2018a]
    [EXCLUDE_FROM_ALL]
    [NO_IMPLICIT_LINK_TO_MATLAB_LIBRARIES]
    [...]
)
.EE
.UNINDENT
.UNINDENT
.sp
Function Parameters:
.INDENT 7.0
.TP
.B \fBNAME\fP
name of the target.
.TP
.B \fBSRC\fP
list of source files.
.TP
.B \fBLINK_TO\fP
a list of additional link dependencies.  The target links to \fBlibmex\fP
and \fBlibmx\fP by default, unless the
\fBNO_IMPLICIT_LINK_TO_MATLAB_LIBRARIES\fP option is passed.
.TP
.B \fBOUTPUT_NAME\fP
if given, overrides the default name. The default name is
the name of the target without any prefix and
with \fBMatlab_MEX_EXTENSION\fP suffix.
.TP
.B \fBDOCUMENTATION\fP
if given, the file \fBfile.txt\fP will be considered as
being the documentation file for the MEX file. This file is copied into
the same folder without any processing, with the same name as the final
mex file, and with extension \fI\&.m\fP\&. In that case, typing \fBhelp <name>\fP
in Matlab prints the documentation contained in this file.
.TP
.B \fBR2017b\fP or \fBR2018a\fP
Added in version 3.14.

.sp
May be given to specify the version of the C API
to use: \fBR2017b\fP specifies the traditional (separate complex) C API,
and corresponds to the \fB\-R2017b\fP flag for the \fImex\fP command. \fBR2018a\fP
specifies the new interleaved complex C API, and corresponds to the
\fB\-R2018a\fP flag for the \fImex\fP command. Ignored if MATLAB version prior
to R2018a. Defaults to \fBR2017b\fP\&.
.TP
.B \fBMODULE\fP or \fBSHARED\fP
Added in version 3.7.

.sp
May be given to specify the type of library to be
created.
.TP
.B \fBEXECUTABLE\fP
Added in version 3.7.

.sp
May be given to create an executable instead of
a library. If no type is given explicitly, the type is \fBSHARED\fP\&.
.TP
.B \fBEXCLUDE_FROM_ALL\fP
This option has the same meaning as for \fI\%EXCLUDE_FROM_ALL\fP and
is forwarded to \fI\%add_library()\fP or \fI\%add_executable()\fP
commands.
.TP
.B \fBNO_IMPLICIT_LINK_TO_MATLAB_LIBRARIES\fP
Added in version 3.24.

.sp
This option permits to disable the automatic linking of MATLAB
libraries, so that only the libraries that are actually required can be
linked via the \fBLINK_TO\fP option.
.UNINDENT
.sp
The documentation file is not processed and should be in the following
format:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
% This is the documentation
function ret = mex_target_output_name(input1)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS FindMFC
.sp
Finds the native Microsoft Foundation Class Library (MFC) for developing MFC
applications on Windows.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
MFC is an optional component in Visual Studio and must be installed
separately for this module to succeed.
.UNINDENT
.UNINDENT
.sp
Once the MFC libraries and headers are found, no additional manual linking is
needed, as they are part of the development environment.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBMFC_FOUND\fP
Boolean indicating whether MFC support is found.
.UNINDENT
.SS Examples
.sp
Using this module to check if the application can link to the MFC libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(MFC)

if(MFC_FOUND)
  # Example logic when MFC is available...
  set(CMAKE_MFC_FLAG 2)
  add_executable(app WIN32 main.cpp)
  target_compile_definitions(app PRIVATE _AFXDLL)
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%CMAKE_MFC_FLAG\fP variable.
.UNINDENT
.SS FindMotif
.sp
Finds Motif (or LessTif) graphical user interface toolkit.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBMotif_FOUND\fP
Boolean indicating whether the Motif was found.  For backward compatibility,
the \fBMOTIF_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBMOTIF_LIBRARIES\fP
Libraries needed to link to Motif.
.TP
.B \fBMOTIF_INCLUDE_DIR\fP
Include directories needed to use Motif.
.UNINDENT
.SS Examples
.sp
Finding Motif:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Motif)
.EE
.UNINDENT
.UNINDENT
.SS FindMPEG
.sp
Finds the native MPEG library (libmpeg2).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is functionally identical to the \fI\%FindMPEG2\fP module, which
also finds the libmpeg2 library.  Both modules were introduced in the past to
provide flexibility in handling potential differences in future versions of
the MPEG library and to maintain backward compatibility across CMake releases.
.sp
The \fBFindMPEG2\fP module additionally checks for the SDL dependency and
includes it in its usage requirements.  For working with libmpeg2, it is
recommended to use the \fI\%FindMPEG2\fP module instead of this one.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBMPEG_FOUND\fP
Boolean indicating whether the libmpeg2 library is found.
.TP
.B \fBMPEG_LIBRARIES\fP
Libraries needed to link against to use libmpeg2.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may be also set:
.INDENT 0.0
.TP
.B \fBMPEG_INCLUDE_DIR\fP
The directory containing the \fBmpeg2.h\fP and related headers needed to use
libmpeg2 library.
.TP
.B \fBMPEG_mpeg2_LIBRARY\fP
The path to the libmpeg2 library.
.TP
.B \fBMPEG_vo_LIBRARY\fP
The path to the vo (Video Out) library.
.UNINDENT
.SS Examples
.sp
Finding libmpeg2 library and creating an imported interface target for linking
it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(MPEG)

if(MPEG_FOUND AND NOT TARGET MPEG::MPEG)
  add_library(MPEG::MPEG INTERFACE IMPORTED)
  set_target_properties(
    MPEG::MPEG
    PROPERTIES
      INTERFACE_LINK_LIBRARIES \(dq${MPEG_LIBRARIES}\(dq
      INTERFACE_INCLUDE_DIRECTORIES \(dq${MPEG_INCLUDE_DIR}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE MPEG::MPEG)
.EE
.UNINDENT
.UNINDENT
.SS FindMPEG2
.sp
Finds the native MPEG2 library (libmpeg2).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Depending on how the native libmpeg2 library is built and installed, it may
depend on the SDL (Simple DirectMedia Layer) library.  If SDL is found, this
module includes it in its usage requirements when used.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBMPEG2_FOUND\fP
Boolean indicating whether the libmpeg2 library is found.
.TP
.B \fBMPEG2_LIBRARIES\fP
Libraries needed to link against to use libmpeg2.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may be also set:
.INDENT 0.0
.TP
.B \fBMPEG2_INCLUDE_DIR\fP
The directory containing the \fBmpeg2.h\fP and related headers needed to use
libmpeg2 library.
.TP
.B \fBMPEG2_mpeg2_LIBRARY\fP
The path to the libmpeg2 library.
.TP
.B \fBMPEG2_vo_LIBRARY\fP
The path to the vo (Video Out) library.
.UNINDENT
.SS Examples
.sp
Finding libmpeg2 library and creating an imported interface target for linking
it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(MPEG2)

if(MPEG2_FOUND AND NOT TARGET MPEG2::MPEG2)
  add_library(MPEG2::MPEG2 INTERFACE IMPORTED)
  set_target_properties(
    MPEG2::MPEG2
    PROPERTIES
      INTERFACE_LINK_LIBRARIES \(dq${MPEG2_LIBRARIES}\(dq
      INTERFACE_INCLUDE_DIRECTORIES \(dq${MPEG2_INCLUDE_DIR}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE MPEG2::MPEG2)
.EE
.UNINDENT
.UNINDENT
.SS FindMPI
.sp
Find a Message Passing Interface (MPI) implementation.
.sp
The Message Passing Interface (MPI) is a library used to write
high\-performance distributed\-memory parallel applications, and is
typically deployed on a cluster.  MPI is a standard interface (defined
by the MPI forum) for which many implementations are available.
.sp
Added in version 3.10: Major overhaul of the module: many new variables, per\-language components,
support for a wider variety of runtimes.

.SS Variables for using MPI
.sp
The module exposes the components \fBC\fP, \fBCXX\fP, \fBMPICXX\fP and \fBFortran\fP\&.
Each of these controls the various MPI languages to search for.
The difference between \fBCXX\fP and \fBMPICXX\fP is that \fBCXX\fP refers to the
MPI C API being usable from C++, whereas \fBMPICXX\fP refers to the MPI\-2 C++ API
that was removed again in MPI\-3.
.sp
Depending on the enabled components the following variables will be set:
.INDENT 0.0
.TP
.B \fBMPI_FOUND\fP
Variable indicating that MPI settings for all requested languages have been found.
If no components are specified, this is true if MPI settings for all enabled languages
were detected. Note that the \fBMPICXX\fP component does not affect this variable.
.TP
.B \fBMPI_VERSION\fP
Minimal version of MPI detected among the requested languages, or all enabled languages
if no components were specified.
.UNINDENT
.sp
This module will set the following variables per language in your
project, where \fB<lang>\fP is one of C, CXX, or Fortran:
.INDENT 0.0
.TP
.B \fBMPI_<lang>_FOUND\fP
Variable indicating the MPI settings for \fB<lang>\fP were found and that
simple MPI test programs compile with the provided settings.
.TP
.B \fBMPI_<lang>_COMPILER\fP
MPI compiler for \fB<lang>\fP if such a program exists.
.TP
.B \fBMPI_<lang>_COMPILE_OPTIONS\fP
Compilation options for MPI programs in \fB<lang>\fP, given as a \fI\%;\-list\fP\&.
.TP
.B \fBMPI_<lang>_COMPILE_DEFINITIONS\fP
Compilation definitions for MPI programs in \fB<lang>\fP, given as a \fI\%;\-list\fP\&.
.TP
.B \fBMPI_<lang>_INCLUDE_DIRS\fP
Include path(s) for MPI header.
.TP
.B \fBMPI_<lang>_LINK_FLAGS\fP
Linker flags for MPI programs.
.TP
.B \fBMPI_<lang>_LIBRARIES\fP
All libraries to link MPI programs against.
.UNINDENT
.sp
Added in version 3.9: Additionally, the following \fI\%IMPORTED\fP targets are defined:

.INDENT 0.0
.TP
.B \fBMPI::MPI_<lang>\fP
Target for using MPI from \fB<lang>\fP\&.
.UNINDENT
.sp
The following variables indicating which bindings are present will be defined:
.INDENT 0.0
.TP
.B \fBMPI_MPICXX_FOUND\fP
Variable indicating whether the MPI\-2 C++ bindings are present (introduced in MPI\-2, removed with MPI\-3).
.TP
.B \fBMPI_Fortran_HAVE_F77_HEADER\fP
True if the Fortran 77 header \fBmpif.h\fP is available.
.TP
.B \fBMPI_Fortran_HAVE_F90_MODULE\fP
True if the Fortran 90 module \fBmpi\fP can be used for accessing MPI (MPI\-2 and higher only).
.TP
.B \fBMPI_Fortran_HAVE_F08_MODULE\fP
True if the Fortran 2008 \fBmpi_f08\fP is available to MPI programs (MPI\-3 and higher only).
.UNINDENT
.sp
If possible, the MPI version will be determined by this module. The facilities to detect the MPI version
were introduced with MPI\-1.2, and therefore cannot be found for older MPI versions.
.INDENT 0.0
.TP
.B \fBMPI_<lang>_VERSION_MAJOR\fP
Major version of MPI implemented for \fB<lang>\fP by the MPI distribution.
.TP
.B \fBMPI_<lang>_VERSION_MINOR\fP
Minor version of MPI implemented for \fB<lang>\fP by the MPI distribution.
.TP
.B \fBMPI_<lang>_VERSION\fP
MPI version implemented for \fB<lang>\fP by the MPI distribution.
.UNINDENT
.sp
Note that there\(aqs no variable for the C bindings being accessible through \fBmpi.h\fP, since the MPI standards
always have required this binding to work in both C and C++ code.
.sp
For running MPI programs, the module sets the following variables
.INDENT 0.0
.TP
.B \fBMPIEXEC_EXECUTABLE\fP
Executable for running MPI programs, if such exists.
.TP
.B \fBMPIEXEC_NUMPROC_FLAG\fP
Flag to pass to \fBmpiexec\fP before giving it the number of processors to run on.
.TP
.B \fBMPIEXEC_MAX_NUMPROCS\fP
Number of MPI processors to utilize. Defaults to the number
of processors detected on the host system.
.TP
.B \fBMPIEXEC_PREFLAGS\fP
Flags to pass to \fBmpiexec\fP directly before the executable to run.
.TP
.B \fBMPIEXEC_POSTFLAGS\fP
Flags to pass to \fBmpiexec\fP after other flags.
.UNINDENT
.SS Variables for locating MPI
.sp
This module performs a four step search for an MPI implementation:
.INDENT 0.0
.IP 1. 3
Search for \fBMPIEXEC_EXECUTABLE\fP and, if found, use its base directory.
.IP 2. 3
Check if the compiler has MPI support built\-in. This is the case if the user passed a
compiler wrapper as \fBCMAKE_<LANG>_COMPILER\fP or if they use Cray system compiler wrappers.
.IP 3. 3
Attempt to find an MPI compiler wrapper and determine the compiler information from it.
.IP 4. 3
Try to find an MPI implementation that does not ship such a wrapper by guessing settings.
Currently, only Microsoft MPI and MPICH2 on Windows are supported.
.UNINDENT
.sp
For controlling the \fBMPIEXEC_EXECUTABLE\fP step, the following variables may be set:
.INDENT 0.0
.TP
.B \fBMPIEXEC_EXECUTABLE\fP
Manually specify the location of \fBmpiexec\fP\&.
.TP
.B \fBMPI_HOME\fP
Specify the base directory of the MPI installation.
.TP
.B \fBENV{MPI_HOME}\fP
Environment variable to specify the base directory of the MPI installation.
.TP
.B \fBENV{I_MPI_ROOT}\fP
Environment variable to specify the base directory of the MPI installation.
.UNINDENT
.sp
For controlling the compiler wrapper step, the following variables may be set:
.INDENT 0.0
.TP
.B \fBMPI_<lang>_COMPILER\fP
Search for the specified compiler wrapper and use it.
.TP
.B \fBMPI_<lang>_COMPILER_FLAGS\fP
Flags to pass to the MPI compiler wrapper during interrogation. Some compiler wrappers
support linking debug or tracing libraries if a specific flag is passed and this variable
may be used to obtain them.
.TP
.B \fBMPI_COMPILER_FLAGS\fP
Used to initialize \fBMPI_<lang>_COMPILER_FLAGS\fP if no language specific flag has been given.
Empty by default.
.TP
.B \fBMPI_EXECUTABLE_SUFFIX\fP
A suffix which is appended to all names that are being looked for. For instance you may set this
to \fB\&.mpich\fP or \fB\&.openmpi\fP to prefer the one or the other on Debian and its derivatives.
.UNINDENT
.sp
In order to control the guessing step, the following variable may be set:
.INDENT 0.0
.TP
.B \fBMPI_GUESS_LIBRARY_NAME\fP
Valid values are \fBMSMPI\fP and \fBMPICH2\fP\&. If set, only the given library will be searched for.
By default, \fBMSMPI\fP will be preferred over \fBMPICH2\fP if both are available.
This also sets \fBMPI_SKIP_COMPILER_WRAPPER\fP to \fBtrue\fP, which may be overridden.
.UNINDENT
.sp
Each of the search steps may be skipped with the following control variables:
.INDENT 0.0
.TP
.B \fBMPI_ASSUME_NO_BUILTIN_MPI\fP
If true, the module assumes that the compiler itself does not provide an MPI implementation and
skips to step 2.
.TP
.B \fBMPI_SKIP_COMPILER_WRAPPER\fP
If true, no compiler wrapper will be searched for.
.TP
.B \fBMPI_SKIP_GUESSING\fP
If true, the guessing step will be skipped.
.UNINDENT
.sp
Additionally, the following control variable is available to change search behavior:
.INDENT 0.0
.TP
.B \fBMPI_CXX_SKIP_MPICXX\fP
Add some definitions that will disable the MPI\-2 C++ bindings.
Currently supported are MPICH, Open MPI, Platform MPI and derivatives thereof,
for example MVAPICH or Intel MPI.
.UNINDENT
.sp
If the find procedure fails for a variable \fBMPI_<lang>_WORKS\fP, then the settings detected by or passed to
the module did not work and even a simple MPI test program failed to compile.
.sp
If all of these parameters were not sufficient to find the right MPI implementation, a user may
disable the entire autodetection process by specifying both a list of libraries in \fBMPI_<lang>_LIBRARIES\fP
and a list of include directories in \fBMPI_<lang>_ADDITIONAL_INCLUDE_DIRS\fP\&.
Any other variable may be set in addition to these two. The module will then validate the MPI settings and store the
settings in the cache.
.SS Cache variables for MPI
.sp
The variable \fBMPI_<lang>_INCLUDE_DIRS\fP will be assembled from the following variables.
For C and CXX:
.INDENT 0.0
.TP
.B \fBMPI_<lang>_HEADER_DIR\fP
Location of the \fBmpi.h\fP header on disk.
.UNINDENT
.sp
For Fortran:
.INDENT 0.0
.TP
.B \fBMPI_Fortran_F77_HEADER_DIR\fP
Location of the Fortran 77 header \fBmpif.h\fP, if it exists.
.TP
.B \fBMPI_Fortran_MODULE_DIR\fP
Location of the \fBmpi\fP or \fBmpi_f08\fP modules, if available.
.UNINDENT
.sp
For all languages the following variables are additionally considered:
.INDENT 0.0
.TP
.B \fBMPI_<lang>_ADDITIONAL_INCLUDE_DIRS\fP
A \fI\%;\-list\fP of paths needed in addition to the normal include directories.
.TP
.B \fBMPI_<include_name>_INCLUDE_DIR\fP
Path variables for include folders referred to by \fB<include_name>\fP\&.
.TP
.B \fBMPI_<lang>_ADDITIONAL_INCLUDE_VARS\fP
A \fI\%;\-list\fP of \fB<include_name>\fP that will be added to the include locations of \fB<lang>\fP\&.
.UNINDENT
.sp
The variable \fBMPI_<lang>_LIBRARIES\fP will be assembled from the following variables:
.INDENT 0.0
.TP
.B \fBMPI_<lib_name>_LIBRARY\fP
The location of a library called \fB<lib_name>\fP for use with MPI.
.TP
.B \fBMPI_<lang>_LIB_NAMES\fP
A \fI\%;\-list\fP of \fB<lib_name>\fP that will be added to the include locations of \fB<lang>\fP\&.
.UNINDENT
.SS Usage of mpiexec
.sp
When using \fBMPIEXEC_EXECUTABLE\fP to execute MPI applications, you should typically
use all of the \fBMPIEXEC_EXECUTABLE\fP flags as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS}
  ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS
.EE
.UNINDENT
.UNINDENT
.sp
where \fBEXECUTABLE\fP is the MPI program, and \fBARGS\fP are the arguments to
pass to the MPI program.
.SS Advanced variables for using MPI
.sp
The module can perform some advanced feature detections upon explicit request.
.sp
\fBImportant notice:\fP The following checks cannot be performed without \fIexecuting\fP an MPI test program.
Consider the special considerations for the behavior of \fI\%try_run()\fP during cross compilation.
Moreover, running an MPI program can cause additional issues, like a firewall notification on some systems.
You should only enable these detections if you absolutely need the information.
.sp
If the following variables are set to true, the respective search will be performed:
.INDENT 0.0
.TP
.B \fBMPI_DETERMINE_Fortran_CAPABILITIES\fP
Determine for all available Fortran bindings what the values of \fBMPI_SUBARRAYS_SUPPORTED\fP and
\fBMPI_ASYNC_PROTECTS_NONBLOCKING\fP are and make their values available as \fBMPI_Fortran_<binding>_SUBARRAYS\fP
and \fBMPI_Fortran_<binding>_ASYNCPROT\fP, where \fB<binding>\fP is one of \fBF77_HEADER\fP, \fBF90_MODULE\fP and
\fBF08_MODULE\fP\&.
.TP
.B \fBMPI_DETERMINE_LIBRARY_VERSION\fP
For each language, find the output of \fBMPI_Get_library_version\fP and make it available as \fBMPI_<lang>_LIBRARY_VERSION_STRING\fP\&.
This information is usually tied to the runtime component of an MPI implementation and might differ depending on \fB<lang>\fP\&.
Note that the return value is entirely implementation defined. This information might be used to identify
the MPI vendor and for example pick the correct one of multiple third party binaries that matches the MPI vendor.
.UNINDENT
.SS Backward Compatibility
.sp
Deprecated since version 3.10.

.sp
For backward compatibility with older versions of FindMPI, these
variables are set:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
MPI_COMPILER        MPI_LIBRARY        MPI_EXTRA_LIBRARY
MPI_COMPILE_FLAGS   MPI_INCLUDE_PATH   MPI_LINK_FLAGS
MPI_LIBRARIES
.EE
.UNINDENT
.UNINDENT
.sp
In new projects, please use the \fBMPI_<lang>_XXX\fP equivalents.
Additionally, the following variables are deprecated:
.INDENT 0.0
.TP
.B \fBMPI_<lang>_COMPILE_FLAGS\fP
Use \fBMPI_<lang>_COMPILE_OPTIONS\fP and \fBMPI_<lang>_COMPILE_DEFINITIONS\fP instead.
.TP
.B \fBMPI_<lang>_INCLUDE_PATH\fP
For consumption use \fBMPI_<lang>_INCLUDE_DIRS\fP and for specifying folders use \fBMPI_<lang>_ADDITIONAL_INCLUDE_DIRS\fP instead.
.TP
.B \fBMPIEXEC\fP
Use \fBMPIEXEC_EXECUTABLE\fP instead.
.UNINDENT
.SS FindMsys
.sp
Added in version 3.21.

.sp
Finds MSYS, a POSIX\-compatible environment that runs natively on Microsoft
Windows.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is primarily intended for use in other \fI\%Find Modules\fP to help
locate programs when using the \fBfind_*()\fP commands, such as
\fI\%find_program()\fP\&.  In most cases, direct use of those commands is
sufficient.  Use this module only if a specific program is known to be
installed via MSYS and is usable from Windows.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBMSYS_INSTALL_PATH\fP
The path to the MSYS root installation directory.
.UNINDENT
.SS Examples
.sp
Finding the MSYS installation and using its path in a custom find module:
.sp
FindFoo.cmake
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Msys)
find_program(Foo_EXECUTABLE NAMES foo PATHS ${MSYS_INSTALL_PATH}/usr/bin)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Foo REQUIRED_VARS Foo_EXECUTABLE)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindCygwin\fP module to find Cygwin path in a similar way.
.UNINDENT
.SS FindODBC
.sp
Added in version 3.12.

.sp
Finds the Open Database Connectivity (ODBC) library, which implements a standard
API for accessing database systems.  ODBC enables applications to communicate
with different database management systems (DBMS) using a common set of
functions.  Communication with a specific database is handled through ODBC
drivers, which the library loads at runtime.
.sp
On Windows, when building with Visual Studio, this module assumes the ODBC
library is provided by the available Windows SDK.
.sp
On Unix\-like systems, this module searches for ODBC library provided by unixODBC
or iODBC implementations of ODBC API.  By default, this module looks for the
ODBC config program to determine the ODBC library and include directory, first
from unixODBC, then from iODBC.  If no config program is found, it searches for
ODBC header and library in standard locations.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBODBC::ODBC\fP
Target encapsulating the ODBC usage requirements, available if ODBC is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBODBC_FOUND\fP
Boolean indicating whether ODBC is found.
.TP
.B \fBODBC_INCLUDE_DIRS\fP
Include directories containing headers needed to use ODBC.
.TP
.B \fBODBC_LIBRARIES\fP
Libraries needed to link against to use ODBC.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBODBC_INCLUDE_DIR\fP
The path to the directory containing \fBsql.h\fP and other ODBC headers.  May be
empty on Windows, where the include directory corresponding to the expected
Windows SDK is already available in the compilation environment.
.TP
.B \fBODBC_LIBRARY\fP
The path to the ODBC library or a library name.  On Windows, this may be only
a library name, because the library directory corresponding to the expected
Windows SDK is already available in the compilation environment.
.TP
.B \fBODBC_CONFIG\fP
The path to the ODBC config program if found or specified.  For example,
\fBodbc_config\fP for unixODBC, or \fBiodbc\-config\fP for iODBC.
.UNINDENT
.SS Limitations
.INDENT 0.0
.IP \(bu 2
On Windows, this module does not search for iODBC.
.IP \(bu 2
On Unix\-like systems, there is no built\-in mechanism to prefer unixODBC over
iODBC, or vice versa.  To bypass this limitation, explicitly set the
\fBODBC_CONFIG\fP variable to the path of the desired ODBC config program.
.IP \(bu 2
This module does not support searching for or selecting a specific ODBC
driver.
.UNINDENT
.SS Examples
.SS Finding and using ODBC
.sp
Finding ODBC and linking it to a project target:
.sp
CMakeLists.txt
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ODBC)
target_link_libraries(project_target PRIVATE ODBC::ODBC)
.EE
.UNINDENT
.UNINDENT
.SS Finding a custom ODBC installation on Unix\-like systems
.sp
The following examples are for Unix\-like systems and demonstrate how to set hint
and cache variables during the CMake configuration phase to help this module
find a custom ODBC implementation (e.g. one not supported by default).
.sp
To specify the installation prefix using \fI\%CMAKE_PREFIX_PATH\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-D CMAKE_PREFIX_PATH=/path/to/odbc\-installation \-B build
.EE
.UNINDENT
.UNINDENT
.sp
Or using the dedicated \fI\%ODBC_ROOT\fP variable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-D ODBC_ROOT=/path/to/odbc\-installation \-B build
.EE
.UNINDENT
.UNINDENT
.sp
To manually specify the ODBC config program, if available, so that the ODBC
installation can be automatically determined based on the config tool:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \-D ODBC_CONFIG=/path/to/odbc/bin/odbc\-config \-B build
.EE
.UNINDENT
.UNINDENT
.sp
To manually specify the ODBC library and include directory:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ cmake \e
    \-D ODBC_LIBRARY=/path/to/odbc/lib/libodbc.so \e
    \-D ODBC_INCLUDE_DIR=/path/to/odbc/include \e
    \-B build
.EE
.UNINDENT
.UNINDENT
.SS FindOpenACC
.sp
Added in version 3.10.

.sp
Detect OpenACC support by the compiler.
.sp
This module can be used to detect OpenACC support in a compiler.
If the compiler supports OpenACC, the flags required to compile with
OpenACC support are returned in variables for the different languages.
Currently, only NVHPC, PGI, GNU and Cray compilers are supported.
.SS Imported Targets
.sp
Added in version 3.16.

.sp
The module provides \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBOpenACC::OpenACC_<lang>\fP
Target for using OpenACC from \fB<lang>\fP\&.
.UNINDENT
.SS Variables
.sp
The module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenACC_FOUND\fP
Added in version 3.25.

.sp
Variable indicating that OpenACC flags for at least one languages have been found.
.UNINDENT
.sp
This module will set the following variables per language in your
project, where \fB<lang>\fP is one of C, CXX, or Fortran:
.INDENT 0.0
.TP
.B \fBOpenACC_<lang>_FOUND\fP
Variable indicating if OpenACC support for \fB<lang>\fP was detected.
.TP
.B \fBOpenACC_<lang>_FLAGS\fP
OpenACC compiler flags for \fB<lang>\fP, separated by spaces.
.TP
.B \fBOpenACC_<lang>_OPTIONS\fP
Added in version 3.16.

.sp
OpenACC compiler flags for \fB<lang>\fP, as a list. Suitable for usage
with target_compile_options or target_link_options.
.UNINDENT
.sp
The module will also try to provide the OpenACC version variables:
.INDENT 0.0
.TP
.B \fBOpenACC_<lang>_SPEC_DATE\fP
Date of the OpenACC specification implemented by the \fB<lang>\fP compiler.
.TP
.B \fBOpenACC_<lang>_VERSION_MAJOR\fP
Major version of OpenACC implemented by the \fB<lang>\fP compiler.
.TP
.B \fBOpenACC_<lang>_VERSION_MINOR\fP
Minor version of OpenACC implemented by the \fB<lang>\fP compiler.
.TP
.B \fBOpenACC_<lang>_VERSION\fP
OpenACC version implemented by the \fB<lang>\fP compiler.
.UNINDENT
.sp
The specification date is formatted as given in the OpenACC standard:
\fByyyymm\fP where \fByyyy\fP and \fBmm\fP represents the year and month of
the OpenACC specification implemented by the \fB<lang>\fP compiler.
.SS Input Variables
.sp
\fBOpenACC_ACCEL_TARGET=<target>\fP
If set, will the correct target accelerator flag set to the <target> will
be returned with OpenACC_<lang>_FLAGS.
.SS FindOpenAL
.sp
Finds the Open Audio Library (OpenAL).
.sp
OpenAL is a cross\-platform 3D audio API designed for efficient rendering of
multichannel three\-dimensional positional audio.  It is commonly used in games
and multimedia applications to provide immersive and spatialized sound.
.sp
Projects using this module should include the OpenAL header file using
\fB#include <al.h>\fP, and \fBnot\fP \fB#include <AL/al.h>\fP\&.  The reason for this is
that the latter is not portable.  For example, Windows/Creative Labs does not by
default put OpenAL headers in \fBAL/\fP and macOS uses the convention of
\fB<OpenAL/al.h>\fP\&.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBOpenAL::OpenAL\fP
Added in version 3.25.

.sp
Target encapsulating the OpenAL library usage requirements, available only if
the OpenAL library is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenAL_FOUND\fP
Boolean indicating whether the OpenAL is found.  For backward compatibility,
the \fBOPENAL_FOUND\fP variable is also set to the same value.
.TP
.B \fBOPENAL_VERSION_STRING\fP
Human\-readable string containing the version of OpenAL found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOPENAL_INCLUDE_DIR\fP
The include directory containing headers needed to use the OpenAL library.
.TP
.B \fBOPENAL_LIBRARY\fP
The path to the OpenAL library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOPENALDIR\fP
Environment variable which can be used to set the installation prefix of
OpenAL to be found in non\-standard locations.
.sp
OpenAL is searched in the following order:
.INDENT 7.0
.IP 1. 3
By default on macOS, system framework is searched first:
\fB/System/Library/Frameworks\fP, whose priority can be changed by setting
the \fI\%CMAKE_FIND_FRAMEWORK\fP variable.
.IP 2. 3
Environment variable \fBENV{OPENALDIR}\fP\&.
.IP 3. 3
System paths.
.IP 4. 3
User\-compiled framework: \fB~/Library/Frameworks\fP\&.
.IP 5. 3
Manually compiled framework: \fB/Library/Frameworks\fP\&.
.IP 6. 3
Add\-on package: \fB/opt\fP\&.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding the OpenAL library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenAL)
target_link_libraries(project_target PRIVATE OpenAL::OpenAL)
.EE
.UNINDENT
.UNINDENT
.SS FindOpenCL
.sp
Added in version 3.1.

.sp
Finds Open Computing Language (OpenCL).
.sp
Added in version 3.10: Detection of OpenCL 2.1 and 2.2.

.SS Imported Targets
.sp
Added in version 3.7.

.sp
This module provides the following \fI\%Imported Targets\fP, if OpenCL has been
found:
.INDENT 0.0
.TP
.B \fBOpenCL::OpenCL\fP
Target providing OpenCL usage requirements.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenCL_FOUND\fP
True if OpenCL was found.
.TP
.B \fBOpenCL_INCLUDE_DIRS\fP
Include directories needed to use OpenCL.
.TP
.B \fBOpenCL_LIBRARIES\fP
Libraries needed to link to OpenCL.
.TP
.B \fBOpenCL_VERSION_STRING\fP
Highest supported OpenCL version (e.g., \fB1.2\fP).
.TP
.B \fBOpenCL_VERSION_MAJOR\fP
The major version of the OpenCL implementation.
.TP
.B \fBOpenCL_VERSION_MINOR\fP
The minor version of the OpenCL implementation.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOpenCL_INCLUDE_DIR\fP
The OpenCL include directory.
.TP
.B \fBOpenCL_LIBRARY\fP
The path to the OpenCL library.
.UNINDENT
.SS Examples
.sp
Finding OpenCL and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenCL)
target_link_libraries(project_target PRIVATE OpenCL::OpenCL)
.EE
.UNINDENT
.UNINDENT
.SS FindOpenGL
.sp
FindModule for OpenGL and OpenGL Utility Library (GLU).
.sp
Changed in version 3.2: X11 is no longer added as a dependency on Unix/Linux systems.

.sp
Added in version 3.10: GLVND support on Linux.  See the \fI\%Linux\-specific\fP section below.

.SS Optional COMPONENTS
.sp
Added in version 3.10.

.sp
This module respects several optional COMPONENTS:
.INDENT 0.0
.TP
.B \fBEGL\fP
The EGL interface between OpenGL, OpenGL ES and the underlying windowing system.
.TP
.B \fBGLX\fP
An extension to X that interfaces OpenGL, OpenGL ES with X window system.
.TP
.B \fBOpenGL\fP
The cross platform API for 3D graphics.
.TP
.B \fBGLES2\fP
Added in version 3.27.

.sp
A subset of OpenGL API for embedded systems with limited capabilities.
.TP
.B \fBGLES3\fP
Added in version 3.27.

.sp
A subset of OpenGL API for embedded systems with more capabilities.
.UNINDENT
.SS Imported Targets
.sp
Added in version 3.8.

.sp
This module defines the \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBOpenGL::GL\fP
Defined to the platform\-specific OpenGL libraries if the system has OpenGL.
.TP
.B \fBOpenGL::GLU\fP
Defined if the system has OpenGL Utility Library (GLU).
.UNINDENT
.sp
Added in version 3.10: Additionally, the following GLVND\-specific library targets are defined:

.INDENT 0.0
.TP
.B \fBOpenGL::OpenGL\fP
Defined to libOpenGL if the system is GLVND\-based.
.TP
.B \fBOpenGL::GLX\fP
Defined if the system has OpenGL Extension to the X Window System (GLX).
.TP
.B \fBOpenGL::EGL\fP
Defined if the system has EGL.
.TP
.B \fBOpenGL::GLES2\fP
Added in version 3.27.

.sp
Defined if the system has GLES2.
.TP
.B \fBOpenGL::GLES3\fP
Added in version 3.27.

.sp
Defined if the system has GLES3.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBOPENGL_FOUND\fP
True, if the system has OpenGL and all components are found.
.TP
.B \fBOPENGL_XMESA_FOUND\fP
True, if the system has XMESA.
.TP
.B \fBOPENGL_GLU_FOUND\fP
True, if the system has GLU.
.TP
.B \fBOpenGL_OpenGL_FOUND\fP
True, if the system has an OpenGL library.
.TP
.B \fBOpenGL_GLX_FOUND\fP
True, if the system has GLX.
.TP
.B \fBOpenGL_EGL_FOUND\fP
True, if the system has EGL.
.TP
.B \fBOpenGL::GLES2\fP
Defined if the system has GLES2.
.TP
.B \fBOpenGL::GLES3\fP
Defined if the system has GLES3.
.TP
.B \fBOPENGL_INCLUDE_DIR\fP
Path to the OpenGL include directory.
The \fBOPENGL_INCLUDE_DIRS\fP variable is preferred.
.TP
.B \fBOPENGL_EGL_INCLUDE_DIRS\fP
Path to the EGL include directory.
.TP
.B \fBOPENGL_LIBRARIES\fP
Paths to the OpenGL library, windowing system libraries, and GLU libraries.
On Linux, this assumes GLX and is never correct for EGL\-based targets.
Clients are encouraged to use the \fBOpenGL::*\fP import targets instead.
.TP
.B \fBOPENGL_INCLUDE_DIRS\fP
Added in version 3.29.

.sp
Paths to the OpenGL include directories.
.UNINDENT
.sp
Added in version 3.10: Variables for GLVND\-specific libraries \fBOpenGL\fP, \fBEGL\fP and \fBGLX\fP\&.

.SS Cache variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOPENGL_egl_LIBRARY\fP
Path to the EGL library.
.TP
.B \fBOPENGL_glu_LIBRARY\fP
Path to the GLU library.
.TP
.B \fBOPENGL_glx_LIBRARY\fP
Path to the GLVND \(aqGLX\(aq library.
.TP
.B \fBOPENGL_opengl_LIBRARY\fP
Path to the GLVND \(aqOpenGL\(aq library
.TP
.B \fBOPENGL_gl_LIBRARY\fP
Path to the OpenGL library.  New code should prefer the \fBOpenGL::*\fP import
targets.
.TP
.B \fBOPENGL_gles2_LIBRARY\fP
Added in version 3.27.

.sp
Path to the OpenGL GLES2 library.
.TP
.B \fBOPENGL_gles3_LIBRARY\fP
Added in version 3.27.

.sp
Path to the OpenGL GLES3 library.
.TP
.B \fBOPENGL_GLU_INCLUDE_DIR\fP
Added in version 3.29.

.sp
Path to the OpenGL GLU include directory.
.UNINDENT
.sp
Added in version 3.10: Variables for GLVND\-specific libraries \fBOpenGL\fP, \fBEGL\fP and \fBGLX\fP\&.

.SS Linux\-specific
.sp
Some Linux systems utilize GLVND as a new ABI for OpenGL.  GLVND separates
context libraries from OpenGL itself; OpenGL lives in \(dqlibOpenGL\(dq, and
contexts are defined in \(dqlibGLX\(dq or \(dqlibEGL\(dq.  GLVND is currently the only way
to get OpenGL 3+ functionality via EGL in a manner portable across vendors.
Projects may use GLVND explicitly with target \fBOpenGL::OpenGL\fP and either
\fBOpenGL::GLX\fP or \fBOpenGL::EGL\fP\&.
.sp
Projects may use the \fBOpenGL::GL\fP target (or \fBOPENGL_LIBRARIES\fP variable)
to use legacy GL interfaces.  These will use the legacy GL library located
by \fBOPENGL_gl_LIBRARY\fP, if available.  If \fBOPENGL_gl_LIBRARY\fP is empty or
not found and GLVND is available, the \fBOpenGL::GL\fP target will use GLVND
\fBOpenGL::OpenGL\fP and \fBOpenGL::GLX\fP (and the \fBOPENGL_LIBRARIES\fP
variable will use the corresponding libraries).  Thus, for non\-EGL\-based
Linux targets, the \fBOpenGL::GL\fP target is most portable.
.sp
A \fBOpenGL_GL_PREFERENCE\fP variable may be set to specify the preferred way
to provide legacy GL interfaces in case multiple choices are available.
The value may be one of:
.INDENT 0.0
.TP
.B \fBGLVND\fP
If the GLVND OpenGL and GLX libraries are available, prefer them.
This forces \fBOPENGL_gl_LIBRARY\fP to be empty.
.sp
Changed in version 3.11: This is the default, unless policy \fI\%CMP0072\fP is set to \fBOLD\fP
and no components are requested (since components
correspond to GLVND libraries).

.TP
.B \fBLEGACY\fP
Prefer to use the legacy libGL library, if available.
.UNINDENT
.sp
For EGL targets the client must rely on GLVND support on the user\(aqs system.
Linking should use the \fBOpenGL::OpenGL OpenGL::EGL\fP targets.  Using GLES*
libraries is theoretically possible in place of \fBOpenGL::OpenGL\fP, but this
module does not currently support that; contributions welcome.
.sp
\fBOPENGL_egl_LIBRARY\fP and \fBOPENGL_EGL_INCLUDE_DIRS\fP are defined in the case of
GLVND.  For non\-GLVND Linux and other systems these are left undefined.
.SS macOS\-Specific
.sp
On macOS this module defaults to using the macOS\-native framework
version of OpenGL.  To use the X11 version of OpenGL on macOS, one
can disable searching of frameworks.  For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(X11)
if(APPLE AND X11_FOUND)
  set(CMAKE_FIND_FRAMEWORK NEVER)
  find_package(OpenGL)
  unset(CMAKE_FIND_FRAMEWORK)
else()
  find_package(OpenGL)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
An end user building this project may need to point CMake at their
X11 installation, e.g., with \fB\-DOpenGL_ROOT=/opt/X11\fP\&.
.SS FindOpenMP
.sp
Finds Open Multi\-Processing (OpenMP) support.
.sp
This module can be used to detect OpenMP support in a compiler.  If
the compiler supports OpenMP, the flags required to compile with
OpenMP support are returned in variables for the different languages.
The variables may be empty if the compiler does not need a special
flag to support OpenMP.
.sp
Added in version 3.5: Clang support.

.SS Input Variables
.sp
The following variables may be set to influence this module\(aqs behavior:
.INDENT 0.0
.TP
.B \fBOpenMP_RUNTIME_MSVC\fP
Added in version 3.30.

.sp
Specify the \X'tty: link https://learn.microsoft.com/en-us/cpp/build/reference/openmp-enable-openmp-2-0-support'\fI\%OpenMP Runtime\fP\X'tty: link' when compiling with MSVC.
If set to a non\-empty value, such as \fBexperimental\fP or \fBllvm\fP, it
will be passed as the value of the \fB\-openmp:\fP flag.
.UNINDENT
.SS Result Variables
.sp
Added in version 3.10: The module exposes the components \fBC\fP, \fBCXX\fP, and \fBFortran\fP\&.
Each of these controls the various languages to search OpenMP support for.

.sp
Added in version 3.31: The \fBCUDA\fP language component is supported when using a CUDA compiler
that supports OpenMP on the host.

.sp
Depending on the enabled components the following variables will be set:
.INDENT 0.0
.TP
.B \fBOpenMP_FOUND\fP
Variable indicating that OpenMP flags for all requested languages have been found.
If no components are specified, this is true if OpenMP settings for all enabled languages
were detected.
.TP
.B \fBOpenMP_VERSION\fP
Minimal version of the OpenMP standard detected among the requested languages,
or all enabled languages if no components were specified.
.UNINDENT
.sp
This module will set the following variables per language in your
project, where \fB<lang>\fP is one of C, CXX, CUDA, or Fortran:
.INDENT 0.0
.TP
.B \fBOpenMP_<lang>_FOUND\fP
Variable indicating if OpenMP support for \fB<lang>\fP was detected.
.TP
.B \fBOpenMP_<lang>_FLAGS\fP
OpenMP compiler flags for \fB<lang>\fP, separated by spaces.
.TP
.B \fBOpenMP_<lang>_INCLUDE_DIRS\fP
Directories that must be added to the header search path for \fB<lang>\fP
when using OpenMP.
.UNINDENT
.sp
For linking with OpenMP code written in \fB<lang>\fP, the following
variables are provided:
.INDENT 0.0
.TP
.B \fBOpenMP_<lang>_LIB_NAMES\fP
\fI\%;\-list\fP of libraries for OpenMP programs for \fB<lang>\fP\&.
.TP
.B \fBOpenMP_<libname>_LIBRARY\fP
Location of the individual libraries needed for OpenMP support in \fB<lang>\fP\&.
.TP
.B \fBOpenMP_<lang>_LIBRARIES\fP
A list of libraries needed to link with OpenMP code written in \fB<lang>\fP\&.
.UNINDENT
.sp
Additionally, the module provides \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBOpenMP::OpenMP_<lang>\fP
Target for using OpenMP from \fB<lang>\fP\&.
.UNINDENT
.sp
Specifically for Fortran, the module sets the following variables:
.INDENT 0.0
.TP
.B \fBOpenMP_Fortran_HAVE_OMPLIB_HEADER\fP
Boolean indicating if OpenMP is accessible through \fBomp_lib.h\fP\&.
.TP
.B \fBOpenMP_Fortran_HAVE_OMPLIB_MODULE\fP
Boolean indicating if OpenMP is accessible through the \fBomp_lib\fP Fortran module.
.UNINDENT
.sp
The module will also try to provide the OpenMP version variables:
.INDENT 0.0
.TP
.B \fBOpenMP_<lang>_SPEC_DATE\fP
Added in version 3.7.

.sp
Date of the OpenMP specification implemented by the \fB<lang>\fP compiler.
.TP
.B \fBOpenMP_<lang>_VERSION_MAJOR\fP
Major version of OpenMP implemented by the \fB<lang>\fP compiler.
.TP
.B \fBOpenMP_<lang>_VERSION_MINOR\fP
Minor version of OpenMP implemented by the \fB<lang>\fP compiler.
.TP
.B \fBOpenMP_<lang>_VERSION\fP
OpenMP version implemented by the \fB<lang>\fP compiler.
.UNINDENT
.sp
The specification date is formatted as given in the OpenMP standard:
\fByyyymm\fP where \fByyyy\fP and \fBmm\fP represents the year and month of
the OpenMP specification implemented by the \fB<lang>\fP compiler.
.sp
For some compilers, it may be necessary to add a header search path to find
the relevant OpenMP headers.  This location may be language\-specific.  Where
this is needed, the module may attempt to find the location, but it can be
provided directly by setting the \fBOpenMP_<lang>_INCLUDE_DIR\fP cache variable.
Note that this variable is an _input_ control to the module.  Project code
should use the \fBOpenMP_<lang>_INCLUDE_DIRS\fP _output_ variable if it needs
to know what include directories are needed.
.SS FindOpenSceneGraph
.sp
Finds \X'tty: link https://openscenegraph.github.io/openscenegraph.io/'\fI\%OpenSceneGraph\fP\X'tty: link' (OSG), a 3D graphics application programming interface.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
OpenSceneGraph development has largely transitioned to its successor project,
VulkanSceneGraph, which should be preferred for new code.  Refer to the
upstream documentation for guidance on using VulkanSceneGraph with CMake.
.UNINDENT
.UNINDENT
.sp
This module searches for the OpenSceneGraph core osg library, its dependency
OpenThreads, and additional OpenSceneGraph libraries, some of which are also
known as \fINodeKits\fP, if specified.
.sp
When working with OpenSceneGraph, its core library headers are intended to be
included in C++ project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
.EE
.UNINDENT
.UNINDENT
.sp
Headers for the OpenSceneGraph libraries and NodeKits follow a similar inclusion
structure, for example:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osgAnimation/Animation>
#include <osgDB/DatabasePager>
#include <osgFX/BumpMapping>
// ...
.EE
.UNINDENT
.UNINDENT
.SS Components
.sp
OpenSceneGraph toolkit consists of the core library osg, and additional
libraries, which can be optionally specified as components with the
\fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Supported components include:
.INDENT 0.0
.TP
.B \fBosg\fP
Finds the core osg library (\fBlibosg\fP), required to use OpenSceneGraph.
This component is always automatically implied.
.TP
.B \fBOpenThreads\fP
Finds the dependent OpenThreads library (\fBlibOpenThreads\fP) via the
\fI\%FindOpenThreads\fP module.  This component is always automatically
implied as it is required to use OpenSceneGraph.
.TP
.B \fBosgAnimation\fP
Finds the osgAnimation library, which provides general purpose utility classes
for animation.
.TP
.B \fBosgDB\fP
Finds the osgDB library for reading and writing scene graphs support.
.TP
.B \fBosgFX\fP
Finds the osgFX NodeKit, which provides a framework for implementing special
effects.
.TP
.B \fBosgGA\fP
Finds the osgGA (GUI Abstraction) library, which provides facilities to work
with varying window systems.
.TP
.B \fBosgIntrospection\fP
Finds the osgIntrospection library, which provides a reflection framework for
accessing and invoking class properties and methods at runtime without
modifying the classes.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The osgIntrospection library has been removed from the OpenSceneGraph
toolkit as of OpenSceneGraph version 3.0.
.UNINDENT
.UNINDENT
.TP
.B \fBosgManipulator\fP
Finds the osgManipulator NodeKit, which provides support for 3D interactive
manipulators.
.TP
.B \fBosgParticle\fP
Finds the osgParticle NodeKit, which provides support for particle effects.
.TP
.B \fBosgPresentation\fP
Finds the osgPresentation NodeKit, which provides support for 3D scene graph
based presentations.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This NodeKit has been added in OpenSceneGraph 3.0.0.
.UNINDENT
.UNINDENT
.TP
.B \fBosgProducer\fP
Finds the osgProducer utility library, which provides functionality for window
management and event handling.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The osgProducer has been removed from early versions of OpenSceneGraph
toolkit 1.x, and has been superseded by the osgViewer library.
.UNINDENT
.UNINDENT
.TP
.B \fBosgQt\fP
Finds the osgQt utility library, which provides various classes to aid the
integration of Qt.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
As of OpenSceneGraph version 3.6, this library has been moved to its own
repository.
.UNINDENT
.UNINDENT
.TP
.B \fBosgShadow\fP
Finds the osgShadow NodeKit, which provides support for a range of shadow
techniques.
.TP
.B \fBosgSim\fP
Finds the osgSim NodeKit, which adds support for simulation features like
navigation lights and OpenFlight\-style movement controls.
.TP
.B \fBosgTerrain\fP
Finds the osgTerrain NodeKit, which provides geospecifc terrain rendering
support.
.TP
.B \fBosgText\fP
Finds the osgText NodeKit, which provides high quality text support.
.TP
.B \fBosgUtil\fP
Finds the osgUtil library, which provides general\-purpose utilities like
update, cull, and draw traversals, as well as scene graph tools such as
optimization, triangle stripping, and tessellation.
.TP
.B \fBosgViewer\fP
Finds the osgViewer library, which provides high level viewer functionality.
.TP
.B \fBosgVolume\fP
Finds the osgVolume NodeKit, which provides volume rendering support.
.TP
.B \fBosgWidget\fP
Finds the osgWidget NodeKit, which provides support for 2D and 3D GUI widget
sets.
.UNINDENT
.sp
If no components are specified, this module searches for the \fBosg\fP and
\fBOpenThreads\fP components by default.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenSceneGraph_FOUND\fP
Boolean indicating whether the (requested version of) OpenSceneGraph with all
specified components is found.  For backward compatibility, the
\fBOPENSCENEGRAPH_FOUND\fP variable is also set to the same value.
.TP
.B \fBOPENSCENEGRAPH_VERSION\fP
The version of the OSG which was found.
.TP
.B \fBOPENSCENEGRAPH_INCLUDE_DIRS\fP
Include directories containing headers needed to use OpenSceneGraph.
.TP
.B \fBOPENSCENEGRAPH_LIBRARIES\fP
Libraries needed to link against to use OpenSceneGraph.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOpenSceneGraph_DEBUG\fP
Set this variable to boolean true to enable debugging output by this module.
.TP
.B \fBOpenSceneGraph_MARK_AS_ADVANCED\fP
Set this variable to boolean true to mark cache variables of this module as
advanced automatically.
.UNINDENT
.sp
To help this module find OpenSceneGraph and its various components installed in
custom location, \fI\%CMAKE_PREFIX_PATH\fP variable can be used.
Additionally, the following variables are also respected:
.INDENT 0.0
.TP
.B \fB<COMPONENT>_DIR\fP
Environment or CMake variable that can be set to the root of the OSG common
installation, where \fB<COMPONENT>\fP is the uppercase form of component listed
above.  For example, \fBOSGVOLUME_DIR\fP to find the \fBosgVolume\fP component.
.TP
.B \fBOSG_DIR\fP
Environment or CMake variable that can be set to influence detection of
OpenSceneGraph installation root location as a whole.
.TP
.B \fBOSGDIR\fP
Environment variable treated the same as \fBOSG_DIR\fP\&.
.TP
.B \fBOSG_ROOT\fP
Environment variable treated the same as \fBOSG_DIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding the OpenSceneGraph with \fBosgDB\fP and \fBosgUtil\fP libraries specified as
components and creating an interface \fI\%imported target\fP
that encapsulates its usage requirements for linking to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph 2.0.0 REQUIRED COMPONENTS osgDB osgUtil)

if(OpenSceneGraph_FOUND AND NOT TARGET OpenSceneGraph::OpenSceneGraph)
  add_library(OpenSceneGraph::OpenSceneGraph INTERFACE IMPORTED)
  set_target_properties(
    OpenSceneGraph::OpenSceneGraph
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OPENSCENEGRAPH_INCLUDE_DIRS}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OPENSCENEGRAPH_LIBRARIES}\(dq
  )
endif()

add_executable(example example.cxx)

target_link_libraries(example PRIVATE OpenSceneGraph::OpenSceneGraph)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.sp
The following OpenSceneGraph\-related helper find modules are used internally by
this module when finding specific OpenSceneGraph components.  These modules are
not intended to be included or invoked directly by project code during typical
use of \fBfind_package(OpenSceneGraph)\fP\&.  However, they can be useful for
advanced scenarios where finer control over component detection is needed.  For
example, to find them explicitly and override or bypass detection of specific
OpenSceneGraph components:
.INDENT 0.0
.IP \(bu 2
The \fI\%Findosg\fP module to find the core osg library.
.IP \(bu 2
The \fI\%FindosgAnimation\fP module to find osgAnimation.
.IP \(bu 2
The \fI\%FindosgDB\fP module to find osgDB.
.IP \(bu 2
The \fI\%FindosgFX\fP module to find osgDB.
.IP \(bu 2
The \fI\%FindosgGA\fP module to find osgGA.
.IP \(bu 2
The \fI\%FindosgIntrospection\fP module to find osgIntrospection.
.IP \(bu 2
The \fI\%FindosgManipulator\fP module to find osgManipulator.
.IP \(bu 2
The \fI\%FindosgParticle\fP module to find osgParticle.
.IP \(bu 2
The \fI\%FindosgPresentation\fP module to find osgPresentation.
.IP \(bu 2
The \fI\%FindosgProducer\fP module to find osgProducer.
.IP \(bu 2
The \fI\%FindosgQt\fP module to find osgQt.
.IP \(bu 2
The \fI\%FindosgShadow\fP module to find osgShadow.
.IP \(bu 2
The \fI\%FindosgSim\fP module to find osgSim.
.IP \(bu 2
The \fI\%FindosgTerrain\fP module to find osgTerrain.
.IP \(bu 2
The \fI\%FindosgText\fP module to find osgText.
.IP \(bu 2
The \fI\%FindosgUtil\fP module to find osgUtil.
.IP \(bu 2
The \fI\%FindosgViewer\fP module to find osgViewer.
.IP \(bu 2
The \fI\%FindosgVolume\fP module to find osgVolume.
.IP \(bu 2
The \fI\%FindosgWidget\fP module to find osgWidget.
.UNINDENT
.SS FindOpenSP
.sp
Added in version 3.25.

.sp
Finds the OpenSP library.  OpenSP is an open\-source implementation of the SGML
(Standard Generalized Markup Language) parser.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBOpenSP::OpenSP\fP
Target encapsulating the OpenSP library usage requirements, available only if
the OpenSP is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenSP_FOUND\fP
Boolean indicating whether the (requested version of) OpenSP is available.
.TP
.B \fBOpenSP_VERSION\fP
The version of found OpenSP.
.TP
.B \fBOpenSP_VERSION_MAJOR\fP
The major version of OpenSP.
.TP
.B \fBOpenSP_VERSION_MINOR\fP
The minor version of OpenSP.
.TP
.B \fBOpenSP_VERSION_PATCH\fP
The patch version of OpenSP.
.TP
.B \fBOpenSP_INCLUDE_DIRS\fP
The include directories containing headers needed to use the OpenSP library.
.TP
.B \fBOpenSP_LIBRARIES\fP
Libraries required to link against to use OpenSP.  These can be passed to the
\fI\%target_link_libraries()\fP command when not using the \fBOpenSP::OpenSP\fP
imported target.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOpenSP_INCLUDE_DIR\fP
The OpenSP include directory.
.TP
.B \fBOpenSP_LIBRARY\fP
The absolute path of the \fBosp\fP library.
.TP
.B \fBOpenSP_MULTI_BYTE\fP
True if \fBSP_MULTI_BYTE\fP was found to be defined in OpenSP\(aqs \fBconfig.h\fP
header file, which indicates that the OpenSP library was compiled with support
for multi\-byte characters.  The consuming target needs to define the
\fBSP_MULTI_BYTE\fP preprocessor macro to match this value in order to avoid
issues with character decoding.
.UNINDENT
.SS Examples
.sp
Finding the OpenSP library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSP)
target_link_libraries(project_target PRIVATE OpenSP::OpenSP)
.EE
.UNINDENT
.UNINDENT
.SS FindOpenSSL
.sp
Finds the installed OpenSSL encryption library and determines its version.
.sp
Added in version 3.20: Support for specifying version range when calling the \fI\%find_package()\fP
command.  When a version is requested, it can be specified as a single value
as before, and now also a version range can be used.  For a detailed
description of version range usage and capabilities, refer to the
\fI\%find_package()\fP command.

.sp
Added in version 3.18: Support for OpenSSL 3.0.

.SS Components
.sp
This module supports the following optional components:
.INDENT 0.0
.TP
.B \fBCrypto\fP
Added in version 3.12.

.sp
Ensures that the OpenSSL \fBcrypto\fP library is found.
.TP
.B \fBSSL\fP
Added in version 3.12.

.sp
Ensures that the OpenSSL \fBssl\fP library is found.
.UNINDENT
.sp
Components can be optionally specified using a standard syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSSL [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
If no components are requested, module by default searches for the \fBCrypto\fP
as required and \fBSSL\fP as optional component.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBOpenSSL::Crypto\fP
Added in version 3.4.

.sp
Target encapsulating the OpenSSL \fBcrypto\fP library usage requirements,
available only if the \fBcrypto\fP library is found.
.TP
.B \fBOpenSSL::SSL\fP
Added in version 3.4.

.sp
Target encapsulating the OpenSSL \fBssl\fP library usage requirements, available
only if the \fBssl\fP library is found.  For convenience, this target also links
\fBOpenSSL::Crypto\fP, since the \fBssl\fP library depends on the \fBcrypto\fP
library.
.TP
.B \fBOpenSSL::applink\fP
Added in version 3.18.

.sp
Target encapsulating the OpenSSL application\-side interface
(\fBopenssl/applink.c\fP) usage requirements, available only if OpenSSL is found
and its version is at least 0.9.8.
.sp
This interface provides a glue between OpenSSL BIO layer and the Windows
compiler runtime environment and may need to be compiled into projects when
using MSVC.  By linking this target, the other OpenSSL imported targets can be
linked even if the project uses different MSVC runtime configuration.  Linking
this target on platforms other than MSVC has no effect.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The interface file is added using the \fI\%INTERFACE_SOURCES\fP target
property.  Due to how interface sources are propagated in CMake, it is
recommended to link the \fBOpenSSL::applink\fP target as
\fI\%PRIVATE\fP to ensure that it is linked only once
in the entire dependency graph of any library or executable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
target_link_libraries(project_target PRIVATE OpenSSL::applink)
.EE
.UNINDENT
.UNINDENT
.sp
Using other scopes for this target specifically can lead to unexpected
issues during the build or link process, as both the ISO C and ISO C++
standards place very few requirements on how linking should behave.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenSSL_FOUND\fP
Boolean indicating whether the OpenSSL library has been found.  For backward
compatibility, the \fBOPENSSL_FOUND\fP variable is also set to the same value.
.TP
.B \fBOPENSSL_INCLUDE_DIR\fP
The OpenSSL include directory.
.TP
.B \fBOPENSSL_CRYPTO_LIBRARY\fP
The OpenSSL \fBcrypto\fP library.
.TP
.B \fBOPENSSL_CRYPTO_LIBRARIES\fP
The OpenSSL \fBcrypto\fP library and its dependencies.
.TP
.B \fBOPENSSL_SSL_LIBRARY\fP
The OpenSSL \fBssl\fP library.
.TP
.B \fBOPENSSL_SSL_LIBRARIES\fP
The OpenSSL \fBssl\fP library and its dependencies.
.TP
.B \fBOPENSSL_LIBRARIES\fP
All OpenSSL libraries and their dependencies.
.TP
.B \fBOPENSSL_VERSION\fP
The OpenSSL version found.  This is set to
\fB<major>.<minor>.<revision><patch>\fP (e.g. \fB0.9.8s\fP).
.TP
.B \fBOPENSSL_APPLINK_SOURCE\fP
The sources in the target \fBOpenSSL::applink\fP mentioned above.  This variable
is only defined if found OpenSSL version is at least 0.9.8 and the platform is
MSVC.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables to control the search behavior:
.INDENT 0.0
.TP
.B \fBOPENSSL_ROOT_DIR\fP
Set to the root directory of an OpenSSL installation to search for the OpenSSL
libraries in custom locations.
.TP
.B \fBOPENSSL_USE_STATIC_LIBS\fP
Added in version 3.4.

.sp
Set to \fBTRUE\fP to prefer static OpenSSL libraries over shared ones.
.TP
.B \fBOPENSSL_MSVC_STATIC_RT\fP
Added in version 3.5.

.sp
Set to \fBTRUE\fP to search for the OpenSSL libraries built with the MSVC static
runtime (MT).
.TP
.B \fBENV{PKG_CONFIG_PATH}\fP
On UNIX\-like systems, \fBpkg\-config\fP is used to locate OpenSSL.  Set the
\fBPKG_CONFIG_PATH\fP environment variable to specify alternate locations, which
is useful on systems with multiple library installations.
.UNINDENT
.SS Examples
.sp
Finding the OpenSSL \fBcrypto\fP library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSSL)
target_link_libraries(project_target PRIVATE OpenSSL::Crypto)
.EE
.UNINDENT
.UNINDENT
.sp
The following example shows how to find the OpenSSL \fBcrypto\fP and \fBssl\fP
libraries and link them to a project target.  The \fBSSL\fP component is
explicitly specified to ensure that the find module reports an error if the
\fBssl\fP library is not found:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSSL COMPONENTS SSL)
target_link_libraries(project_target PRIVATE OpenSSL::SSL)
.EE
.UNINDENT
.UNINDENT
.SS FindOpenThreads
.sp
Finds the OpenThreads C++ based threading library.
.sp
OpenThreads header files are intended to be included as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <OpenThreads/Thread>
.EE
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBOpenThreads_FOUND\fP
Boolean indicating whether OpenThreads library is found.  For backward
compatibility, the \fBOPENTHREADS_FOUND\fP variable is also set to the same
value.
.TP
.B \fBOPENTHREADS_LIBRARY\fP
Libraries needed to link against to use OpenThreads.  This provides either
release (optimized) or debug library variant, which are found separately
depending on the project\(aqs \fI\%Build Configurations\fP\&.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOPENTHREADS_INCLUDE_DIR\fP
The directory containing the header files needed to use OpenThreads.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOPENTHREADS_DIR\fP
An environment or CMake variable that can be set to help find an OpenThreads
library installed in a custom location.  It should point to the installation
destination that was used when configuring, building, and installing
OpenThreads library: \fB\&./configure \-\-prefix=$OPENTHREADS_DIR\fP\&.
.UNINDENT
.sp
This module was originally introduced to support the
\fI\%FindOpenSceneGraph\fP module and its components.  To simplify one\-step
automated configuration and builds when the OpenSceneGraph package is developed
and distributed upstream, this module supports additional environment variables
to find dependencies in specific locations.  This approach is used by upstream
package over specifying \fB\-DVAR=value\fP on the command line because it offers
better isolation from internal changes to the module and allows more flexibility
when specifying individual OSG components independently of the \fBCMAKE_*_PATH\fP
variables.  Explicit \fB\-DVAR=value\fP arguments can still override these settings
if needed.  Since OpenThreads is an optional standalone dependency of
OpenSceneGraph, this module also honors the following variables for convenience:
.INDENT 0.0
.TP
.B \fBOSG_DIR\fP
May be set as an environment or CMake variable. Treated the same as
\fBOPENTHREADS_DIR\fP\&.
.TP
.B \fBOSGDIR\fP
Environment variable treated the same as \fBOPENTHREADS_DIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding the OpenThreads library and creating an interface \fI\%imported target\fP that encapsulates its usage requirements for linking to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenThreads)

if(OpenThreads_FOUND AND NOT TARGET OpenThreads::OpenThreads)
  add_library(OpenThreads::OpenThreads INTERFACE IMPORTED)
  set_target_properties(
    OpenThreads::OpenThreads
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OPENTHREADS_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OPENTHREADS_LIBRARY}\(dq
  )
endif()

target_link_libraries(example PRIVATE OpenThreads::OpenThreads)
.EE
.UNINDENT
.UNINDENT
.SS Findosg
.sp
Finds the core OpenSceneGraph osg library (\fBlibosg\fP).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead, which automatically finds the osg core library along with its
required dependencies like OpenThreads:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the osg
library.  It is not intended to be included directly during typical use of the
\fI\%find_package()\fP command.  However, it is available as a standalone
module for advanced use cases where finer control over detection is needed, such
as explicitly finding osg library or bypassing automatic component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osg)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph core library headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosg_FOUND\fP
Boolean indicating whether osg library is found.  For backward
compatibility, the \fBOSG_FOUND\fP variable is also set to the same value.
.TP
.B \fBOSG_LIBRARIES\fP
The libraries needed to link against to use osg library.
.TP
.B \fBOSG_LIBRARY\fP
A result variable that is set to the same value as the \fBOSG_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSG_INCLUDE_DIR\fP
The include directory containing headers needed to use osg library.
.TP
.B \fBOSG_LIBRARY_DEBUG\fP
The path to the osg debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osg library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding the osg library explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osg)

if(osg_FOUND AND NOT TARGET osg::osg)
  add_library(osg::osg INTERFACE IMPORTED)
  set_target_properties(
    osg::osg
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSG_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSG_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osg::osg)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS Findosg_functions
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is not intended to be included or invoked directly by project code
during typical use of \fI\%find_package()\fP command.  It is internally used
by OpenSceneGraph (OSG) find modules to assist with searching for OSG
libraries and NodeKits.  For usage details refer to the
\fI\%FindOpenSceneGraph\fP module.
.UNINDENT
.UNINDENT
.SS FindosgAnimation
.sp
Finds the osgAnimation library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgAnimation as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgAnimation)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgAnimation library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgAnimation explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgAnimation)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgAnimation headers are intended to be included in C++
project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgAnimation/Animation>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgAnimation_FOUND\fP
Boolean indicating whether the osgAnimation library of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGANIMATION_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGANIMATION_LIBRARIES\fP
The libraries needed to link against to use osgAnimation.
.TP
.B \fBOSGANIMATION_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGANIMATION_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGANIMATION_INCLUDE_DIR\fP
The include directory containing headers needed to use osgAnimation.
.TP
.B \fBOSGANIMATION_LIBRARY_DEBUG\fP
The path to the osgAnimation debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgAnimation library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding the osgAnimation library explicitly with this module and creating an
interface \fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgAnimation)

if(osgAnimation_FOUND AND NOT TARGET osgAnimation::osgAnimation)
  add_library(osgAnimation::osgAnimation INTERFACE IMPORTED)
  set_target_properties(
    osgAnimation::osgAnimation
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGANIMATION_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGANIMATION_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgAnimation::osgAnimation)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgDB
.sp
Finds the osgDB library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgDB as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgDB)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgDB library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgDB explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgDB)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgDB headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgDB/DatabasePager>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgDB_FOUND\fP
Boolean indicating whether the osgDB library of the OpenSceneGraph toolkit is
found.  For backward compatibility, the \fBOSGDB_FOUND\fP variable is also set
to the same value.
.TP
.B \fBOSGDB_LIBRARIES\fP
The libraries needed to link against to use osgDB.
.TP
.B \fBOSGDB_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGDB_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGDB_INCLUDE_DIR\fP
The include directory containing headers needed to use osgDB.
.TP
.B \fBOSGDB_LIBRARY_DEBUG\fP
The path to the osgDB debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgDB library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgDB explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgDB)

if(osgDB_FOUND AND NOT TARGET osgDB::osgDB)
  add_library(osgDB::osgDB INTERFACE IMPORTED)
  set_target_properties(
    osgDB::osgDB
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGDB_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGDB_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgDB::osgDB)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgFX
.sp
Finds the osgFX NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgFX as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgFX)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgFX NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgFX explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgFX)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgFX headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgFX/BumpMapping>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgFX_FOUND\fP
Boolean indicating whether the osgFX NodeKit of the OpenSceneGraph toolkit
is found.  For backward compatibility, the \fBOSGFX_FOUND\fP variable is also
set to the same value.
.TP
.B \fBOSGFX_LIBRARIES\fP
The libraries needed to link against to use osgFX.
.TP
.B \fBOSGFX_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGFX_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGFX_INCLUDE_DIR\fP
The include directory containing headers needed to use osgFX.
.TP
.B \fBOSGFX_LIBRARY_DEBUG\fP
The path to the osgFX debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgFX NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgFX explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgFX)

if(osgFX_FOUND AND NOT TARGET osgFX::osgFX)
  add_library(osgFX::osgFX INTERFACE IMPORTED)
  set_target_properties(
    osgFX::osgFX
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGFX_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGFX_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgFX::osgFX)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgGA
.sp
Finds the osgGA library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgGA as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgGA)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgGA library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgGA explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgGA)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgGA headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgGA/FlightManipulator>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgGA_FOUND\fP
Boolean indicating whether the osgGA library of the OpenSceneGraph toolkit
is found.  For backward compatibility, the \fBOSGGA_FOUND\fP variable is also
set to the same value.
.TP
.B \fBOSGGA_LIBRARIES\fP
The libraries needed to link against to use osgGA.
.TP
.B \fBOSGGA_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGGA_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGGA_INCLUDE_DIR\fP
The include directory containing headers needed to use osgGA.
.TP
.B \fBOSGGA_LIBRARY_DEBUG\fP
The path to the osgGA debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgGA library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgGA explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgGA)

if(osgGA_FOUND AND NOT TARGET osgGA::osgGA)
  add_library(osgGA::osgGA INTERFACE IMPORTED)
  set_target_properties(
    osgGA::osgGA
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGGA_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGGA_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgGA::osgGA)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgIntrospection
.sp
Finds the osgIntrospection library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The osgIntrospection library has been removed from the OpenSceneGraph toolkit
as of OpenSceneGraph version 3.0.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgIntrospection as a component.  This will automatically
handle dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgIntrospection)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgIntrospection library.  It is not intended to be included directly during
typical use of the \fI\%find_package()\fP command.  However, it is available as
a standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgIntrospection explicitly or bypass
automatic component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgIntrospection)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgIntrospection headers are intended to be included in C++
project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgIntrospection/Reflection>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgIntrospection_FOUND\fP
Boolean indicating whether the osgIntrospection library of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGINTROSPECTION_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGINTROSPECTION_LIBRARIES\fP
The libraries needed to link against to use osgIntrospection.
.TP
.B \fBOSGINTROSPECTION_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGINTROSPECTION_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGINTROSPECTION_INCLUDE_DIR\fP
The include directory containing headers needed to use osgIntrospection.
.TP
.B \fBOSGINTROSPECTION_LIBRARY_DEBUG\fP
The path to the osgIntrospection debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgIntrospection library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgIntrospection explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgIntrospection)

if(osgIntrospection_FOUND AND NOT TARGET osgIntrospection::osgIntrospection)
  add_library(osgIntrospection::osgIntrospection INTERFACE IMPORTED)
  set_target_properties(
    osgIntrospection::osgIntrospection
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGINTROSPECTION_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGINTROSPECTION_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgIntrospection::osgIntrospection)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgManipulator
.sp
Finds the osgManipulator NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgManipulator as a component.  This will automatically
handle dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgManipulator)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgManipulator NodeKit.  It is not intended to be included directly during
typical use of the \fI\%find_package()\fP command.  However, it is available as
a standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgManipulator explicitly or bypass
automatic component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgManipulator)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgManipulator headers are intended to be included in C++
project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgManipulator/TrackballDragger>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgManipulator_FOUND\fP
Boolean indicating whether the osgManipulator NodeKit of the
OpenSceneGraph toolkit is found.  For backward compatibility, the
\fBOSGMANIPULATOR_FOUND\fP variable is also set to the same value.
.TP
.B \fBOSGMANIPULATOR_LIBRARIES\fP
The libraries needed to link against to use osgManipulator.
.TP
.B \fBOSGMANIPULATOR_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGMANIPULATOR_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGMANIPULATOR_INCLUDE_DIR\fP
The include directory containing headers needed to use osgManipulator.
.TP
.B \fBOSGMANIPULATOR_LIBRARY_DEBUG\fP
The path to the osgManipulator debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgManipulator NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgManipulator explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgManipulator)

if(osgManipulator_FOUND AND NOT TARGET osgManipulator::osgManipulator)
  add_library(osgManipulator::osgManipulator INTERFACE IMPORTED)
  set_target_properties(
    osgManipulator::osgManipulator
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGMANIPULATOR_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGMANIPULATOR_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgManipulator::osgManipulator)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgParticle
.sp
Finds the osgParticle NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgParticle as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgParticle)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgParticle NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgParticle explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgParticle)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgParticle headers are intended to be included in C++
project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgParticle/FireEffect>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgParticle_FOUND\fP
Boolean indicating whether the osgParticle NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGPARTICLE_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGPARTICLE_LIBRARIES\fP
The libraries needed to link against to use the osgParticle NodeKit
.TP
.B \fBOSGPARTICLE_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGPARTICLE_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGPARTICLE_INCLUDE_DIR\fP
The include directory containing headers needed to use osgParticle NodeKit.
.TP
.B \fBOSGPARTICLE_LIBRARY_DEBUG\fP
The path to the osgParticle debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgParticle NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgParticle explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgParticle)

if(osgParticle_FOUND AND NOT TARGET osgParticle::osgParticle)
  add_library(osgParticle::osgParticle INTERFACE IMPORTED)
  set_target_properties(
    osgParticle::osgParticle
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGPARTICLE_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGPARTICLE_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgParticle::osgParticle)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgPresentation
.sp
Finds the osgPresentation NodeKit from the OpenSceneGraph toolkit, available
since OpenSceneGraph version 3.0.0.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgPresentation as a component.  This will automatically
handle dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgPresentation)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgPresentation NodeKit.  It is not intended to be included directly during
typical use of the \fI\%find_package()\fP command.  However, it is available as
a standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgPresentation explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgPresentation)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgPresentation headers are intended to be included in C++
project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgPresentation/SlideEventHandler>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgPresentation_FOUND\fP
Boolean indicating whether the osgPresentation NodeKit of the
OpenSceneGraph toolkit is found.  For backward compatibility, the
\fBOSGPRESENTATION_FOUND\fP variable is also set to the same value.
.TP
.B \fBOSGPRESENTATION_LIBRARIES\fP
The libraries needed to link against to use osgPresentation.
.TP
.B \fBOSGPRESENTATION_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGPRESENTATION_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGPRESENTATION_INCLUDE_DIR\fP
The include directory containing headers needed to use osgPresentation.
.TP
.B \fBOSGPRESENTATION_LIBRARY_DEBUG\fP
The path to the osgPresentation debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgPresentation NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgPresentation explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgPresentation)

if(osgPresentation_FOUND AND NOT TARGET osgPresentation::osgPresentation)
  add_library(osgPresentation::osgPresentation INTERFACE IMPORTED)
  set_target_properties(
    osgPresentation::osgPresentation
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGPRESENTATION_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGPRESENTATION_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgPresentation::osgPresentation)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgProducer
.sp
Finds the osgProducer utility library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The osgProducer library has been removed from the OpenSceneGraph toolkit in
early OpenSceneGraph versions (pre 1.0 release) and replaced with osgViewer.
Its development has shifted at time to a standalone project and repository
Producer, which can be found with \fI\%FindProducer\fP module.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgProducer as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgProducer)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgProducer library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgProducer explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgProducer)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgProducer headers are intended to be included in C++
project source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgProducer/OsgSceneHandler>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgProducer_FOUND\fP
Boolean indicating whether the osgProducer library of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGPRODUCER_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGPRODUCER_LIBRARIES\fP
The libraries needed to link against to use osgProducer.
.TP
.B \fBOSGPRODUCER_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGPRODUCER_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGPRODUCER_INCLUDE_DIR\fP
The include directory containing headers needed to use osgProducer.
.TP
.B \fBOSGPRODUCER_LIBRARY_DEBUG\fP
The path to the osgProducer debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgProducer library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgProducer explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgProducer)

if(osgProducer_FOUND AND NOT TARGET osgProducer::osgProducer)
  add_library(osgProducer::osgProducer INTERFACE IMPORTED)
  set_target_properties(
    osgProducer::osgProducer
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGPRODUCER_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGPRODUCER_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgProducer::osgProducer)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.IP \(bu 2
The \fI\%FindProducer\fP module, which finds the standalone Producer library
that evolved from the legacy osgProducer.
.UNINDENT
.SS FindosgQt
.sp
Finds the osgQt utility library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgQt as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgQt)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgQt library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgQt explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgQt)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgQt headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgQt/GraphicsWindowQt>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgQt_FOUND\fP
Boolean indicating whether the osgQt library of the OpenSceneGraph toolkit
is found.  For backward compatibility, the \fBOSGQT_FOUND\fP variable is also
set to the same value.
.TP
.B \fBOSGQT_LIBRARIES\fP
The libraries needed to link against to use osgQt.
.TP
.B \fBOSGQT_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGQT_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGQT_INCLUDE_DIR\fP
The include directory containing headers needed to use osgQt.
.TP
.B \fBOSGQT_LIBRARY_DEBUG\fP
The path to the osgQt debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgQt library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgQt explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgQt)

if(osgQt_FOUND AND NOT TARGET osgQt::osgQt)
  add_library(osgQt::osgQt INTERFACE IMPORTED)
  set_target_properties(
    osgQt::osgQt
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGQT_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGQT_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgQt::osgQt)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgShadow
.sp
Finds the osgShadow NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgShadow as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgShadow)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgShadow NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgShadow explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgShadow)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgShadow headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgShadow/ShadowTexture>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgShadow_FOUND\fP
Boolean indicating whether the osgShadow NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGSHADOW_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGSHADOW_LIBRARIES\fP
The libraries needed to link against to use osgShadow.
.TP
.B \fBOSGSHADOW_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGSHADOW_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGSHADOW_INCLUDE_DIR\fP
The include directory containing headers needed to use osgShadow.
.TP
.B \fBOSGSHADOW_LIBRARY_DEBUG\fP
The path to the osgShadow debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgShadow NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgShadow explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgShadow)

if(osgShadow_FOUND AND NOT TARGET osgShadow::osgShadow)
  add_library(osgShadow::osgShadow INTERFACE IMPORTED)
  set_target_properties(
    osgShadow::osgShadow
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGSHADOW_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGSHADOW_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgShadow::osgShadow)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgSim
.sp
Finds the osgSim NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgSim as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgSim)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgSim NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgSim explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgSim)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgSim headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgSim/ImpostorSprite>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgSim_FOUND\fP
Boolean indicating whether the osgSim NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGSIM_FOUND\fP variable
is also set to the same value.
.TP
.B \fBOSGSIM_LIBRARIES\fP
The libraries needed to link against to use osgSim.
.TP
.B \fBOSGSIM_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGSIM_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGSIM_INCLUDE_DIR\fP
The include directory containing headers needed to use osgSim.
.TP
.B \fBOSGSIM_LIBRARY_DEBUG\fP
The path to the osgSim debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgSim NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgSim explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgSim)

if(osgSim_FOUND AND NOT TARGET osgSim::osgSim)
  add_library(osgSim::osgSim INTERFACE IMPORTED)
  set_target_properties(
    osgSim::osgSim
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGSIM_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGSIM_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgSim::osgSim)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgTerrain
.sp
Finds the osgTerrain NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgTerrain as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgTerrain)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgTerrain NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgTerrain explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgTerrain)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgTerrain headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgTerrain/Terrain>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgTerrain_FOUND\fP
Boolean indicating whether the osgTerrain NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGTERRAIN_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGTERRAIN_LIBRARIES\fP
The libraries needed to link against to use osgTerrain.
.TP
.B \fBOSGTERRAIN_LIBRARY\fP
A result variable that is set to the same value as the
\fBOSGTERRAIN_LIBRARIES\fP variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGTERRAIN_INCLUDE_DIR\fP
The include directory containing headers needed to use osgTerrain.
.TP
.B \fBOSGTERRAIN_LIBRARY_DEBUG\fP
The path to the osgTerrain debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgTerrain NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgTerrain explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgTerrain)

if(osgTerrain_FOUND AND NOT TARGET osgTerrain::osgTerrain)
  add_library(osgTerrain::osgTerrain INTERFACE IMPORTED)
  set_target_properties(
    osgTerrain::osgTerrain
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGTERRAIN_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGTERRAIN_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgTerrain::osgTerrain)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgText
.sp
Finds the osgText NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgText as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgText)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgText NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgText explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgText)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgText headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgText/Text>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgText_FOUND\fP
Boolean indicating whether the osgText NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGTEXT_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGTEXT_LIBRARIES\fP
The libraries needed to link against to use osgText.
.TP
.B \fBOSGTEXT_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGTEXT_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGTEXT_INCLUDE_DIR\fP
The include directory containing headers needed to use osgText.
.TP
.B \fBOSGTEXT_LIBRARY_DEBUG\fP
The path to the osgText debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgText NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgText explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgText)

if(osgText_FOUND AND NOT TARGET osgText::osgText)
  add_library(osgText::osgText INTERFACE IMPORTED)
  set_target_properties(
    osgText::osgText
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGTEXT_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGTEXT_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgText::osgText)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgUtil
.sp
Finds the osgUtil library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgUtil as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgUtil)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgUtil library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgUtil explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgUtil)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgUtil headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgUtil/SceneView>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgUtil_FOUND\fP
Boolean indicating whether the osgUtil library of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGUTIL_FOUND\fP variable
is also set to the same value.
.TP
.B \fBOSGUTIL_LIBRARIES\fP
The libraries needed to link against to use osgUtil.
.TP
.B \fBOSGUTIL_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGUTIL_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGUTIL_INCLUDE_DIR\fP
The include directory containing headers needed to use osgUtil.
.TP
.B \fBOSGUTIL_LIBRARY_DEBUG\fP
The path to the osgUtil debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgUtil library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgUtil explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgUtil)

if(osgUtil_FOUND AND NOT TARGET osgUtil::osgUtil)
  add_library(osgUtil::osgUtil INTERFACE IMPORTED)
  set_target_properties(
    osgUtil::osgUtil
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGUTIL_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGUTIL_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgUtil::osgUtil)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgViewer
.sp
Finds the osgViewer library from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgViewer as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgViewer)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgViewer library.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgViewer explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgViewer)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgViewer headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgViewer/Viewer>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgViewer_FOUND\fP
Boolean indicating whether the osgViewer library of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGVIEWER_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGVIEWER_LIBRARIES\fP
The libraries needed to link against to use osgViewer.
.TP
.B \fBOSGVIEWER_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGVIEWER_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGVIEWER_INCLUDE_DIR\fP
The include directory containing headers needed to use osgViewer.
.TP
.B \fBOSGVIEWER_LIBRARY_DEBUG\fP
The path to the osgViewer debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgViewer library, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgViewer explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgViewer)

if(osgViewer_FOUND AND NOT TARGET osgViewer::osgViewer)
  add_library(osgViewer::osgViewer INTERFACE IMPORTED)
  set_target_properties(
    osgViewer::osgViewer
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGVIEWER_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGVIEWER_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgViewer::osgViewer)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgVolume
.sp
Finds the osgVolume NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgVolume as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgVolume)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgVolume NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgVolume explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgVolume)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgVolume headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgVolume/Volume>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgVolume_FOUND\fP
Boolean indicating whether the osgVolume NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGVOLUME_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGVOLUME_LIBRARIES\fP
The libraries needed to link against to use osgVolume.
.TP
.B \fBOSGVOLUME_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGVOLUME_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGVOLUME_INCLUDE_DIR\fP
The include directory containing headers needed to use osgVolume.
.TP
.B \fBOSGVOLUME_LIBRARY_DEBUG\fP
The path to the osgVolume debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgVolume NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgVolume explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgVolume)

if(osgVolume_FOUND AND NOT TARGET osgVolume::osgVolume)
  add_library(osgVolume::osgVolume INTERFACE IMPORTED)
  set_target_properties(
    osgVolume::osgVolume
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGVOLUME_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGVOLUME_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgVolume::osgVolume)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindosgWidget
.sp
Finds the osgWidget NodeKit from the OpenSceneGraph toolkit.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In most cases, it\(aqs recommended to use the \fI\%FindOpenSceneGraph\fP module
instead and list osgWidget as a component.  This will automatically handle
dependencies such as the OpenThreads and core osg libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(OpenSceneGraph COMPONENTS osgWidget)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This module is used internally by \fI\%FindOpenSceneGraph\fP to find the
osgWidget NodeKit.  It is not intended to be included directly during typical
use of the \fI\%find_package()\fP command.  However, it is available as a
standalone module for advanced use cases where finer control over detection is
needed.  For example, to find the osgWidget explicitly or bypass automatic
component detection:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgWidget)
.EE
.UNINDENT
.UNINDENT
.sp
OpenSceneGraph and osgWidget headers are intended to be included in C++ project
source code as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <osg/PositionAttitudeTransform>
#include <osgWidget/Widget>
// ...
.EE
.UNINDENT
.UNINDENT
.sp
When working with the OpenSceneGraph toolkit, other libraries such as OpenGL may
also be required.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBosgWidget_FOUND\fP
Boolean indicating whether the osgWidget NodeKit of the OpenSceneGraph
toolkit is found.  For backward compatibility, the \fBOSGWIDGET_FOUND\fP
variable is also set to the same value.
.TP
.B \fBOSGWIDGET_LIBRARIES\fP
The libraries needed to link against to use osgWidget.
.TP
.B \fBOSGWIDGET_LIBRARY\fP
A result variable that is set to the same value as the \fBOSGWIDGET_LIBRARIES\fP
variable.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBOSGWIDGET_INCLUDE_DIR\fP
The include directory containing headers needed to use osgWidget.
.TP
.B \fBOSGWIDGET_LIBRARY_DEBUG\fP
The path to the osgWidget debug library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable that can be set to help locate the OpenSceneGraph
toolkit, including its osgWidget NodeKit, when installed in a custom
location.  It should point to the OpenSceneGraph installation prefix used when
it was configured, built, and installed: \fB\&./configure \-\-prefix=$OSGDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding osgWidget explicitly with this module and creating an interface
\fI\%imported target\fP that encapsulates its usage
requirements for linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(osgWidget)

if(osgWidget_FOUND AND NOT TARGET osgWidget::osgWidget)
  add_library(osgWidget::osgWidget INTERFACE IMPORTED)
  set_target_properties(
    osgWidget::osgWidget
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${OSGWIDGET_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${OSGWIDGET_LIBRARIES}\(dq
  )
endif()

target_link_libraries(example PRIVATE osgWidget::osgWidget)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindOpenSceneGraph\fP module to find OpenSceneGraph toolkit.
.UNINDENT
.SS FindPatch
.sp
Added in version 3.10.

.sp
Finds the \fBpatch\fP command\-line executable for applying diff patches to
original files.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBPatch::patch\fP
Target encapsulating the \fBpatch\fP command\-line executable, available only if
\fBpatch\fP is found.
.sp
Changed in version 4.0: This imported target is defined only when \fI\%CMAKE_ROLE\fP is
\fBPROJECT\fP\&.

.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBPatch_FOUND\fP
Boolean indicating whether the \fBpatch\fP command\-line executable is found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPatch_EXECUTABLE\fP
The path to the \fBpatch\fP command\-line executable.
.UNINDENT
.SS Examples
.sp
Finding \fBpatch\fP command and executing it in a process:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Patch)
if(Patch_FOUND)
  execute_process(
    COMMAND ${Patch_EXECUTABLE} \-p1 \-i ${CMAKE_CURRENT_SOURCE_DIR}/src.patch
  )
endif()
.EE
.UNINDENT
.UNINDENT
.sp
The imported target can be used, for example, inside the
\fI\%add_custom_command()\fP command, which patches the given file when some
build rule depends on its output:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Patch)
if(TARGET Patch::patch)
  # Executed when some build rule depends on the src.c file.
  add_custom_command(
    OUTPUT src.c
    COMMAND Patch::patch \-p1 \-i ${CMAKE_CURRENT_SOURCE_DIR}/src.patch
    # ...
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindPerl
.sp
Finds a Perl interpreter.  Perl is a general\-purpose, interpreted, dynamic
programming language.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBPerl_FOUND\fP
True if the Perl executable was found.  For backward compatibility, the
\fBPERL_FOUND\fP variable is also set to the same value.
.TP
.B \fBPERL_VERSION_STRING\fP
The version of Perl found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPERL_EXECUTABLE\fP
Full path to the \fBperl\fP executable.
.UNINDENT
.SS Examples
.sp
Finding the Perl interpreter:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Perl)
.EE
.UNINDENT
.UNINDENT
.SS FindPerlLibs
.sp
Finds Perl libraries.  Perl is a general\-purpose, interpreted, dynamic
programming language.  This module detects whether Perl is installed and
determines the locations of include paths, libraries, and the library name.
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBPerlLibs_FOUND\fP
True if \fBperl.h\fP and \fBlibperl\fP were found.  For backward compatibility,
the \fBPERLLIBS_FOUND\fP variable is also set to the same value.
.TP
.B \fBPERL_SITESEARCH\fP
Path to the sitesearch install directory (\fB\-V:installsitesearch\fP).
.TP
.B \fBPERL_SITEARCH\fP
Path to the sitelib install directory (\fB\-V:installsitearch\fP).
.TP
.B \fBPERL_SITELIB\fP
Path to the sitelib install directory (\fB\-V:installsitelib\fP).
.TP
.B \fBPERL_VENDORARCH\fP
Path to the vendor arch install directory (\fB\-V:installvendorarch\fP).
.TP
.B \fBPERL_VENDORLIB\fP
Path to the vendor lib install directory (\fB\-V:installvendorlib\fP).
.TP
.B \fBPERL_ARCHLIB\fP
Path to the core arch lib install directory (\fB\-V:archlib\fP).
.TP
.B \fBPERL_PRIVLIB\fP
Path to the core priv lib install directory (\fB\-V:privlib\fP).
.TP
.B \fBPERL_UPDATE_ARCHLIB\fP
Path to the update arch lib install directory (\fB\-V:installarchlib\fP).
.TP
.B \fBPERL_UPDATE_PRIVLIB\fP
Path to the update priv lib install directory (\fB\-V:installprivlib\fP).
.TP
.B \fBPERL_EXTRA_C_FLAGS\fP
Compilation flags used to build Perl.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPERL_INCLUDE_PATH\fP
Directory containing \fBperl.h\fP and other Perl header files.
.TP
.B \fBPERL_LIBRARY\fP
Path to the \fBlibperl\fP\&.
.TP
.B \fBPERL_EXECUTABLE\fP
Full path to the \fBperl\fP executable.
.UNINDENT
.SS Examples
.sp
Finding Perl libraries and specifying the minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PerlLibs 6.0)
.EE
.UNINDENT
.UNINDENT
.SS FindPHP4
.sp
Finds PHP version 4, a general\-purpose scripting language.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically for PHP version 4, which is obsolete and no longer
supported.  For modern development, use a newer PHP version.
.UNINDENT
.UNINDENT
.sp
This module checks if PHP 4 is installed and determines the locations of the
include directories and the PHP command\-line interpreter.
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPHP4_INCLUDE_PATH\fP
The directory containing \fBphp.h\fP and other headers needed to use PHP.
.TP
.B \fBPHP4_EXECUTABLE\fP
The full path to the \fBphp\fP command\-line interpreter executable.
.UNINDENT
.SS Examples
.sp
Finding PHP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PHP4)
.EE
.UNINDENT
.UNINDENT
.SS FindPhysFS
.sp
Finds the PhysicsFS library (PhysFS) for file I/O abstraction.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBPhysFS_FOUND\fP
Boolean indicating whether PhysicsFS library is found.  For backward
compatibility, the \fBPHYSFS_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPHYSFS_LIBRARY\fP
Path to the PhysicsFS library needed to link against.
.TP
.B \fBPHYSFS_INCLUDE_DIR\fP
Directory containing the \fBphysfs.h\fP and related headers needed for using
the library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBPHYSFSDIR\fP
Environment variable that can be set to help locate a PhysicsFS library
installed in a custom location.  It should point to the installation
destination that was used when configuring, building, and installing PhysicsFS
library: \fB\&./configure \-\-prefix=$PHYSFSDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding the PhysicsFS library:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PhysFS)
.EE
.UNINDENT
.UNINDENT
.SS FindPike
.sp
Finds the Pike compiler and interpreter.  Pike is interpreted, general purpose,
high\-level, dynamic programming language.
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPIKE_INCLUDE_PATH\fP
The directory containing \fBprogram.h\fP\&.
.TP
.B \fBPIKE_EXECUTABLE\fP
Full path to the pike binary.
.UNINDENT
.SS Examples
.sp
Finding Pike:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Pike)
.EE
.UNINDENT
.UNINDENT
.SS FindPkgConfig
.sp
A \fBpkg\-config\fP module for CMake.
.sp
Finds the \fBpkg\-config\fP executable and adds the \fI\%pkg_get_variable()\fP,
\fI\%pkg_check_modules()\fP and \fI\%pkg_search_module()\fP commands. The
following variables will also be set:
.INDENT 0.0
.TP
.B \fBPKG_CONFIG_FOUND\fP
True if a pkg\-config executable was found.
.TP
.B \fBPKG_CONFIG_VERSION_STRING\fP
The version of pkg\-config that was found.
.TP
.B \fBPKG_CONFIG_EXECUTABLE\fP
The pathname of the pkg\-config program.
.TP
.B \fBPKG_CONFIG_ARGN\fP
Added in version 3.22.

.sp
A list of arguments to pass to pkg\-config.
.UNINDENT
.sp
Both \fBPKG_CONFIG_EXECUTABLE\fP and \fBPKG_CONFIG_ARGN\fP are initialized by the
module, but may be overridden by the user.  See \fI\%Variables Affecting Behavior\fP
for how these variables are initialized.
.INDENT 0.0
.TP
.B pkg_check_modules
Checks for all the given modules, setting a variety of result variables in
the calling scope.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_check_modules(<prefix>
                  [REQUIRED] [QUIET]
                  [NO_CMAKE_PATH]
                  [NO_CMAKE_ENVIRONMENT_PATH]
                  [IMPORTED_TARGET [GLOBAL]]
                  <moduleSpec> [<moduleSpec>...])
.EE
.UNINDENT
.UNINDENT
.sp
When the \fBREQUIRED\fP argument is given, the command will fail with an error
if module(s) could not be found.
.sp
When the \fBQUIET\fP argument is given, no status messages will be printed.
.sp
Added in version 3.3: The \fI\%CMAKE_PREFIX_PATH\fP,
\fI\%CMAKE_FRAMEWORK_PATH\fP, and \fI\%CMAKE_APPBUNDLE_PATH\fP cache
and environment variables will be added to the \fBpkg\-config\fP search path.
The \fBNO_CMAKE_PATH\fP and \fBNO_CMAKE_ENVIRONMENT_PATH\fP arguments
disable this behavior for the cache variables and environment variables
respectively.
The \fI\%PKG_CONFIG_USE_CMAKE_PREFIX_PATH\fP variable set to \fBFALSE\fP
disables this behavior globally.

.sp
Added in version 3.7: The \fBIMPORTED_TARGET\fP argument will create an imported target named
\fBPkgConfig::<prefix>\fP that can be passed directly as an argument to
\fI\%target_link_libraries()\fP\&.

.sp
Added in version 3.13: The \fBGLOBAL\fP argument will make the
imported target available in global scope.

.sp
Added in version 3.15: Non\-library linker options reported by \fBpkg\-config\fP are stored in the
\fI\%INTERFACE_LINK_OPTIONS\fP target property.

.sp
Changed in version 3.18: Include directories specified with \fB\-isystem\fP are stored in the
\fI\%INTERFACE_INCLUDE_DIRECTORIES\fP target property.  Previous
versions of CMake left them in the \fI\%INTERFACE_COMPILE_OPTIONS\fP
property.

.sp
Each \fB<moduleSpec>\fP can be either a bare module name or it can be a
module name with a version constraint (operators \fB=\fP, \fB<\fP, \fB>\fP,
\fB<=\fP and \fB>=\fP are supported).  The following are examples for a module
named \fBfoo\fP with various constraints:
.INDENT 7.0
.IP \(bu 2
\fBfoo\fP matches any version.
.IP \(bu 2
\fBfoo<2\fP only matches versions before 2.
.IP \(bu 2
\fBfoo>=3.1\fP matches any version from 3.1 or later.
.IP \(bu 2
\fBfoo=1.2.3\fP requires that foo must be exactly version 1.2.3.
.UNINDENT
.sp
The following variables may be set upon return.  Two sets of values exist:
One for the common case (\fB<XXX> = <prefix>\fP) and another for the
information \fBpkg\-config\fP provides when called with the \fB\-\-static\fP
option (\fB<XXX> = <prefix>_STATIC\fP).
.INDENT 7.0
.TP
.B \fB<XXX>_FOUND\fP
set to 1 if module(s) exist
.TP
.B \fB<XXX>_LIBRARIES\fP
only the libraries (without the \(aq\-l\(aq)
.TP
.B \fB<XXX>_LINK_LIBRARIES\fP
the libraries and their absolute paths
.TP
.B \fB<XXX>_LIBRARY_DIRS\fP
the paths of the libraries (without the \(aq\-L\(aq)
.TP
.B \fB<XXX>_LDFLAGS\fP
all required linker flags
.TP
.B \fB<XXX>_LDFLAGS_OTHER\fP
all other linker flags
.TP
.B \fB<XXX>_INCLUDE_DIRS\fP
the \(aq\-I\(aq preprocessor flags (without the \(aq\-I\(aq)
.TP
.B \fB<XXX>_CFLAGS\fP
all required cflags
.TP
.B \fB<XXX>_CFLAGS_OTHER\fP
the other compiler flags
.UNINDENT
.sp
All but \fB<XXX>_FOUND\fP may be a \fI\%;\-list\fP if the
associated variable returned from \fBpkg\-config\fP has multiple values.
.sp
Changed in version 3.18: Include directories specified with \fB\-isystem\fP are stored in the
\fB<XXX>_INCLUDE_DIRS\fP variable.  Previous versions of CMake left them
in \fB<XXX>_CFLAGS_OTHER\fP\&.

.sp
There are some special variables whose prefix depends on the number of
\fB<moduleSpec>\fP given.  When there is only one \fB<moduleSpec>\fP,
\fB<YYY>\fP will simply be \fB<prefix>\fP, but if two or more \fB<moduleSpec>\fP
items are given, \fB<YYY>\fP will be \fB<prefix>_<moduleName>\fP\&.
.INDENT 7.0
.TP
.B \fB<YYY>_VERSION\fP
version of the module
.TP
.B \fB<YYY>_PREFIX\fP
prefix directory of the module
.TP
.B \fB<YYY>_INCLUDEDIR\fP
include directory of the module
.TP
.B \fB<YYY>_LIBDIR\fP
lib directory of the module
.UNINDENT
.sp
Changed in version 3.8: For any given \fB<prefix>\fP, \fBpkg_check_modules()\fP can be called multiple
times with different parameters.  Previous versions of CMake cached and
returned the first successful result.

.sp
Changed in version 3.16: If a full path to the found library can\(aqt be determined, but it\(aqs still
visible to the linker, pass it through as \fB\-l<name>\fP\&.  Previous versions
of CMake failed in this case.

.sp
Examples:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_check_modules (GLIB2 glib\-2.0)
.EE
.UNINDENT
.UNINDENT
.sp
Looks for any version of glib2.  If found, the output variable
\fBGLIB2_VERSION\fP will hold the actual version found.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_check_modules (GLIB2 glib\-2.0>=2.10)
.EE
.UNINDENT
.UNINDENT
.sp
Looks for at least version 2.10 of glib2.  If found, the output variable
\fBGLIB2_VERSION\fP will hold the actual version found.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_check_modules (FOO glib\-2.0>=2.10 gtk+\-2.0)
.EE
.UNINDENT
.UNINDENT
.sp
Looks for both glib2\-2.0 (at least version 2.10) and any version of
gtk2+\-2.0.  Only if both are found will \fBFOO\fP be considered found.
The \fBFOO_glib\-2.0_VERSION\fP and \fBFOO_gtk+\-2.0_VERSION\fP variables will be
set to their respective found module versions.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_check_modules (XRENDER REQUIRED xrender)
.EE
.UNINDENT
.UNINDENT
.sp
Requires any version of \fBxrender\fP\&.  Example output variables set by a
successful call:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
XRENDER_LIBRARIES=Xrender;X11
XRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pkg_search_module
The behavior of this command is the same as \fI\%pkg_check_modules()\fP,
except that rather than checking for all the specified modules, it searches
for just the first successful match.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_search_module(<prefix>
                  [REQUIRED] [QUIET]
                  [NO_CMAKE_PATH]
                  [NO_CMAKE_ENVIRONMENT_PATH]
                  [IMPORTED_TARGET [GLOBAL]]
                  <moduleSpec> [<moduleSpec>...])
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.16: If a module is found, the \fB<prefix>_MODULE_NAME\fP variable will contain the
name of the matching module. This variable can be used if you need to run
\fI\%pkg_get_variable()\fP\&.

.sp
Example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_search_module (BAR libxml\-2.0 libxml2 libxml>=2)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pkg_get_variable
Added in version 3.4.

.sp
Retrieves the value of a pkg\-config variable \fBvarName\fP and stores it in the
result variable \fBresultVar\fP in the calling scope.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_get_variable(<resultVar> <moduleName> <varName>
                 [DEFINE_VARIABLES <key>=<value>...])
.EE
.UNINDENT
.UNINDENT
.sp
If \fBpkg\-config\fP returns multiple values for the specified variable,
\fBresultVar\fP will contain a \fI\%;\-list\fP\&.
.sp
Options:
.INDENT 7.0
.TP
.B \fBDEFINE_VARIABLES <key>=<value>...\fP
Added in version 3.28.

.sp
Specify key\-value pairs to redefine variables affecting the variable
retrieved with \fBpkg\-config\fP\&.
.UNINDENT
.sp
For example:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkg_get_variable(GI_GIRDIR gobject\-introspection\-1.0 girdir)
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.SS Variables Affecting Behavior
.INDENT 0.0
.TP
.B PKG_CONFIG_EXECUTABLE
This cache variable can be set to the path of the pkg\-config executable.
\fI\%find_program()\fP is called internally by the module with this
variable.
.sp
Added in version 3.1: The \fBPKG_CONFIG\fP environment variable can be used as a hint if
\fBPKG_CONFIG_EXECUTABLE\fP has not yet been set.

.sp
Changed in version 3.22: If the \fBPKG_CONFIG\fP environment variable is set, only the first
argument is taken from it when using it as a hint.

.UNINDENT
.INDENT 0.0
.TP
.B PKG_CONFIG_ARGN
Added in version 3.22.

.sp
This cache variable can be set to a list of arguments to additionally pass
to pkg\-config if needed. If not provided, it will be initialized from the
\fBPKG_CONFIG\fP environment variable, if set. The first argument in that
environment variable is assumed to be the pkg\-config program, while all
remaining arguments after that are used to initialize \fBPKG_CONFIG_ARGN\fP\&.
If no such environment variable is defined, \fBPKG_CONFIG_ARGN\fP is
initialized to an empty string. The module does not update the variable once
it has been set in the cache.
.UNINDENT
.INDENT 0.0
.TP
.B PKG_CONFIG_USE_CMAKE_PREFIX_PATH
Added in version 3.1.

.sp
Specifies whether \fI\%pkg_check_modules()\fP and
\fI\%pkg_search_module()\fP should add the paths in the
\fI\%CMAKE_PREFIX_PATH\fP, \fI\%CMAKE_FRAMEWORK_PATH\fP and
\fI\%CMAKE_APPBUNDLE_PATH\fP cache and environment variables to the
\fBpkg\-config\fP search path.
.sp
If this variable is not set, this behavior is enabled by default if
\fI\%CMAKE_MINIMUM_REQUIRED_VERSION\fP is 3.1 or later, disabled
otherwise.
.UNINDENT
.SS FindPNG
.sp
Finds libpng, the official reference library for the PNG image format.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The PNG library depends on the ZLib compression library, which must be found
for this module to succeed.
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
Added in version 3.5.

.sp
This module defines the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBPNG::PNG\fP
The libpng library, if found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBPNG_INCLUDE_DIRS\fP
Directory containing the PNG headers (e.g., \fBpng.h\fP).
.TP
.B \fBPNG_LIBRARIES\fP
PNG libraries required for linking.
.TP
.B \fBPNG_DEFINITIONS\fP
Compile definitions for using PNG, if any.  They can be added with
\fI\%target_compile_definitions()\fP command when not using the \fBPNG::PNG\fP
imported target.
.TP
.B \fBPNG_FOUND\fP
True if PNG library is found.
.TP
.B \fBPNG_VERSION_STRING\fP
The version of the PNG library found.
.UNINDENT
.SS Obsolete Variables
.sp
The following variables may also be set for backward compatibility:
.INDENT 0.0
.TP
.B \fBPNG_LIBRARY\fP
Path to the PNG library.
.TP
.B \fBPNG_INCLUDE_DIR\fP
Directory containing the PNG headers (same as \fBPNG_INCLUDE_DIRS\fP).
.UNINDENT
.SS Examples
.sp
Finding PNG library and using it in a project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PNG)
target_link_libraries(project_target PRIVATE PNG::PNG)
.EE
.UNINDENT
.UNINDENT
.SS FindPostgreSQL
.sp
Finds the PostgreSQL installation \- the client library (\fBlibpq\fP) and
optionally the server.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBPostgreSQL::PostgreSQL\fP
Added in version 3.14.

.sp
Target encapsulating all usage requirements of the required \fBlibpq\fP client
library and the optionally requested PostgreSQL server component.  This target
is available only if PostgreSQL is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBPostgreSQL_FOUND\fP
Boolean indicating whether the minimum required version and components of
PostgreSQL have been found.
.TP
.B \fBPostgreSQL_LIBRARIES\fP
The PostgreSQL libraries needed for linking.
.TP
.B \fBPostgreSQL_INCLUDE_DIRS\fP
The include directories containing PostgreSQL headers.
.TP
.B \fBPostgreSQL_LIBRARY_DIRS\fP
The directories containing PostgreSQL libraries.
.TP
.B \fBPostgreSQL_VERSION_STRING\fP
The version of PostgreSQL found.
.TP
.B \fBPostgreSQL_TYPE_INCLUDE_DIR\fP
The include directory containing PostgreSQL server headers.
.UNINDENT
.SS Components
.sp
This module supports the following additional components:
.INDENT 0.0
.TP
.B \fBServer\fP
Added in version 3.20.

.sp
Ensures that server headers are also found.  Note that
\fBPostgreSQL_TYPE_INCLUDE_DIR\fP variable is set regardless of whether this
component is specified in the \fBfind_package()\fP call.
.UNINDENT
.SS Examples
.sp
Finding the PostgreSQL client library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PostgreSQL)
target_link_libraries(project_target PRIVATE PostgreSQL::PostgreSQL)
.EE
.UNINDENT
.UNINDENT
.sp
Specifying a minimum required PostgreSQL version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PostgreSQL 11)
.EE
.UNINDENT
.UNINDENT
.sp
Finding the PostgreSQL client library and requiring server headers using the
\fBServer\fP component provides an imported target with all usage requirements,
which can then be linked to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PostgreSQL COMPONENTS Server)
target_link_libraries(project_target PRIVATE PostgreSQL::PostgreSQL)
.EE
.UNINDENT
.UNINDENT
.sp
When checking for PostgreSQL client library features, some capabilities are
indicated by preprocessor macros in the \fBlibpq\-fe.h\fP header (e.g.
\fBLIBPQ_HAS_PIPELINING\fP).  Others may require using the
\fI\%check_symbol_exists()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PostgreSQL)
target_link_libraries(project_target PRIVATE PostgreSQL::PostgreSQL)

# The PQservice() function is available as of PostgreSQL 18.
if(TARGET PostgreSQL::PostgreSQL)
  include(CheckSymbolExists)
  include(CMakePushCheckState)

  cmake_push_check_state(RESET)
  set(CMAKE_REQUIRED_LIBRARIES PostgreSQL::PostgreSQL)
  check_symbol_exists(PQservice \(dqlibpq\-fe.h\(dq PROJECT_HAS_PQSERVICE)
  cmake_pop_check_state()
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindProducer
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Producer (also known as \fIOpen Producer\fP) library originated from the
osgProducer utility library in early versions of the OpenSceneGraph toolkit
and was later developed into a standalone library.  The osgProducer was
eventually replaced by the osgViewer library, and the standalone Producer
library became obsolete and is no longer maintained.  For details about
OpenSceneGraph usage, refer to the \fI\%FindOpenSceneGraph\fP module.
.UNINDENT
.UNINDENT
.sp
This module finds the Producer library, a windowing and event handling library
designed primarily for real\-time graphics applications.
.sp
Producer library headers are intended to be included in C++ project source code
as:
.sp
\fBexample.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <Producer/CameraGroup>
.EE
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBProducer_FOUND\fP
Boolean indicating whether Producer is found.  For backward compatibility, the
\fBPRODUCER_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPRODUCER_INCLUDE_DIR\fP
The include directory containing headers needed to use Producer.
.TP
.B \fBPRODUCER_LIBRARY\fP
The path to the Producer library needed to link against for usage.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBPRODUCER_DIR\fP
Environment variable that can be set to help locate a custom installation of
the Producer library.  It should point to the root directory where the
Producer library was installed.  This should match the installation prefix
used when configuring and building Producer, such as with
\fB\&./configure \-\-prefix=$PRODUCER_DIR\fP\&.
.UNINDENT
.sp
Because Producer was historically tightly integrated with OpenSceneGraph, this
module also accepts the following environment variables as equivalents to
\fBPRODUCER_DIR\fP for convenience to specify common installation root for
multiple OpenSceneGraph\-related libraries at once:
.INDENT 0.0
.TP
.B \fBOSGDIR\fP
Environment variable treated the same as \fBPRODUCER_DIR\fP\&.
.TP
.B \fBOSG_DIR\fP
Environment variable treated the same as \fBPRODUCER_DIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding the Producer library and creating an \fI\%imported target\fP that encapsulates its usage requirements for linking to a
project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Producer)

if(Producer_FOUND AND NOT TARGET Producer::Producer)
  add_library(Producer::Producer INTERFACE IMPORTED)
  set_target_properties(
    Producer::Producer
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${PRODUCER_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${PRODUCER_LIBRARY}\(dq
  )
endif()

target_link_libraries(example PRIVATE Producer::Producer)
.EE
.UNINDENT
.UNINDENT
.SS FindProtobuf
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If the Protobuf library is built and installed using its CMake\-based
build system, it provides a \fI\%package configuration file\fP for use with the \fI\%find_package()\fP command
in \fIconfig mode\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf CONFIG)
.EE
.UNINDENT
.UNINDENT
.sp
In this case, imported targets and CMake commands such as
\fI\%protobuf_generate()\fP are provided by the upstream package rather
than this module.  Additionally, some variables documented here are not
available in \fIconfig mode\fP, as imported targets are preferred.  For usage
details, refer to the upstream documentation, which is the recommended
way to use Protobuf with CMake.
.sp
This module works only in \fImodule mode\fP\&.
.UNINDENT
.UNINDENT
.sp
This module finds the Protocol Buffers library (Protobuf) in \fImodule mode\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf [<version>] [...])
.EE
.UNINDENT
.UNINDENT
.sp
Protobuf is an open\-source, language\-neutral, and platform\-neutral mechanism
for serializing structured data, developed by Google.  It is commonly used
for data exchange between programs or across networks.
.sp
Added in version 3.6: Support for the \fB<version>\fP argument in
\fI\%find_package(Protobuf <version>)\fP\&.

.sp
Changed in version 3.6: All input and output variables use the \fBProtobuf_\fP prefix.  Variables
with \fBPROTOBUF_\fP prefix are supported for backward compatibility.

.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBprotobuf::libprotobuf\fP
Added in version 3.9.

.sp
Target encapsulating the Protobuf library usage requirements, available if
Protobuf library is found.
.TP
.B \fBprotobuf::libprotobuf\-lite\fP
Added in version 3.9.

.sp
Target encapsulating the \fBprotobuf\-lite\fP library usage requirements,
available if Protobuf and its lite library are found.
.TP
.B \fBprotobuf::libprotoc\fP
Added in version 3.9.

.sp
Target encapsulating the \fBprotoc\fP library usage requirements, available
if Protobuf and its \fBprotoc\fP library are found.
.TP
.B \fBprotobuf::protoc\fP
Added in version 3.10.

.sp
Imported executable target encapsulating the \fBprotoc\fP compiler usage
requirements, available if Protobuf and \fBprotoc\fP are found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBProtobuf_FOUND\fP
Boolean indicating whether (the requested version of) Protobuf library is
found.
.TP
.B \fBProtobuf_VERSION\fP
Added in version 3.6.

.sp
The version of Protobuf found.
.TP
.B \fBProtobuf_INCLUDE_DIRS\fP
Include directories needed to use Protobuf.
.TP
.B \fBProtobuf_LIBRARIES\fP
Libraries needed to link against to use Protobuf.
.TP
.B \fBProtobuf_PROTOC_LIBRARIES\fP
Libraries needed to link against to use the \fBprotoc\fP library.
.TP
.B \fBProtobuf_LITE_LIBRARIES\fP
Libraries needed to link against to use the \fBprotobuf\-lite\fP library.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBProtobuf_INCLUDE_DIR\fP
The include directory containing Protobuf headers.
.TP
.B \fBProtobuf_LIBRARY\fP
The path to the \fBprotobuf\fP library.
.TP
.B \fBProtobuf_PROTOC_LIBRARY\fP
The path to the \fBprotoc\fP library.
.TP
.B \fBProtobuf_PROTOC_EXECUTABLE\fP
The path to the \fBprotoc\fP compiler.
.TP
.B \fBProtobuf_LIBRARY_DEBUG\fP
The path to the \fBprotobuf\fP debug library.
.TP
.B \fBProtobuf_PROTOC_LIBRARY_DEBUG\fP
The path to the \fBprotoc\fP debug library.
.TP
.B \fBProtobuf_LITE_LIBRARY\fP
The path to the \fBprotobuf\-lite\fP library.
.TP
.B \fBProtobuf_LITE_LIBRARY_DEBUG\fP
The path to the \fBprotobuf\-lite\fP debug library.
.TP
.B \fBProtobuf_SRC_ROOT_FOLDER\fP
When compiling with MSVC, if this cache variable is set, the
protobuf\-default Visual Studio project build locations will be searched for
libraries and binaries:
.INDENT 7.0
.IP \(bu 2
\fB<Protobuf_SRC_ROOT_FOLDER>/vsprojects/{Debug,Release}\fP, or
.IP \(bu 2
\fB<Protobuf_SRC_ROOT_FOLDER>/vsprojects/x64/{Debug,Release}\fP
.UNINDENT
.UNINDENT
.SS Hints
.sp
This module accepts the following optional variables before calling the
\fBfind_package(Protobuf)\fP:
.INDENT 0.0
.TP
.B \fBProtobuf_DEBUG\fP
Added in version 3.6.

.sp
Boolean variable that enables debug messages of this module to be printed
for debugging purposes.
.TP
.B \fBProtobuf_USE_STATIC_LIBS\fP
Added in version 3.9.

.sp
Set to ON to force the use of the static libraries.  Default is OFF.
.UNINDENT
.SS Commands
.sp
This module provides the following commands if Protobuf is found:
.SS Generating Source Files
.INDENT 0.0
.TP
.B protobuf_generate
Added in version 3.13.

.sp
Automatically generates source files from \fB\&.proto\fP schema files at build
time:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
protobuf_generate(
  [TARGET <target>]
  [LANGUAGE <lang>]
  [OUT_VAR <variable>]
  [EXPORT_MACRO <macro>]
  [PROTOC_OUT_DIR <out\-dir>]
  [PLUGIN <plugin>]
  [PLUGIN_OPTIONS <plugin\-options>]
  [DEPENDENCIES <dependencies>...]
  [PROTOS <proto\-files>...]
  [IMPORT_DIRS <dirs>...]
  [APPEND_PATH]
  [GENERATE_EXTENSIONS <extensions>...]
  [PROTOC_OPTIONS <options>...]
  [PROTOC_EXE <executable>]
  [DESCRIPTORS]
)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fBTARGET <target>\fP
The CMake target to which the generated files are added as sources.  This
option is required when \fBOUT_VAR <variable>\fP is not used.
.TP
.B \fBLANGUAGE <lang>\fP
A single value: \fBcpp\fP or \fBpython\fP\&.  Determines the kind of source
files to generate.  Defaults to \fBcpp\fP\&.  For other languages, use the
\fBGENERATE_EXTENSIONS\fP option.
.TP
.B \fBOUT_VAR <variable>\fP
The name of a CMake variable that will be populated with the paths to
the generated source files.
.TP
.B \fBEXPORT_MACRO <macro>\fP
The name of a preprocessor macro applied to all generated Protobuf message
classes and extern variables.  This can be used, for example, to declare
DLL exports.  The macro should expand to \fB__declspec(dllexport)\fP or
\fB__declspec(dllimport)\fP, depending on what is being compiled.
.sp
This option is only used when \fBLANGUAGE\fP is \fBcpp\fP\&.
.TP
.B \fBPROTOC_OUT_DIR <out\-dir>\fP
The output directory for generated source files.  Defaults to:
\fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
.TP
.B \fBPLUGIN <plugin>\fP
Added in version 3.21.

.sp
An optional plugin executable.  This could be, for example, the path to
\fBgrpc_cpp_plugin\fP\&.
.TP
.B \fBPLUGIN_OPTIONS <plugin\-options>\fP
Added in version 3.28.

.sp
Additional options passed to the plugin, such as \fBgenerate_mock_code=true\fP
for the gRPC C++ plugin.
.TP
.B \fBDEPENDENCIES <dependencies>...\fP
Added in version 3.28.

.sp
Dependencies on which the generation of files depends on.  These are
forwarded to the underlying \fI\%add_custom_command(DEPENDS)\fP
invocation.
.sp
Changed in version 4.1: This argument now accepts multiple values (\fBDEPENDENCIES a b c...\fP).
Previously, only a single value could be specified
(\fBDEPENDENCIES \(dqa;b;c;...\(dq\fP).

.TP
.B \fBPROTOS <proto\-files>...\fP
A list of \fB\&.proto\fP schema files to process.  If \fB<target>\fP is also
specified, these will be combined with all \fB\&.proto\fP source files from
that target.
.TP
.B \fBIMPORT_DIRS <dirs>...\fP
A list of one or more common parent directories for the schema files.
For example, if the schema file is \fBproto/helloworld/helloworld.proto\fP
and the import directory is \fBproto/\fP, then the generated files will be
\fB<out\-dir>/helloworld/helloworld.pb.h\fP and
\fB<out\-dir>/helloworld/helloworld.pb.cc\fP\&.
.TP
.B \fBAPPEND_PATH\fP
If specified, the base paths of all proto schema files are appended to
\fBIMPORT_DIRS\fP (it causes \fBprotoc\fP to be invoked with \fB\-I\fP argument
for each directory containing a \fB\&.proto\fP file).
.TP
.B \fBGENERATE_EXTENSIONS <extensions>...\fP
If \fBLANGUAGE\fP is omitted, this must be set to specify the extensions
generated by \fBprotoc\fP\&.
.TP
.B \fBPROTOC_OPTIONS <options>...\fP
Added in version 3.28.

.sp
A list of additional command\-line options passed directly to the
\fBprotoc\fP compiler.
.TP
.B \fBPROTOC_EXE <executable>\fP
Added in version 4.0.

.sp
The command\-line program, path, or CMake executable used to generate
Protobuf bindings.  If omitted, \fBprotobuf::protoc\fP imported target is
used by default.
.TP
.B \fBDESCRIPTORS\fP
If specified, a command\-line option \fB\-\-descriptor_set_out=<proto\-file>\fP
is appended to \fBprotoc\fP compiler for each \fB\&.proto\fP source file,
enabling the creation of self\-describing messages.  This option can only
be used when \fB<lang>\fP is \fBcpp\fP and Protobuf is found in \fImodule mode\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This option is not available when Protobuf is found in \fIconfig mode\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Deprecated Commands
.sp
The following commands are provided for backward compatibility.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fBprotobuf_generate_cpp()\fP and \fBprotobuf_generate_python()\fP
commands work correctly only within the same directory scope, where
\fBfind_package(Protobuf ...)\fP is called.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If Protobuf is found in \fIconfig mode\fP, the \fBprotobuf_generate_cpp()\fP and
\fBprotobuf_generate_python()\fP commands are \fBnot available\fP as of
Protobuf version 3.0.0, unless the upstream package configuration hint
variable \fBprotobuf_MODULE_COMPATIBLE\fP is set to boolean true before
calling \fBfind_package(Protobuf ...)\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B protobuf_generate_cpp
Deprecated since version 4.1: Use \fI\%protobuf_generate()\fP\&.

.sp
Automatically generates C++ source files from \fB\&.proto\fP schema files at
build time:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
protobuf_generate_cpp(
  <sources\-variable>
  <headers\-variable>
  [DESCRIPTORS <variable>]
  [EXPORT_MACRO <macro>]
  <proto\-files>...
)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<sources\-variable>\fP
Name of the variable to define, which will contain a list of generated
C++ source files.
.TP
.B \fB<headers\-variable>\fP
Name of the variable to define, which will contain a list of generated
header files.
.TP
.B \fBDESCRIPTORS <variable>\fP
Added in version 3.10.

.sp
Name of the variable to define, which will contain a list of generated
descriptor files if requested.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This option is not available when Protobuf is found in \fIconfig mode\fP\&.
.UNINDENT
.UNINDENT
.TP
.B \fBEXPORT_MACRO <macro>\fP
Name of a macro that should expand to \fB__declspec(dllexport)\fP or
\fB__declspec(dllimport)\fP, depending on what is being compiled.
.TP
.B \fB<proto\-files>...\fP
One of more \fB\&.proto\fP files to be processed.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B protobuf_generate_python
Deprecated since version 4.1: Use \fI\%protobuf_generate()\fP\&.

.sp
Added in version 3.4.

.sp
Automatically generates Python source files from \fB\&.proto\fP schema files at
build time:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
protobuf_generate_python(<python\-sources\-variable> <proto\-files>...)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<python\-sources\-variable>\fP
Name of the variable to define, which will contain a list of generated
Python source files.
.TP
.B \fB<proto\-files>...\fP
One or more \fB\&.proto\fP files to be processed.
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
The \fBprotobuf_generate_cpp()\fP and \fBprotobuf_generate_python()\fP commands
accept the following optional variables before being invoked:
.INDENT 0.0
.TP
.B \fBProtobuf_IMPORT_DIRS\fP
Deprecated since version 4.1.

.sp
A list of additional directories to search for imported \fB\&.proto\fP files.
.TP
.B \fBPROTOBUF_GENERATE_CPP_APPEND_PATH\fP
Deprecated since version 4.1: Use \fI\%protobuf_generate(APPEND_PATH)\fP command option.

.sp
A boolean variable that, if set to boolean true, causes \fBprotoc\fP to be
invoked with \fB\-I\fP argument for each directory containing a \fB\&.proto\fP
file.  By default, it is set to boolean true.
.UNINDENT
.SS Examples
.SS Examples: Finding Protobuf
.sp
Finding Protobuf library:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Protobuf and specifying a minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf 30)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Protobuf and making it required (if not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf REQUIRED)
.EE
.UNINDENT
.UNINDENT
.SS Example: Finding Protobuf in Config Mode
.sp
When Protobuf library is built and installed using its CMake\-based build
system, it can be found in \fIconfig mode\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf CONFIG)
.EE
.UNINDENT
.UNINDENT
.sp
However, some Protobuf installations might still not provide package
configuration file.  The following example shows, how to use the
\fI\%CMAKE_FIND_PACKAGE_PREFER_CONFIG\fP variable to find Protobuf in
\fIconfig mode\fP and falling back to \fImodule mode\fP if config file is not found:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)
find_package(Protobuf)
unset(CMAKE_FIND_PACKAGE_PREFER_CONFIG)
.EE
.UNINDENT
.UNINDENT
.SS Example: Using Protobuf
.sp
Finding Protobuf and linking its imported library target to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf)
target_link_libraries(example PRIVATE protobuf::libprotobuf)
.EE
.UNINDENT
.UNINDENT
.SS Example: Processing Proto Schema Files
.sp
The following example demonstrates how to process all \fB*.proto\fP schema
source files added to a target into C++ source files:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cmake_minimum_required(VERSION 3.24)
project(ProtobufExample)

add_executable(example main.cxx person.proto)

find_package(Protobuf)

if(Protobuf_FOUND)
  protobuf_generate(TARGET example)
endif()

target_link_libraries(example PRIVATE protobuf::libprotobuf)
target_include_directories(example PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
.EE
.UNINDENT
.UNINDENT
.sp
\fBperson.proto\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
syntax = \(dqproto3\(dq;

message Person {
  string name = 1;
  int32 id = 2;
}
.EE
.UNINDENT
.UNINDENT
.sp
\fBmain.cxx\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <iostream>
#include \(dqperson.pb.h\(dq

int main()
{
  Person person;
  person.set_name(\(dqAlice\(dq);
  person.set_id(123);

  std::cout << \(dqName: \(dq << person.name() << \(dq\en\(dq;
  std::cout << \(dqID: \(dq << person.id() << \(dq\en\(dq;

  return 0;
}
.EE
.UNINDENT
.UNINDENT
.SS Example: Using Protobuf and gRPC
.sp
The following example shows how to use Protobuf and gRPC:
.sp
\fBCMakeLists.txt\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf REQUIRED)
find_package(gRPC CONFIG REQUIRED)

add_library(ProtoExample Example.proto)
target_link_libraries(ProtoExample PUBLIC gRPC::grpc++)

protobuf_generate(TARGET ProtoExample)
protobuf_generate(
  TARGET ProtoExample
  LANGUAGE grpc
  PLUGIN protoc\-gen\-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>
  PLUGIN_OPTIONS generate_mock_code=true
  GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
)
.EE
.UNINDENT
.UNINDENT
.SS Examples: Upgrading Deprecated Commands
.sp
The following example shows how to process \fB\&.proto\fP files to C++ code,
using a deprecated command and its modern replacement:
.sp
\fBCMakeLists.txt\fP with deprecated command
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf)

if(Protobuf_FOUND)
  protobuf_generate_cpp(
    proto_sources
    proto_headers
    EXPORT_MACRO DLL_EXPORT
    DESCRIPTORS proto_descriptors
    src/protocol/Proto1.proto
    src/protocol/Proto2.proto
  )
endif()

target_sources(
  example
  PRIVATE ${proto_sources} ${proto_headers} ${proto_descriptors}
)
target_link_libraries(example PRIVATE protobuf::libprotobuf)
.EE
.UNINDENT
.UNINDENT
.sp
\fBCMakeLists.txt\fP with upgraded code
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf)

if(Protobuf_FOUND)
  protobuf_generate(
    TARGET example
    EXPORT_MACRO DLL_EXPORT
    IMPORT_DIRS src/protocol
    DESCRIPTORS
    PROTOS
      src/protocol/Proto1.proto
      src/protocol/Proto2.proto
  )
endif()

target_link_libraries(example PRIVATE protobuf::libprotobuf)
.EE
.UNINDENT
.UNINDENT
.sp
The following example shows how to process \fB\&.proto\fP files to Python code,
using a deprecated command and its modern replacement:
.sp
\fBCMakeLists.txt\fP with deprecated command
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf)

if(Protobuf_FOUND)
  protobuf_generate_python(python_sources foo.proto)
endif()

add_custom_target(proto_files DEPENDS ${python_sources})
.EE
.UNINDENT
.UNINDENT
.sp
\fBCMakeLists.txt\fP with upgraded code
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Protobuf)

if(Protobuf_FOUND)
  protobuf_generate(
    LANGUAGE python
    PROTOS foo.proto
    OUT_VAR python_sources
  )
endif()

add_custom_target(proto_files DEPENDS ${python_sources})
.EE
.UNINDENT
.UNINDENT
.SS FindPython
.sp
Added in version 3.12.

.sp
Find Python interpreter, compiler and development environment (include
directories and libraries).
.sp
Added in version 3.19: When a version is requested, it can be specified as a simple value or as a
range. For a detailed description of version range usage and capabilities,
refer to the \fI\%find_package()\fP command.

.sp
The following components are supported:
.INDENT 0.0
.IP \(bu 2
\fBInterpreter\fP: search for Python interpreter.
.IP \(bu 2
\fBCompiler\fP: search for Python compiler. Only offered by IronPython.
.IP \(bu 2
\fBDevelopment\fP: search for development artifacts (include directories and
libraries).
.sp
Added in version 3.18: This component includes two sub\-components which can be specified
independently:
.INDENT 2.0
.IP \(bu 2
\fBDevelopment.Module\fP: search for artifacts for Python module
developments.
.IP \(bu 2
\fBDevelopment.Embed\fP: search for artifacts for Python embedding
developments.
.UNINDENT

.sp
Added in version 3.26: 
.INDENT 2.0
.IP \(bu 2
\fBDevelopment.SABIModule\fP: search for artifacts for Python module
developments using the
\X'tty: link https://docs.python.org/3/c-api/stable.html'\fI\%Stable Application Binary Interface\fP\X'tty: link'\&.
This component is available only for version \fB3.2\fP and upper.
.UNINDENT

.IP \(bu 2
\fBNumPy\fP: search for NumPy include directories.
.UNINDENT
.sp
Added in version 3.14: Added the \fBNumPy\fP component.

.sp
If no \fBCOMPONENTS\fP are specified, \fBInterpreter\fP is assumed.
.sp
If component \fBDevelopment\fP is specified, it implies sub\-components
\fBDevelopment.Module\fP and \fBDevelopment.Embed\fP\&.
.sp
Changed in version 4.1: In a cross\-compiling mode (i.e. the \fI\%CMAKE_CROSSCOMPILING\fP variable
is defined to true), the following constraints, when the policy
\fI\%CMP0190\fP is set to \fBNEW\fP, now apply to the requested components:
.INDENT 0.0
.IP \(bu 2
\fBInterpreter\fP or \fBCompiler\fP alone: the host artifacts will be searched.
.IP \(bu 2
\fBInterpreter\fP or \fBCompiler\fP with \fBDevelopment\fP or any sub\-component:
The target artifacts will be searched. In this case, the
\fI\%CMAKE_CROSSCOMPILING_EMULATOR\fP variable must be defined and will
be used to execute the interpreter or the compiler.
.UNINDENT
.sp
When both host and target artifacts are needed, two different calls to the
\fI\%find_package()\fP command should be done. The
\fBPython_ARTIFACTS_PREFIX\fP variable can be helpful in this situation.

.sp
To ensure consistent versions between components \fBInterpreter\fP, \fBCompiler\fP,
\fBDevelopment\fP (or one of its sub\-components) and \fBNumPy\fP, specify all
components at the same time:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package (Python COMPONENTS Interpreter Development)
.EE
.UNINDENT
.UNINDENT
.sp
This module looks preferably for version 3 of Python. If not found, version 2
is searched.
To manage concurrent versions 3 and 2 of Python, use \fI\%FindPython3\fP and
\fI\%FindPython2\fP modules rather than this one.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If components \fBInterpreter\fP and \fBDevelopment\fP (or one of its
sub\-components) are both specified, this module search only for interpreter
with same platform architecture as the one defined by CMake
configuration. This constraint does not apply if only \fBInterpreter\fP
component is specified.
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module defines the following \fI\%Imported Targets\fP:
.sp
Changed in version 3.14: \fI\%Imported Targets\fP are only created when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP\&.

.INDENT 0.0
.TP
.B \fBPython::Interpreter\fP
Python interpreter. This target is defined only if the \fBInterpreter\fP
component is found.
.TP
.B \fBPython::InterpreterDebug\fP
Added in version 3.30.

.sp
Python debug interpreter. This target is defined only if the \fBInterpreter\fP
component is found and the \fBPython_EXECUTABLE_DEBUG\fP variable is defined.
The target is only defined on the \fBWindows\fP platform.
.TP
.B \fBPython::InterpreterMultiConfig\fP
Added in version 3.30.

.sp
Python interpreter. The release or debug version of the interpreter will be
used, based on the context (platform, configuration).
This target is defined only if the \fBInterpreter\fP component is found
.TP
.B \fBPython::Compiler\fP
Python compiler. This target is defined only if the \fBCompiler\fP component is
found.
.TP
.B \fBPython::Module\fP
Added in version 3.15.

.sp
Python library for Python module. Target defined if component
\fBDevelopment.Module\fP is found.
.TP
.B \fBPython::SABIModule\fP
Added in version 3.26.

.sp
Python library for Python module using the Stable Application Binary
Interface. Target defined if component \fBDevelopment.SABIModule\fP is found.
.TP
.B \fBPython::Python\fP
Python library for Python embedding. Target defined if component
\fBDevelopment.Embed\fP is found.
.TP
.B \fBPython::NumPy\fP
Added in version 3.14.

.sp
NumPy Python library. Target defined if component \fBNumPy\fP is found.
.UNINDENT
.SS Result Variables
.sp
This module will set the following variables in your project
(see \fI\%Standard Variable Names\fP):
.INDENT 0.0
.TP
.B \fBPython_FOUND\fP
System has the Python requested components.
.TP
.B \fBPython_Interpreter_FOUND\fP
System has the Python interpreter.
.TP
.B \fBPython_EXECUTABLE\fP
Path to the Python interpreter.
.TP
.B \fBPython_EXECUTABLE_DEBUG\fP
Added in version 3.30.

.sp
Path to the debug Python interpreter. It is only defined on the \fBWindows\fP
platform.
.TP
.B \fBPython_INTERPRETER\fP
Added in version 3.30.

.sp
Path to the Python interpreter, defined as a
\fI\%generator expression\fP selecting
the \fBPython_EXECUTABLE\fP or \fBPython_EXECUTABLE_DEBUG\fP variable based on
the context (platform, configuration).
.TP
.B \fBPython_INTERPRETER_ID\fP
.INDENT 7.0
.TP
.B A short string unique to the interpreter. Possible values include:
.INDENT 7.0
.IP \(bu 2
Python
.IP \(bu 2
ActivePython
.IP \(bu 2
Anaconda
.IP \(bu 2
Canopy
.IP \(bu 2
IronPython
.IP \(bu 2
PyPy
.UNINDENT
.UNINDENT
.TP
.B \fBPython_STDLIB\fP
Standard platform independent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqstdlib\(aq)\fP\&.
.TP
.B \fBPython_STDARCH\fP
Standard platform dependent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqplatstdlib\(aq)\fP\&.
.TP
.B \fBPython_SITELIB\fP
Third\-party platform independent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqpurelib\(aq)\fP\&.
.TP
.B \fBPython_SITEARCH\fP
Third\-party platform dependent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqplatlib\(aq)\fP\&.
.TP
.B \fBPython_SOABI\fP
Added in version 3.17.

.sp
Extension suffix for modules.
.sp
Information computed from \fBsysconfig.get_config_var(\(aqEXT_SUFFIX\(aq)\fP or
\fBsysconfig.get_config_var(\(aqSOABI\(aq)\fP or
\fBpython3\-config \-\-extension\-suffix\fP\&.
.TP
.B \fBPython_SOSABI\fP
Added in version 3.26.

.sp
Extension suffix for modules using the Stable Application Binary Interface.
.sp
Information computed from \fBimportlib.machinery.EXTENSION_SUFFIXES\fP if the
COMPONENT \fBInterpreter\fP was specified. Otherwise, the extension is \fBabi3\fP
except for \fBWindows\fP, \fBMSYS\fP and \fBCYGWIN\fP for which this is an empty
string.
.TP
.B \fBPython_Compiler_FOUND\fP
System has the Python compiler.
.TP
.B \fBPython_COMPILER\fP
Path to the Python compiler. Only offered by IronPython.
.TP
.B \fBPython_COMPILER_ID\fP
.INDENT 7.0
.TP
.B A short string unique to the compiler. Possible values include:
.INDENT 7.0
.IP \(bu 2
IronPython
.UNINDENT
.UNINDENT
.TP
.B \fBPython_DOTNET_LAUNCHER\fP
Added in version 3.18.

.sp
The \fB\&.Net\fP interpreter. Only used by \fBIronPython\fP implementation.
.TP
.B \fBPython_Development_FOUND\fP
System has the Python development artifacts.
.TP
.B \fBPython_Development.Module_FOUND\fP
Added in version 3.18.

.sp
System has the Python development artifacts for Python module.
.TP
.B \fBPython_Development.SABIModule_FOUND\fP
Added in version 3.26.

.sp
System has the Python development artifacts for Python module using the
Stable Application Binary Interface.
.TP
.B \fBPython_Development.Embed_FOUND\fP
Added in version 3.18.

.sp
System has the Python development artifacts for Python embedding.
.UNINDENT
.sp
\fBPython_INCLUDE_DIRS\fP
.INDENT 0.0
.INDENT 3.5
The Python include directories.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fBPython_DEFINITIONS\fP
Added in version 3.30.3.

.sp
The Python preprocessor definitions.
.TP
.B \fBPython_DEBUG_POSTFIX\fP
Added in version 3.30.

.sp
Postfix of debug python module. This variable can be used to define the
\fI\%DEBUG_POSTFIX\fP target property.
.TP
.B \fBPython_LINK_OPTIONS\fP
Added in version 3.19.

.sp
The Python link options. Some configurations require specific link options
for a correct build and execution.
.TP
.B \fBPython_LIBRARIES\fP
The Python libraries.
.TP
.B \fBPython_LIBRARY_DIRS\fP
The Python library directories.
.TP
.B \fBPython_RUNTIME_LIBRARY_DIRS\fP
The Python runtime library directories.
.TP
.B \fBPython_SABI_LIBRARIES\fP
Added in version 3.26.

.sp
The Python libraries for the Stable Application Binary Interface.
.TP
.B \fBPython_SABI_LIBRARY_DIRS\fP
Added in version 3.26.

.sp
The Python \fBSABI\fP library directories.
.TP
.B \fBPython_RUNTIME_SABI_LIBRARY_DIRS\fP
Added in version 3.26.

.sp
The Python runtime \fBSABI\fP library directories.
.TP
.B \fBPython_VERSION\fP
Python version.
.TP
.B \fBPython_VERSION_MAJOR\fP
Python major version.
.TP
.B \fBPython_VERSION_MINOR\fP
Python minor version.
.TP
.B \fBPython_VERSION_PATCH\fP
Python patch version.
.TP
.B \fBPython_PyPy_VERSION\fP
Added in version 3.18.

.sp
Python PyPy version.
.TP
.B \fBPython_NumPy_FOUND\fP
Added in version 3.14.

.sp
System has the NumPy.
.TP
.B \fBPython_NumPy_INCLUDE_DIRS\fP
Added in version 3.14.

.sp
The NumPy include directories.
.TP
.B \fBPython_NumPy_VERSION\fP
Added in version 3.14.

.sp
The NumPy version.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBPython_ROOT_DIR\fP
Define the root directory of a Python installation.
.TP
.B \fBPython_USE_STATIC_LIBS\fP
.INDENT 7.0
.IP \(bu 2
If not defined, search for shared libraries and static libraries in that
order.
.IP \(bu 2
If set to TRUE, search \fBonly\fP for static libraries.
.IP \(bu 2
If set to FALSE, search \fBonly\fP for shared libraries.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint will be ignored on \fBWindows\fP because static libraries are not
available on this platform.
.UNINDENT
.UNINDENT
.TP
.B \fBPython_FIND_ABI\fP
Added in version 3.16.

.sp
This variable defines which ABIs, as defined in \X'tty: link https://peps.python.org/pep-3149/'\fI\%PEP 3149\fP\X'tty: link', should be
searched.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint will be honored only when searched for \fBPython\fP version 3.
.UNINDENT
.UNINDENT
.sp
The \fBPython_FIND_ABI\fP variable is a 4\-tuple specifying, in that order,
\fBpydebug\fP (\fBd\fP), \fBpymalloc\fP (\fBm\fP), \fBunicode\fP (\fBu\fP) and
\fBgil_disabled\fP (\fBt\fP) flags.
.sp
Added in version 3.30: A fourth element, specifying the \fBgil_disabled\fP flag (i.e. free
threaded python), is added and is optional. If not specified, the value is
\fBOFF\fP\&.

.sp
Each element can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBON\fP: Corresponding flag is selected.
.IP \(bu 2
\fBOFF\fP: Corresponding flag is not selected.
.IP \(bu 2
\fBANY\fP: The two possibilities (\fBON\fP and \fBOFF\fP) will be searched.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If \fBPython3_FIND_ABI\fP is not defined, any ABI, excluding the
\fBgil_disabled\fP flag, will be searched.
.UNINDENT
.UNINDENT
.sp
From this 4\-tuple, various ABIs will be searched starting from the most
specialized to the most general. Moreover, when \fBANY\fP is specified for
\fBpydebug\fP and \fBgil_disabled\fP, \fBdebug\fP and \fBfree threaded\fP versions
will be searched \fBafter\fP \fBnon\-debug\fP and \fBnon\-gil\-disabled\fP ones.
.sp
For example, if we have:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set (Python_FIND_ABI \(dqON\(dq \(dqANY\(dq \(dqANY\(dq \(dqON\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The following flags combinations will be appended, in that order, to the
artifact names: \fBtdmu\fP, \fBtdm\fP, \fBtdu\fP, and \fBtd\fP\&.
.sp
And to search any possible ABIs:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set (Python_FIND_ABI \(dqANY\(dq \(dqANY\(dq \(dqANY\(dq \(dqANY\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The following combinations, in that order, will be used: \fBmu\fP, \fBm\fP,
\fBu\fP, \fB<empty>\fP, \fBdmu\fP, \fBdm\fP, \fBdu\fP, \fBd\fP, \fBtmu\fP, \fBtm\fP, \fBtu\fP,
\fBt\fP, \fBtdmu\fP, \fBtdm\fP, \fBtdu\fP, and \fBtd\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint is useful only on \fBPOSIX\fP systems except for the
\fBgil_disabled\fP flag. So, on \fBWindows\fP systems,
when \fBPython_FIND_ABI\fP is defined, \fBPython\fP distributions from
\X'tty: link https://www.python.org/'\fI\%python.org\fP\X'tty: link' will be found only if the value for
each flag is \fBOFF\fP or \fBANY\fP except for the fourth one
(\fBgil_disabled\fP).
.UNINDENT
.UNINDENT
.TP
.B \fBPython_FIND_STRATEGY\fP
Added in version 3.15.

.sp
This variable defines how lookup will be done.
The \fBPython_FIND_STRATEGY\fP variable can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBVERSION\fP: Try to find the most recent version in all specified
locations.
This is the default if policy \fI\%CMP0094\fP is undefined or set to
\fBOLD\fP\&.
.IP \(bu 2
\fBLOCATION\fP: Stops lookup as soon as a version satisfying version
constraints is founded.
This is the default if policy \fI\%CMP0094\fP is set to \fBNEW\fP\&.
.UNINDENT
.sp
See also \fBPython_FIND_UNVERSIONED_NAMES\fP\&.
.TP
.B \fBPython_FIND_REGISTRY\fP
Added in version 3.13.

.sp
On Windows the \fBPython_FIND_REGISTRY\fP variable determine the order
of preference between registry and environment variables.
the \fBPython_FIND_REGISTRY\fP variable can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: Try to use registry before environment variables.
This is the default.
.IP \(bu 2
\fBLAST\fP: Try to use registry after environment variables.
.IP \(bu 2
\fBNEVER\fP: Never try to use registry.
.UNINDENT
.TP
.B \fBPython_FIND_FRAMEWORK\fP
Added in version 3.15.

.sp
On macOS the \fBPython_FIND_FRAMEWORK\fP variable determine the order of
preference between Apple\-style and unix\-style package components.
This variable can take same values as \fI\%CMAKE_FIND_FRAMEWORK\fP
variable.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Value \fBONLY\fP is not supported so \fBFIRST\fP will be used instead.
.UNINDENT
.UNINDENT
.sp
If \fBPython_FIND_FRAMEWORK\fP is not defined, \fI\%CMAKE_FIND_FRAMEWORK\fP
variable will be used, if any.
.TP
.B \fBPython_FIND_VIRTUALENV\fP
Added in version 3.15.

.sp
This variable defines the handling of virtual environments managed by
\fBvirtualenv\fP or \fBconda\fP\&. It is meaningful only when a virtual environment
is active (i.e. the \fBactivate\fP script has been evaluated). In this case, it
takes precedence over \fBPython_FIND_REGISTRY\fP and \fBCMAKE_FIND_FRAMEWORK\fP
variables.  The \fBPython_FIND_VIRTUALENV\fP variable can be set to one of the
following:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: The virtual environment is used before any other standard
paths to look\-up for the interpreter. This is the default.
.IP \(bu 2
\fBONLY\fP: Only the virtual environment is used to look\-up for the
interpreter.
.IP \(bu 2
\fBSTANDARD\fP: The virtual environment is not used to look\-up for the
interpreter but environment variable \fBPATH\fP is always considered.
In this case, variable \fBPython_FIND_REGISTRY\fP (Windows) or
\fBCMAKE_FIND_FRAMEWORK\fP (macOS) can be set with value \fBLAST\fP or
\fBNEVER\fP to select preferably the interpreter from the virtual
environment.
.UNINDENT
.sp
Added in version 3.17: Added support for \fBconda\fP environments.

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the component \fBDevelopment\fP is requested (or one of its
sub\-components) and is not found or the wrong artifacts are returned,
including also the component \fBInterpreter\fP may be helpful.
.UNINDENT
.UNINDENT
.TP
.B \fBPython_FIND_IMPLEMENTATIONS\fP
Added in version 3.18.

.sp
This variable defines, in an ordered list, the different implementations
which will be searched. The \fBPython_FIND_IMPLEMENTATIONS\fP variable can
hold the following values:
.INDENT 7.0
.IP \(bu 2
\fBCPython\fP: this is the standard implementation. Various products, like
\fBAnaconda\fP or \fBActivePython\fP, rely on this implementation.
.IP \(bu 2
\fBIronPython\fP: This implementation use the \fBCSharp\fP language for
\fB\&.NET Framework\fP on top of the \fIDynamic Language Runtime\fP (\fBDLR\fP).
See \X'tty: link https://ironpython.net'\fI\%IronPython\fP\X'tty: link'\&.
.IP \(bu 2
\fBPyPy\fP: This implementation use \fBRPython\fP language and
\fBRPython translation toolchain\fP to produce the python interpreter.
See \X'tty: link https://pypy.org'\fI\%PyPy\fP\X'tty: link'\&.
.UNINDENT
.sp
The default value is:
.INDENT 7.0
.IP \(bu 2
Windows platform: \fBCPython\fP, \fBIronPython\fP
.IP \(bu 2
Other platforms: \fBCPython\fP
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint has the lowest priority of all hints, so even if, for example,
you specify \fBIronPython\fP first and \fBCPython\fP in second, a python
product based on \fBCPython\fP can be selected because, for example with
\fBPython_FIND_STRATEGY=LOCATION\fP, each location will be search first for
\fBIronPython\fP and second for \fBCPython\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When \fBIronPython\fP is specified, on platforms other than \fBWindows\fP, the
\fB\&.Net\fP interpreter (i.e. \fBmono\fP command) is expected to be available
through the \fBPATH\fP variable.
.UNINDENT
.UNINDENT
.TP
.B \fBPython_FIND_UNVERSIONED_NAMES\fP
Added in version 3.20.

.sp
This variable defines how the generic names will be searched. Currently, it
only applies to the generic names of the interpreter, namely, \fBpython3\fP or
\fBpython2\fP and \fBpython\fP\&.
The \fBPython_FIND_UNVERSIONED_NAMES\fP variable can be set to one of the
following values:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: The generic names are searched before the more specialized ones
(such as \fBpython2.5\fP for example).
.IP \(bu 2
\fBLAST\fP: The generic names are searched after the more specialized ones.
This is the default.
.IP \(bu 2
\fBNEVER\fP: The generic name are not searched at all.
.UNINDENT
.sp
See also \fBPython_FIND_STRATEGY\fP\&.
.UNINDENT
.SS Artifacts Specification
.sp
Added in version 3.16.

.sp
To solve special cases, it is possible to specify directly the artifacts by
setting the following variables:
.INDENT 0.0
.TP
.B \fBPython_EXECUTABLE\fP
The path to the interpreter.
.TP
.B \fBPython_COMPILER\fP
The path to the compiler.
.TP
.B \fBPython_DOTNET_LAUNCHER\fP
Added in version 3.18.

.sp
The \fB\&.Net\fP interpreter. Only used by \fBIronPython\fP implementation.
.TP
.B \fBPython_LIBRARY\fP
The path to the library. It will be used to compute the
variables \fBPython_LIBRARIES\fP, \fBPython_LIBRARY_DIRS\fP and
\fBPython_RUNTIME_LIBRARY_DIRS\fP\&.
.TP
.B \fBPython_SABI_LIBRARY\fP
Added in version 3.26.

.sp
The path to the library for Stable Application Binary Interface. It will be
used to compute the variables \fBPython_SABI_LIBRARIES\fP,
\fBPython_SABI_LIBRARY_DIRS\fP and \fBPython_RUNTIME_SABI_LIBRARY_DIRS\fP\&.
.TP
.B \fBPython_INCLUDE_DIR\fP
The path to the directory of the \fBPython\fP headers. It will be used to
compute the variable \fBPython_INCLUDE_DIRS\fP\&.
.TP
.B \fBPython_NumPy_INCLUDE_DIR\fP
The path to the directory of the \fBNumPy\fP headers. It will be used to
compute the variable \fBPython_NumPy_INCLUDE_DIRS\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
All paths must be absolute. Any artifact specified with a relative path
will be ignored.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When an artifact is specified, all \fBHINTS\fP will be ignored and no search
will be performed for this artifact.
.sp
If more than one artifact is specified, it is the user\(aqs responsibility to
ensure the consistency of the various artifacts.
.UNINDENT
.UNINDENT
.sp
By default, this module supports multiple calls in different directories of a
project with different version/component requirements while providing correct
and consistent results for each call. To support this behavior, CMake cache
is not used in the traditional way which can be problematic for interactive
specification. So, to enable also interactive specification, module behavior
can be controlled with the following variable:
.INDENT 0.0
.TP
.B \fBPython_ARTIFACTS_INTERACTIVE\fP
Added in version 3.18.

.sp
Selects the behavior of the module. This is a boolean variable:
.INDENT 7.0
.IP \(bu 2
If set to \fBTRUE\fP: Create CMake cache entries for the above artifact
specification variables so that users can edit them interactively.
This disables support for multiple version/component requirements.
.IP \(bu 2
If set to \fBFALSE\fP or undefined: Enable multiple version/component
requirements.
.UNINDENT
.TP
.B \fBPython_ARTIFACTS_PREFIX\fP
Added in version 4.0.

.sp
Define a custom prefix which will be used for the definition of all the
result variables, targets, and commands. By using this variable, this module
supports multiple calls in the same directory with different
version/component requirements.
For example, in case of cross\-compilation, development components are needed
but the native python interpreter can also be required:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(Python COMPONENTS Development)

set(Python_ARTIFACTS_PREFIX \(dq_HOST\(dq)
find_package(Python COMPONENTS Interpreter)

# Here Python_HOST_EXECUTABLE and Python_HOST::Interpreter artifacts are defined
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
For consistency with standard behavior of modules, the various standard
\fB_FOUND\fP variables (i.e. without the custom prefix) are also defined by
each call to the \fI\%find_package()\fP command.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module defines the command \fBPython_add_library\fP (when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP), which has the same semantics as
\fI\%add_library()\fP and adds a dependency to target \fBPython::Python\fP or,
when library type is \fBMODULE\fP, to target \fBPython::Module\fP or
\fBPython::SABIModule\fP (when \fBUSE_SABI\fP option is specified) and takes care
of Python module naming rules:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Python_add_library (<name> [STATIC | SHARED | MODULE [USE_SABI <version>] [WITH_SOABI]]
                    <source1> [<source2> ...])
.EE
.UNINDENT
.UNINDENT
.sp
If the library type is not specified, \fBMODULE\fP is assumed.
.sp
Added in version 3.17: For \fBMODULE\fP library type, if option \fBWITH_SOABI\fP is specified, the
module suffix will include the \fBPython_SOABI\fP value, if any.

.sp
Added in version 3.26: For \fBMODULE\fP type, if the option \fBUSE_SABI\fP is specified, the
preprocessor definition \fBPy_LIMITED_API\fP will be specified, as \fBPRIVATE\fP,
for the target \fB<name>\fP with the value computed from \fB<version>\fP argument.
The expected format for \fB<version>\fP is \fBmajor[.minor]\fP, where each
component is a numeric value. If \fBminor\fP component is specified, the
version should be, at least, \fB3.2\fP which is the version where the
\X'tty: link https://docs.python.org/3/c-api/stable.html'\fI\%Stable Application Binary Interface\fP\X'tty: link'
was introduced. Specifying only major version \fB3\fP is equivalent to \fB3.2\fP\&.
.sp
When option \fBWITH_SOABI\fP is also specified,  the module suffix will include
the \fBPython_SOSABI\fP value, if any.

.sp
Added in version 3.30: For \fBMODULE\fP type, the \fI\%DEBUG_POSTFIX\fP target property is
initialized with the value of \fBPython_DEBUG_POSTFIX\fP variable if defined.

.SS FindPython2
.sp
Added in version 3.12.

.sp
Find Python 2 interpreter, compiler and development environment (include
directories and libraries).
.sp
Added in version 3.19: When a version is requested, it can be specified as a simple value or as a
range. For a detailed description of version range usage and capabilities,
refer to the \fI\%find_package()\fP command.

.sp
The following components are supported:
.INDENT 0.0
.IP \(bu 2
\fBInterpreter\fP: search for Python 2 interpreter
.IP \(bu 2
\fBCompiler\fP: search for Python 2 compiler. Only offered by IronPython.
.IP \(bu 2
\fBDevelopment\fP: search for development artifacts (include directories and
libraries).
.sp
Added in version 3.18: This component includes two sub\-components which can be specified
independently:
.INDENT 2.0
.IP \(bu 2
\fBDevelopment.Module\fP: search for artifacts for Python 2 module
developments.
.IP \(bu 2
\fBDevelopment.Embed\fP: search for artifacts for Python 2 embedding
developments.
.UNINDENT

.IP \(bu 2
\fBNumPy\fP: search for NumPy include directories.
.UNINDENT
.sp
Added in version 3.14: Added the \fBNumPy\fP component.

.sp
If no \fBCOMPONENTS\fP are specified, \fBInterpreter\fP is assumed.
.sp
If component \fBDevelopment\fP is specified, it implies sub\-components
\fBDevelopment.Module\fP and \fBDevelopment.Embed\fP\&.
.sp
Changed in version 4.1: In a cross\-compiling mode (i.e. the \fI\%CMAKE_CROSSCOMPILING\fP variable
is defined to true), the following constraints, when the policy
\fI\%CMP0190\fP is set to \fBNEW\fP, now apply to the requested components:
.INDENT 0.0
.IP \(bu 2
\fBInterpreter\fP or \fBCompiler\fP alone: the host artifacts will be searched.
.IP \(bu 2
\fBInterpreter\fP or \fBCompiler\fP with \fBDevelopment\fP or any sub\-component:
The target artifacts will be searched. In this case, the
\fI\%CMAKE_CROSSCOMPILING_EMULATOR\fP variable must be defined and will
be used to execute the interpreter or the compiler.
.UNINDENT
.sp
When both host and target artifacts are needed, two different calls to the
\fI\%find_package()\fP command should be done. The
\fBPython_ARTIFACTS_PREFIX\fP variable can be helpful in this situation.

.sp
To ensure consistent versions between components \fBInterpreter\fP, \fBCompiler\fP,
\fBDevelopment\fP (or one of its sub\-components) and \fBNumPy\fP, specify all
components at the same time:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package (Python2 COMPONENTS Interpreter Development)
.EE
.UNINDENT
.UNINDENT
.sp
This module looks only for version 2 of Python. This module can be used
concurrently with \fI\%FindPython3\fP module to use both Python versions.
.sp
The \fI\%FindPython\fP module can be used if Python version does not matter
for you.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If components \fBInterpreter\fP and \fBDevelopment\fP (or one of its
sub\-components) are both specified, this module search only for interpreter
with same platform architecture as the one defined by CMake
configuration. This constraint does not apply if only \fBInterpreter\fP
component is specified.
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module defines the following \fI\%Imported Targets\fP:
.sp
Changed in version 3.14: \fI\%Imported Targets\fP are only created when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP\&.

.INDENT 0.0
.TP
.B \fBPython2::Interpreter\fP
Python 2 interpreter. This target is defined only if the \fBInterpreter\fP
component is found.
.TP
.B \fBPython2::InterpreterDebug\fP
Added in version 3.30.

.sp
Python 2 debug interpreter. This target is defined only if the
\fBInterpreter\fP component is found and the \fBPython2_EXECUTABLE_DEBUG\fP
variable is defined. The target is only defined on the \fBWindows\fP platform.
.TP
.B \fBPython2::InterpreterMultiConfig\fP
Added in version 3.30.

.sp
Python 2 interpreter. The release or debug version of the interpreter will be
used, based on the context (platform, configuration).
This target is defined only if the \fBInterpreter\fP component is found
.TP
.B \fBPython2::Compiler\fP
Python 2 compiler. This target is defined only if the \fBCompiler\fP component
is found.
.TP
.B \fBPython2::Module\fP
Added in version 3.15.

.sp
Python 2 library for Python module. Target defined if component
\fBDevelopment.Module\fP is found.
.TP
.B \fBPython2::Python\fP
Python 2 library for Python embedding. Target defined if component
\fBDevelopment.Embed\fP is found.
.TP
.B \fBPython2::NumPy\fP
Added in version 3.14.

.sp
NumPy library for Python 2. Target defined if component \fBNumPy\fP is found.
.UNINDENT
.SS Result Variables
.sp
This module will set the following variables in your project
(see \fI\%Standard Variable Names\fP):
.INDENT 0.0
.TP
.B \fBPython2_FOUND\fP
System has the Python 2 requested components.
.TP
.B \fBPython2_Interpreter_FOUND\fP
System has the Python 2 interpreter.
.TP
.B \fBPython2_EXECUTABLE\fP
Path to the Python 2 interpreter.
.TP
.B \fBPython2_EXECUTABLE_DEBUG\fP
Added in version 3.30.

.sp
Path to the debug Python 2 interpreter. It is only defined on the \fBWindows\fP
platform.
.TP
.B \fBPython2_INTERPRETER\fP
Added in version 3.30.

.sp
Path to the Python 2 interpreter, defined as a
\fI\%generator expression\fP selecting
the \fBPython2_EXECUTABLE\fP or \fBPython2_EXECUTABLE_DEBUG\fP variable based on
the context (platform, configuration).
.TP
.B \fBPython2_INTERPRETER_ID\fP
.INDENT 7.0
.TP
.B A short string unique to the interpreter. Possible values include:
.INDENT 7.0
.IP \(bu 2
Python
.IP \(bu 2
ActivePython
.IP \(bu 2
Anaconda
.IP \(bu 2
Canopy
.IP \(bu 2
IronPython
.IP \(bu 2
PyPy
.UNINDENT
.UNINDENT
.TP
.B \fBPython2_STDLIB\fP
Standard platform independent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqstdlib\(aq)\fP or else
\fBdistutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=True)\fP\&.
.TP
.B \fBPython2_STDARCH\fP
Standard platform dependent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqplatstdlib\(aq)\fP or else
\fBdistutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=True)\fP\&.
.TP
.B \fBPython2_SITELIB\fP
Third\-party platform independent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqpurelib\(aq)\fP or else
\fBdistutils.sysconfig.get_python_lib(plat_specific=False,standard_lib=False)\fP\&.
.TP
.B \fBPython2_SITEARCH\fP
Third\-party platform dependent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqplatlib\(aq)\fP or else
\fBdistutils.sysconfig.get_python_lib(plat_specific=True,standard_lib=False)\fP\&.
.TP
.B \fBPython2_Compiler_FOUND\fP
System has the Python 2 compiler.
.TP
.B \fBPython2_COMPILER\fP
Path to the Python 2 compiler. Only offered by IronPython.
.TP
.B \fBPython2_COMPILER_ID\fP
.INDENT 7.0
.TP
.B A short string unique to the compiler. Possible values include:
.INDENT 7.0
.IP \(bu 2
IronPython
.UNINDENT
.UNINDENT
.TP
.B \fBPython2_DOTNET_LAUNCHER\fP
Added in version 3.18.

.sp
The \fB\&.Net\fP interpreter. Only used by \fBIronPython\fP implementation.
.TP
.B \fBPython2_Development_FOUND\fP
System has the Python 2 development artifacts.
.TP
.B \fBPython2_Development.Module_FOUND\fP
Added in version 3.18.

.sp
System has the Python 2 development artifacts for Python module.
.TP
.B \fBPython2_Development.Embed_FOUND\fP
Added in version 3.18.

.sp
System has the Python 2 development artifacts for Python embedding.
.TP
.B \fBPython2_INCLUDE_DIRS\fP
The Python 2 include directories.
.TP
.B \fBPython2_DEBUG_POSTFIX\fP
Added in version 3.30.

.sp
Postfix of debug python module. This variable can be used to define the
\fI\%DEBUG_POSTFIX\fP target property.
.TP
.B \fBPython2_LINK_OPTIONS\fP
Added in version 3.19.

.sp
The Python 2 link options. Some configurations require specific link options
for a correct build and execution.
.TP
.B \fBPython2_LIBRARIES\fP
The Python 2 libraries.
.TP
.B \fBPython2_LIBRARY_DIRS\fP
The Python 2 library directories.
.TP
.B \fBPython2_RUNTIME_LIBRARY_DIRS\fP
The Python 2 runtime library directories.
.TP
.B \fBPython2_VERSION\fP
Python 2 version.
.TP
.B \fBPython2_VERSION_MAJOR\fP
Python 2 major version.
.TP
.B \fBPython2_VERSION_MINOR\fP
Python 2 minor version.
.TP
.B \fBPython2_VERSION_PATCH\fP
Python 2 patch version.
.TP
.B \fBPython2_PyPy_VERSION\fP
Added in version 3.18.

.sp
Python 2 PyPy version.
.TP
.B \fBPython2_NumPy_FOUND\fP
Added in version 3.14.

.sp
System has the NumPy.
.TP
.B \fBPython2_NumPy_INCLUDE_DIRS\fP
Added in version 3.14.

.sp
The NumPy include directories.
.TP
.B \fBPython2_NumPy_VERSION\fP
Added in version 3.14.

.sp
The NumPy version.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBPython2_ROOT_DIR\fP
Define the root directory of a Python 2 installation.
.TP
.B \fBPython2_USE_STATIC_LIBS\fP
.INDENT 7.0
.IP \(bu 2
If not defined, search for shared libraries and static libraries in that
order.
.IP \(bu 2
If set to TRUE, search \fBonly\fP for static libraries.
.IP \(bu 2
If set to FALSE, search \fBonly\fP for shared libraries.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint will be ignored on \fBWindows\fP because static libraries are not
available on this platform.
.UNINDENT
.UNINDENT
.TP
.B \fBPython2_FIND_STRATEGY\fP
Added in version 3.15.

.sp
This variable defines how lookup will be done.
The \fBPython2_FIND_STRATEGY\fP variable can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBVERSION\fP: Try to find the most recent version in all specified
locations.
This is the default if policy \fI\%CMP0094\fP is undefined or set to
\fBOLD\fP\&.
.IP \(bu 2
\fBLOCATION\fP: Stops lookup as soon as a version satisfying version
constraints is founded.
This is the default if policy \fI\%CMP0094\fP is set to \fBNEW\fP\&.
.UNINDENT
.sp
See also \fBPython2_FIND_UNVERSIONED_NAMES\fP\&.
.TP
.B \fBPython2_FIND_REGISTRY\fP
Added in version 3.13.

.sp
On Windows the \fBPython2_FIND_REGISTRY\fP variable determine the order
of preference between registry and environment variables.
the \fBPython2_FIND_REGISTRY\fP variable can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: Try to use registry before environment variables.
This is the default.
.IP \(bu 2
\fBLAST\fP: Try to use registry after environment variables.
.IP \(bu 2
\fBNEVER\fP: Never try to use registry.
.UNINDENT
.TP
.B \fBPython2_FIND_FRAMEWORK\fP
Added in version 3.15.

.sp
On macOS the \fBPython2_FIND_FRAMEWORK\fP variable determine the order of
preference between Apple\-style and unix\-style package components.
This variable can take same values as \fI\%CMAKE_FIND_FRAMEWORK\fP
variable.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Value \fBONLY\fP is not supported so \fBFIRST\fP will be used instead.
.UNINDENT
.UNINDENT
.sp
If \fBPython2_FIND_FRAMEWORK\fP is not defined, \fI\%CMAKE_FIND_FRAMEWORK\fP
variable will be used, if any.
.TP
.B \fBPython2_FIND_VIRTUALENV\fP
Added in version 3.15.

.sp
This variable defines the handling of virtual environments managed by
\fBvirtualenv\fP or \fBconda\fP\&. It is meaningful only when a virtual environment
is active (i.e. the \fBactivate\fP script has been evaluated). In this case, it
takes precedence over \fBPython2_FIND_REGISTRY\fP and \fBCMAKE_FIND_FRAMEWORK\fP
variables.  The \fBPython2_FIND_VIRTUALENV\fP variable can be set to one of the
following:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: The virtual environment is used before any other standard
paths to look\-up for the interpreter. This is the default.
.IP \(bu 2
\fBONLY\fP: Only the virtual environment is used to look\-up for the
interpreter.
.IP \(bu 2
\fBSTANDARD\fP: The virtual environment is not used to look\-up for the
interpreter but environment variable \fBPATH\fP is always considered.
In this case, variable \fBPython2_FIND_REGISTRY\fP (Windows) or
\fBCMAKE_FIND_FRAMEWORK\fP (macOS) can be set with value \fBLAST\fP or
\fBNEVER\fP to select preferably the interpreter from the virtual
environment.
.UNINDENT
.sp
Added in version 3.17: Added support for \fBconda\fP environments.

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the component \fBDevelopment\fP is requested (or one of its
sub\-components) and is not found or the wrong artifacts are returned,
including also the component \fBInterpreter\fP may be helpful.
.UNINDENT
.UNINDENT
.TP
.B \fBPython2_FIND_IMPLEMENTATIONS\fP
Added in version 3.18.

.sp
This variable defines, in an ordered list, the different implementations
which will be searched. The \fBPython2_FIND_IMPLEMENTATIONS\fP variable can
hold the following values:
.INDENT 7.0
.IP \(bu 2
\fBCPython\fP: this is the standard implementation. Various products, like
\fBAnaconda\fP or \fBActivePython\fP, rely on this implementation.
.IP \(bu 2
\fBIronPython\fP: This implementation use the \fBCSharp\fP language for
\fB\&.NET Framework\fP on top of the \fIDynamic Language Runtime\fP (\fBDLR\fP).
See \X'tty: link https://ironpython.net'\fI\%IronPython\fP\X'tty: link'\&.
.IP \(bu 2
\fBPyPy\fP: This implementation use \fBRPython\fP language and
\fBRPython translation toolchain\fP to produce the python interpreter.
See \X'tty: link https://pypy.org'\fI\%PyPy\fP\X'tty: link'\&.
.UNINDENT
.sp
The default value is:
.INDENT 7.0
.IP \(bu 2
Windows platform: \fBCPython\fP, \fBIronPython\fP
.IP \(bu 2
Other platforms: \fBCPython\fP
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint has the lowest priority of all hints, so even if, for example,
you specify \fBIronPython\fP first and \fBCPython\fP in second, a python
product based on \fBCPython\fP can be selected because, for example with
\fBPython2_FIND_STRATEGY=LOCATION\fP, each location will be search first for
\fBIronPython\fP and second for \fBCPython\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When \fBIronPython\fP is specified, on platforms other than \fBWindows\fP, the
\fB\&.Net\fP interpreter (i.e. \fBmono\fP command) is expected to be available
through the \fBPATH\fP variable.
.UNINDENT
.UNINDENT
.TP
.B \fBPython2_FIND_UNVERSIONED_NAMES\fP
Added in version 3.20.

.sp
This variable defines how the generic names will be searched. Currently, it
only applies to the generic names of the interpreter, namely, \fBpython2\fP and
\fBpython\fP\&.
The \fBPython2_FIND_UNVERSIONED_NAMES\fP variable can be set to one of the
following values:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: The generic names are searched before the more specialized ones
(such as \fBpython2.5\fP for example).
.IP \(bu 2
\fBLAST\fP: The generic names are searched after the more specialized ones.
This is the default.
.IP \(bu 2
\fBNEVER\fP: The generic name are not searched at all.
.UNINDENT
.sp
See also \fBPython2_FIND_STRATEGY\fP\&.
.UNINDENT
.SS Artifacts Specification
.sp
Added in version 3.16.

.sp
To solve special cases, it is possible to specify directly the artifacts by
setting the following variables:
.INDENT 0.0
.TP
.B \fBPython2_EXECUTABLE\fP
The path to the interpreter.
.TP
.B \fBPython2_COMPILER\fP
The path to the compiler.
.TP
.B \fBPython2_DOTNET_LAUNCHER\fP
Added in version 3.18.

.sp
The \fB\&.Net\fP interpreter. Only used by \fBIronPython\fP implementation.
.TP
.B \fBPython2_LIBRARY\fP
The path to the library. It will be used to compute the
variables \fBPython2_LIBRARIES\fP, \fBPython2_LIBRARY_DIRS\fP and
\fBPython2_RUNTIME_LIBRARY_DIRS\fP\&.
.TP
.B \fBPython2_INCLUDE_DIR\fP
The path to the directory of the \fBPython\fP headers. It will be used to
compute the variable \fBPython2_INCLUDE_DIRS\fP\&.
.TP
.B \fBPython2_NumPy_INCLUDE_DIR\fP
The path to the directory of the \fBNumPy\fP headers. It will be used to
compute the variable \fBPython2_NumPy_INCLUDE_DIRS\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
All paths must be absolute. Any artifact specified with a relative path
will be ignored.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When an artifact is specified, all \fBHINTS\fP will be ignored and no search
will be performed for this artifact.
.sp
If more than one artifact is specified, it is the user\(aqs responsibility to
ensure the consistency of the various artifacts.
.UNINDENT
.UNINDENT
.sp
By default, this module supports multiple calls in different directories of a
project with different version/component requirements while providing correct
and consistent results for each call. To support this behavior, CMake cache
is not used in the traditional way which can be problematic for interactive
specification. So, to enable also interactive specification, module behavior
can be controlled with the following variable:
.INDENT 0.0
.TP
.B \fBPython2_ARTIFACTS_INTERACTIVE\fP
Added in version 3.18.

.sp
Selects the behavior of the module. This is a boolean variable:
.INDENT 7.0
.IP \(bu 2
If set to \fBTRUE\fP: Create CMake cache entries for the above artifact
specification variables so that users can edit them interactively.
This disables support for multiple version/component requirements.
.IP \(bu 2
If set to \fBFALSE\fP or undefined: Enable multiple version/component
requirements.
.UNINDENT
.TP
.B \fBPython2_ARTIFACTS_PREFIX\fP
Added in version 4.0.

.sp
Define a custom prefix which will be used for the definition of all the
result variables, targets, and commands. By using this variable, this module
supports multiple calls in the same directory with different
version/component requirements.
For example, in case of cross\-compilation, development components are needed
but the native python interpreter can also be required:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(Python2 COMPONENTS Development)

set(Python2_ARTIFACTS_PREFIX \(dq_HOST\(dq)
find_package(Python2 COMPONENTS Interpreter)

# Here Python2_HOST_EXECUTABLE and Python2_HOST::Interpreter artifacts are defined
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
For consistency with standard behavior of modules, the various standard
\fB_FOUND\fP variables (i.e. without the custom prefix) are also defined by
each call to the \fI\%find_package()\fP command.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module defines the command \fBPython2_add_library\fP (when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP), which has the same semantics as
\fI\%add_library()\fP and adds a dependency to target \fBPython2::Python\fP or,
when library type is \fBMODULE\fP, to target \fBPython2::Module\fP and takes care
of Python module naming rules:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Python2_add_library (<name> [STATIC | SHARED | MODULE]
                     <source1> [<source2> ...])
.EE
.UNINDENT
.UNINDENT
.sp
If library type is not specified, \fBMODULE\fP is assumed.
.sp
Added in version 3.30: For \fBMODULE\fP type, the \fI\%DEBUG_POSTFIX\fP target property is
initialized with the value of \fBPython2_DEBUG_POSTFIX\fP variable if defined.

.SS FindPython3
.sp
Added in version 3.12.

.sp
Find Python 3 interpreter, compiler and development environment (include
directories and libraries).
.sp
Added in version 3.19: When a version is requested, it can be specified as a simple value or as a
range. For a detailed description of version range usage and capabilities,
refer to the \fI\%find_package()\fP command.

.sp
The following components are supported:
.INDENT 0.0
.IP \(bu 2
\fBInterpreter\fP: search for Python 3 interpreter
.IP \(bu 2
\fBCompiler\fP: search for Python 3 compiler. Only offered by IronPython.
.IP \(bu 2
\fBDevelopment\fP: search for development artifacts (include directories and
libraries).
.sp
Added in version 3.18: This component includes two sub\-components which can be specified
independently:
.INDENT 2.0
.IP \(bu 2
\fBDevelopment.Module\fP: search for artifacts for Python 3 module
developments.
.IP \(bu 2
\fBDevelopment.Embed\fP: search for artifacts for Python 3 embedding
developments.
.UNINDENT

.sp
Added in version 3.26: 
.INDENT 2.0
.IP \(bu 2
\fBDevelopment.SABIModule\fP: search for artifacts for Python 3 module
developments using the
\X'tty: link https://docs.python.org/3/c-api/stable.html'\fI\%Stable Application Binary Interface\fP\X'tty: link'\&.
This component is available only for version \fB3.2\fP and upper.
.UNINDENT

.IP \(bu 2
\fBNumPy\fP: search for NumPy include directories.
.UNINDENT
.sp
Added in version 3.14: Added the \fBNumPy\fP component.

.sp
If no \fBCOMPONENTS\fP are specified, \fBInterpreter\fP is assumed.
.sp
If component \fBDevelopment\fP is specified, it implies sub\-components
\fBDevelopment.Module\fP and \fBDevelopment.Embed\fP\&.
.sp
Changed in version 4.1: In a cross\-compiling mode (i.e. the \fI\%CMAKE_CROSSCOMPILING\fP variable
is defined to true), the following constraints, when the policy
\fI\%CMP0190\fP is set to \fBNEW\fP, now apply to the requested components:
.INDENT 0.0
.IP \(bu 2
\fBInterpreter\fP or \fBCompiler\fP alone: the host artifacts will be searched.
.IP \(bu 2
\fBInterpreter\fP or \fBCompiler\fP with \fBDevelopment\fP or any sub\-component:
The target artifacts will be searched. In this case, the
\fI\%CMAKE_CROSSCOMPILING_EMULATOR\fP variable must be defined and will
be used to execute the interpreter or the compiler.
.UNINDENT
.sp
When both host and target artifacts are needed, two different calls to the
\fI\%find_package()\fP command should be done. The
\fBPython_ARTIFACTS_PREFIX\fP variable can be helpful in this situation.

.sp
To ensure consistent versions between components \fBInterpreter\fP, \fBCompiler\fP,
\fBDevelopment\fP (or one of its sub\-components) and \fBNumPy\fP, specify all
components at the same time:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package (Python3 COMPONENTS Interpreter Development)
.EE
.UNINDENT
.UNINDENT
.sp
This module looks only for version 3 of Python. This module can be used
concurrently with \fI\%FindPython2\fP module to use both Python versions.
.sp
The \fI\%FindPython\fP module can be used if Python version does not matter
for you.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If components \fBInterpreter\fP and \fBDevelopment\fP (or one of its
sub\-components) are both specified, this module search only for interpreter
with same platform architecture as the one defined by CMake
configuration. This constraint does not apply if only \fBInterpreter\fP
component is specified.
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module defines the following \fI\%Imported Targets\fP:
.sp
Changed in version 3.14: \fI\%Imported Targets\fP are only created when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP\&.

.INDENT 0.0
.TP
.B \fBPython3::Interpreter\fP
Python 3 interpreter. This target is defined only if the \fBInterpreter\fP
component is found.
.TP
.B \fBPython3::InterpreterDebug\fP
Added in version 3.30.

.sp
Python 3 debug interpreter. This target is defined only if the
\fBInterpreter\fP component is found and the \fBPython3_EXECUTABLE_DEBUG\fP
variable is defined. The target is only defined on the \fBWindows\fP platform.
.TP
.B \fBPython3::InterpreterMultiConfig\fP
Added in version 3.30.

.sp
Python 3 interpreter. The release or debug version of the interpreter will be
used, based on the context (platform, configuration).
This target is defined only if the \fBInterpreter\fP component is found
.TP
.B \fBPython3::Compiler\fP
Python 3 compiler. This target is defined only if the \fBCompiler\fP component
is found.
.TP
.B \fBPython3::Module\fP
Added in version 3.15.

.sp
Python 3 library for Python module. Target defined if component
\fBDevelopment.Module\fP is found.
.TP
.B \fBPython3::SABIModule\fP
Added in version 3.26.

.sp
Python 3 library for Python module using the Stable Application Binary
Interface. Target defined if component \fBDevelopment.SABIModule\fP is found.
.TP
.B \fBPython3::Python\fP
Python 3 library for Python embedding. Target defined if component
\fBDevelopment.Embed\fP is found.
.TP
.B \fBPython3::NumPy\fP
Added in version 3.14.

.sp
NumPy library for Python 3. Target defined if component \fBNumPy\fP is found.
.UNINDENT
.SS Result Variables
.sp
This module will set the following variables in your project
(see \fI\%Standard Variable Names\fP):
.INDENT 0.0
.TP
.B \fBPython3_FOUND\fP
System has the Python 3 requested components.
.TP
.B \fBPython3_Interpreter_FOUND\fP
System has the Python 3 interpreter.
.TP
.B \fBPython3_EXECUTABLE\fP
Path to the Python 3 interpreter.
.TP
.B \fBPython3_EXECUTABLE_DEBUG\fP
Added in version 3.30.

.sp
Path to the debug Python 3 interpreter. It is only defined on \fBWindows\fP
platform.
.TP
.B \fBPython3_INTERPRETER\fP
Added in version 3.30.

.sp
Path to the Python 3 interpreter, defined as a
\fI\%generator expression\fP selecting
the \fBPython3_EXECUTABLE\fP or \fBPython3_EXECUTABLE_DEBUG\fP variable based on
the context (platform, configuration).
.TP
.B \fBPython3_INTERPRETER_ID\fP
.INDENT 7.0
.TP
.B A short string unique to the interpreter. Possible values include:
.INDENT 7.0
.IP \(bu 2
Python
.IP \(bu 2
ActivePython
.IP \(bu 2
Anaconda
.IP \(bu 2
Canopy
.IP \(bu 2
IronPython
.IP \(bu 2
PyPy
.UNINDENT
.UNINDENT
.TP
.B \fBPython3_STDLIB\fP
Standard platform independent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqstdlib\(aq)\fP\&.
.TP
.B \fBPython3_STDARCH\fP
Standard platform dependent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqplatstdlib\(aq)\fP\&.
.TP
.B \fBPython3_SITELIB\fP
Third\-party platform independent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqpurelib\(aq)\fP\&.
.TP
.B \fBPython3_SITEARCH\fP
Third\-party platform dependent installation directory.
.sp
Information returned by \fBsysconfig.get_path(\(aqplatlib\(aq)\fP\&.
.TP
.B \fBPython3_SOABI\fP
Added in version 3.17.

.sp
Extension suffix for modules.
.sp
Information computed from \fBsysconfig.get_config_var(\(aqEXT_SUFFIX\(aq)\fP or
\fBsysconfig.get_config_var(\(aqSOABI\(aq)\fP or
\fBpython3\-config \-\-extension\-suffix\fP\&.
.TP
.B \fBPython3_SOSABI\fP
Added in version 3.26.

.sp
Extension suffix for modules using the Stable Application Binary Interface.
.sp
Information computed from \fBimportlib.machinery.EXTENSION_SUFFIXES\fP if the
COMPONENT \fBInterpreter\fP was specified. Otherwise, the extension is \fBabi3\fP
except for \fBWindows\fP, \fBMSYS\fP and \fBCYGWIN\fP for which this is an empty
string.
.TP
.B \fBPython3_Compiler_FOUND\fP
System has the Python 3 compiler.
.TP
.B \fBPython3_COMPILER\fP
Path to the Python 3 compiler. Only offered by IronPython.
.TP
.B \fBPython3_COMPILER_ID\fP
.INDENT 7.0
.TP
.B A short string unique to the compiler. Possible values include:
.INDENT 7.0
.IP \(bu 2
IronPython
.UNINDENT
.UNINDENT
.TP
.B \fBPython3_DOTNET_LAUNCHER\fP
Added in version 3.18.

.sp
The \fB\&.Net\fP interpreter. Only used by \fBIronPython\fP implementation.
.UNINDENT
.sp
\fBPython3_Development_FOUND\fP
.INDENT 0.0
.INDENT 3.5
System has the Python 3 development artifacts.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fBPython3_Development.Module_FOUND\fP
Added in version 3.18.

.sp
System has the Python 3 development artifacts for Python module.
.TP
.B \fBPython3_Development.SABIModule_FOUND\fP
Added in version 3.26.

.sp
System has the Python 3 development artifacts for Python module using the
Stable Application Binary Interface.
.TP
.B \fBPython3_Development.Embed_FOUND\fP
Added in version 3.18.

.sp
System has the Python 3 development artifacts for Python embedding.
.UNINDENT
.sp
\fBPython3_INCLUDE_DIRS\fP
.INDENT 0.0
.INDENT 3.5
The Python 3 include directories.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fBPython3_DEFINITIONS\fP
Added in version 3.30.3.

.sp
The Python 3 preprocessor definitions.
.TP
.B \fBPython3_DEBUG_POSTFIX\fP
Added in version 3.30.

.sp
Postfix of debug python module. This variable can be used to define the
\fI\%DEBUG_POSTFIX\fP target property.
.TP
.B \fBPython3_LINK_OPTIONS\fP
Added in version 3.19.

.sp
The Python 3 link options. Some configurations require specific link options
for a correct build and execution.
.TP
.B \fBPython3_LIBRARIES\fP
The Python 3 libraries.
.TP
.B \fBPython3_LIBRARY_DIRS\fP
The Python 3 library directories.
.TP
.B \fBPython3_RUNTIME_LIBRARY_DIRS\fP
The Python 3 runtime library directories.
.TP
.B \fBPython3_SABI_LIBRARIES\fP
Added in version 3.26.

.sp
The Python 3 libraries for the Stable Application Binary Interface.
.TP
.B \fBPython3_SABI_LIBRARY_DIRS\fP
Added in version 3.26.

.sp
The Python 3 \fBSABI\fP library directories.
.TP
.B \fBPython3_RUNTIME_SABI_LIBRARY_DIRS\fP
Added in version 3.26.

.sp
The Python 3 runtime \fBSABI\fP library directories.
.TP
.B \fBPython3_VERSION\fP
Python 3 version.
.TP
.B \fBPython3_VERSION_MAJOR\fP
Python 3 major version.
.TP
.B \fBPython3_VERSION_MINOR\fP
Python 3 minor version.
.TP
.B \fBPython3_VERSION_PATCH\fP
Python 3 patch version.
.TP
.B \fBPython3_PyPy_VERSION\fP
Added in version 3.18.

.sp
Python 3 PyPy version.
.TP
.B \fBPython3_NumPy_FOUND\fP
Added in version 3.14.

.sp
System has the NumPy.
.TP
.B \fBPython3_NumPy_INCLUDE_DIRS\fP
Added in version 3.14.

.sp
The NumPy include directories.
.TP
.B \fBPython3_NumPy_VERSION\fP
Added in version 3.14.

.sp
The NumPy version.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBPython3_ROOT_DIR\fP
Define the root directory of a Python 3 installation.
.TP
.B \fBPython3_USE_STATIC_LIBS\fP
.INDENT 7.0
.IP \(bu 2
If not defined, search for shared libraries and static libraries in that
order.
.IP \(bu 2
If set to TRUE, search \fBonly\fP for static libraries.
.IP \(bu 2
If set to FALSE, search \fBonly\fP for shared libraries.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint will be ignored on \fBWindows\fP because static libraries are not
available on this platform.
.UNINDENT
.UNINDENT
.TP
.B \fBPython3_FIND_ABI\fP
Added in version 3.16.

.sp
This variable defines which ABIs, as defined in \X'tty: link https://peps.python.org/pep-3149/'\fI\%PEP 3149\fP\X'tty: link', should be
searched.
.sp
The \fBPython3_FIND_ABI\fP variable is a 4\-tuple specifying, in that order,
\fBpydebug\fP (\fBd\fP), \fBpymalloc\fP (\fBm\fP), \fBunicode\fP (\fBu\fP) and
\fBgil_disabled\fP (\fBt\fP) flags.
.sp
Added in version 3.30: A fourth element, specifying the \fBgil_disabled\fP flag (i.e. free
threaded python), is added and is optional. If not specified, the value is
\fBOFF\fP\&.

.sp
Each element can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBON\fP: Corresponding flag is selected.
.IP \(bu 2
\fBOFF\fP: Corresponding flag is not selected.
.IP \(bu 2
\fBANY\fP: The two possibilities (\fBON\fP and \fBOFF\fP) will be searched.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If \fBPython3_FIND_ABI\fP is not defined, any ABI, excluding the
\fBgil_disabled\fP flag, will be searched.
.UNINDENT
.UNINDENT
.sp
From this 4\-tuple, various ABIs will be searched starting from the most
specialized to the most general. Moreover, when \fBANY\fP is specified for
\fBpydebug\fP and \fBgil_disabled\fP, \fBdebug\fP and \fBfree threaded\fP versions
will be searched \fBafter\fP \fBnon\-debug\fP and \fBnon\-gil\-disabled\fP ones.
.sp
For example, if we have:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set (Python3_FIND_ABI \(dqON\(dq \(dqANY\(dq \(dqANY\(dq \(dqON\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The following flags combinations will be appended, in that order, to the
artifact names: \fBtdmu\fP, \fBtdm\fP, \fBtdu\fP, and \fBtd\fP\&.
.sp
And to search any possible ABIs:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
set (Python3_FIND_ABI \(dqANY\(dq \(dqANY\(dq \(dqANY\(dq \(dqANY\(dq)
.EE
.UNINDENT
.UNINDENT
.sp
The following combinations, in that order, will be used: \fBmu\fP, \fBm\fP,
\fBu\fP, \fB<empty>\fP, \fBdmu\fP, \fBdm\fP, \fBdu\fP, \fBd\fP, \fBtmu\fP, \fBtm\fP, \fBtu\fP,
\fBt\fP, \fBtdmu\fP, \fBtdm\fP, \fBtdu\fP, and \fBtd\fP\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint is useful only on \fBPOSIX\fP systems except for the
\fBgil_disabled\fP flag. So, on \fBWindows\fP systems,
when \fBPython_FIND_ABI\fP is defined, \fBPython\fP distributions from
\X'tty: link https://www.python.org/'\fI\%python.org\fP\X'tty: link' will be found only if the value for
each flag is \fBOFF\fP or \fBANY\fP except for the fourth one
(\fBgil_disabled\fP).
.UNINDENT
.UNINDENT
.TP
.B \fBPython3_FIND_STRATEGY\fP
Added in version 3.15.

.sp
This variable defines how lookup will be done.
The \fBPython3_FIND_STRATEGY\fP variable can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBVERSION\fP: Try to find the most recent version in all specified
locations.
This is the default if policy \fI\%CMP0094\fP is undefined or set to
\fBOLD\fP\&.
.IP \(bu 2
\fBLOCATION\fP: Stops lookup as soon as a version satisfying version
constraints is founded.
This is the default if policy \fI\%CMP0094\fP is set to \fBNEW\fP\&.
.UNINDENT
.sp
See also \fBPython3_FIND_UNVERSIONED_NAMES\fP\&.
.TP
.B \fBPython3_FIND_REGISTRY\fP
Added in version 3.13.

.sp
On Windows the \fBPython3_FIND_REGISTRY\fP variable determine the order
of preference between registry and environment variables.
The \fBPython3_FIND_REGISTRY\fP variable can be set to one of the following:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: Try to use registry before environment variables.
This is the default.
.IP \(bu 2
\fBLAST\fP: Try to use registry after environment variables.
.IP \(bu 2
\fBNEVER\fP: Never try to use registry.
.UNINDENT
.TP
.B \fBPython3_FIND_FRAMEWORK\fP
Added in version 3.15.

.sp
On macOS the \fBPython3_FIND_FRAMEWORK\fP variable determine the order of
preference between Apple\-style and unix\-style package components.
This variable can take same values as \fI\%CMAKE_FIND_FRAMEWORK\fP
variable.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Value \fBONLY\fP is not supported so \fBFIRST\fP will be used instead.
.UNINDENT
.UNINDENT
.sp
If \fBPython3_FIND_FRAMEWORK\fP is not defined, \fI\%CMAKE_FIND_FRAMEWORK\fP
variable will be used, if any.
.TP
.B \fBPython3_FIND_VIRTUALENV\fP
Added in version 3.15.

.sp
This variable defines the handling of virtual environments managed by
\fBvirtualenv\fP or \fBconda\fP\&. It is meaningful only when a virtual environment
is active (i.e. the \fBactivate\fP script has been evaluated). In this case, it
takes precedence over \fBPython3_FIND_REGISTRY\fP and \fBCMAKE_FIND_FRAMEWORK\fP
variables.  The \fBPython3_FIND_VIRTUALENV\fP variable can be set to one of the
following:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: The virtual environment is used before any other standard
paths to look\-up for the interpreter. This is the default.
.IP \(bu 2
\fBONLY\fP: Only the virtual environment is used to look\-up for the
interpreter.
.IP \(bu 2
\fBSTANDARD\fP: The virtual environment is not used to look\-up for the
interpreter but environment variable \fBPATH\fP is always considered.
In this case, variable \fBPython3_FIND_REGISTRY\fP (Windows) or
\fBCMAKE_FIND_FRAMEWORK\fP (macOS) can be set with value \fBLAST\fP or
\fBNEVER\fP to select preferably the interpreter from the virtual
environment.
.UNINDENT
.sp
Added in version 3.17: Added support for \fBconda\fP environments.

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the component \fBDevelopment\fP is requested (or one of its
sub\-components) and is not found or the wrong artifacts are returned,
including also the component \fBInterpreter\fP may be helpful.
.UNINDENT
.UNINDENT
.TP
.B \fBPython3_FIND_IMPLEMENTATIONS\fP
Added in version 3.18.

.sp
This variable defines, in an ordered list, the different implementations
which will be searched. The \fBPython3_FIND_IMPLEMENTATIONS\fP variable can
hold the following values:
.INDENT 7.0
.IP \(bu 2
\fBCPython\fP: this is the standard implementation. Various products, like
\fBAnaconda\fP or \fBActivePython\fP, rely on this implementation.
.IP \(bu 2
\fBIronPython\fP: This implementation use the \fBCSharp\fP language for
\fB\&.NET Framework\fP on top of the \fIDynamic Language Runtime\fP (\fBDLR\fP).
See \X'tty: link https://ironpython.net'\fI\%IronPython\fP\X'tty: link'\&.
.IP \(bu 2
\fBPyPy\fP: This implementation use \fBRPython\fP language and
\fBRPython translation toolchain\fP to produce the python interpreter.
See \X'tty: link https://pypy.org'\fI\%PyPy\fP\X'tty: link'\&.
.UNINDENT
.sp
The default value is:
.INDENT 7.0
.IP \(bu 2
Windows platform: \fBCPython\fP, \fBIronPython\fP
.IP \(bu 2
Other platforms: \fBCPython\fP
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This hint has the lowest priority of all hints, so even if, for example,
you specify \fBIronPython\fP first and \fBCPython\fP in second, a python
product based on \fBCPython\fP can be selected because, for example with
\fBPython3_FIND_STRATEGY=LOCATION\fP, each location will be search first for
\fBIronPython\fP and second for \fBCPython\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
When \fBIronPython\fP is specified, on platforms other than \fBWindows\fP, the
\fB\&.Net\fP interpreter (i.e. \fBmono\fP command) is expected to be available
through the \fBPATH\fP variable.
.UNINDENT
.UNINDENT
.TP
.B \fBPython3_FIND_UNVERSIONED_NAMES\fP
Added in version 3.20.

.sp
This variable defines how the generic names will be searched. Currently, it
only applies to the generic names of the interpreter, namely, \fBpython3\fP and
\fBpython\fP\&.
The \fBPython3_FIND_UNVERSIONED_NAMES\fP variable can be set to one of the
following values:
.INDENT 7.0
.IP \(bu 2
\fBFIRST\fP: The generic names are searched before the more specialized ones
(such as \fBpython3.5\fP for example).
.IP \(bu 2
\fBLAST\fP: The generic names are searched after the more specialized ones.
This is the default.
.IP \(bu 2
\fBNEVER\fP: The generic name are not searched at all.
.UNINDENT
.sp
See also \fBPython3_FIND_STRATEGY\fP\&.
.UNINDENT
.SS Artifacts Specification
.sp
Added in version 3.16.

.sp
To solve special cases, it is possible to specify directly the artifacts by
setting the following variables:
.INDENT 0.0
.TP
.B \fBPython3_EXECUTABLE\fP
The path to the interpreter.
.TP
.B \fBPython3_COMPILER\fP
The path to the compiler.
.TP
.B \fBPython3_DOTNET_LAUNCHER\fP
Added in version 3.18.

.sp
The \fB\&.Net\fP interpreter. Only used by \fBIronPython\fP implementation.
.TP
.B \fBPython3_LIBRARY\fP
The path to the library. It will be used to compute the
variables \fBPython3_LIBRARIES\fP, \fBPython3_LIBRARY_DIRS\fP and
\fBPython3_RUNTIME_LIBRARY_DIRS\fP\&.
.TP
.B \fBPython3_SABI_LIBRARY\fP
Added in version 3.26.

.sp
The path to the library for Stable Application Binary Interface. It will be
used to compute the variables \fBPython3_SABI_LIBRARIES\fP,
\fBPython3_SABI_LIBRARY_DIRS\fP and \fBPython3_RUNTIME_SABI_LIBRARY_DIRS\fP\&.
.TP
.B \fBPython3_INCLUDE_DIR\fP
The path to the directory of the \fBPython\fP headers. It will be used to
compute the variable \fBPython3_INCLUDE_DIRS\fP\&.
.TP
.B \fBPython3_NumPy_INCLUDE_DIR\fP
The path to the directory of the \fBNumPy\fP headers. It will be used to
compute the variable \fBPython3_NumPy_INCLUDE_DIRS\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
All paths must be absolute. Any artifact specified with a relative path
will be ignored.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When an artifact is specified, all \fBHINTS\fP will be ignored and no search
will be performed for this artifact.
.sp
If more than one artifact is specified, it is the user\(aqs responsibility to
ensure the consistency of the various artifacts.
.UNINDENT
.UNINDENT
.sp
By default, this module supports multiple calls in different directories of a
project with different version/component requirements while providing correct
and consistent results for each call. To support this behavior, CMake cache
is not used in the traditional way which can be problematic for interactive
specification. So, to enable also interactive specification, module behavior
can be controlled with the following variable:
.INDENT 0.0
.TP
.B \fBPython3_ARTIFACTS_INTERACTIVE\fP
Added in version 3.18.

.sp
Selects the behavior of the module. This is a boolean variable:
.INDENT 7.0
.IP \(bu 2
If set to \fBTRUE\fP: Create CMake cache entries for the above artifact
specification variables so that users can edit them interactively.
This disables support for multiple version/component requirements.
.IP \(bu 2
If set to \fBFALSE\fP or undefined: Enable multiple version/component
requirements.
.UNINDENT
.TP
.B \fBPython3_ARTIFACTS_PREFIX\fP
Added in version 4.0.

.sp
Define a custom prefix which will be used for the definition of all the
result variables, targets, and commands. By using this variable, this module
supports multiple calls in the same directory with different
version/component requirements.
For example, in case of cross\-compilation, development components are needed
but the native python interpreter can also be required:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
find_package(Python3 COMPONENTS Development)

set(Python3_ARTIFACTS_PREFIX \(dq_HOST\(dq)
find_package(Python3 COMPONENTS Interpreter)

# Here Python3_HOST_EXECUTABLE and Python3_HOST::Interpreter artifacts are defined
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
For consistency with standard behavior of modules, the various standard
\fB_FOUND\fP variables (i.e. without the custom prefix) are also defined by
each call to the \fI\%find_package()\fP command.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module defines the command \fBPython3_add_library\fP (when
\fI\%CMAKE_ROLE\fP is \fBPROJECT\fP), which has the same semantics as
\fI\%add_library()\fP and adds a dependency to target \fBPython3::Python\fP or,
when library type is \fBMODULE\fP, to target \fBPython3::Module\fP or
\fBPython3::SABIModule\fP (when \fBUSE_SABI\fP option is specified) and takes care
of Python module naming rules:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Python3_add_library (<name> [STATIC | SHARED | MODULE [USE_SABI <version>] [WITH_SOABI]]
                     <source1> [<source2> ...])
.EE
.UNINDENT
.UNINDENT
.sp
If the library type is not specified, \fBMODULE\fP is assumed.
.sp
Added in version 3.17: For \fBMODULE\fP library type, if option \fBWITH_SOABI\fP is specified, the
module suffix will include the \fBPython3_SOABI\fP value, if any.

.sp
Added in version 3.26: For \fBMODULE\fP type, if the option \fBUSE_SABI\fP is specified, the
preprocessor definition \fBPy_LIMITED_API\fP will be specified, as \fBPRIVATE\fP,
for the target \fB<name>\fP with the value computed from \fB<version>\fP argument.
The expected format for \fB<version>\fP is \fBmajor[.minor]\fP, where each
component is a numeric value. If \fBminor\fP component is specified, the
version should be, at least, \fB3.2\fP which is the version where the
\X'tty: link https://docs.python.org/3/c-api/stable.html'\fI\%Stable Application Binary Interface\fP\X'tty: link'
was introduced. Specifying only major version \fB3\fP is equivalent to \fB3.2\fP\&.
.sp
When option \fBWITH_SOABI\fP is also specified,  the module suffix will include
the \fBPython3_SOSABI\fP value, if any.

.sp
Added in version 3.30: For \fBMODULE\fP type, the \fI\%DEBUG_POSTFIX\fP target property is
initialized with the value of \fBPython3_DEBUG_POSTFIX\fP variable if defined.

.SS FindQt3
.sp
This module finds Qt3, a cross\-platform application development framework for
creating graphical user interfaces and applications.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is for Qt version 3.  As of Qt version 5, the Qt upstream also
provides an exported configuration to find Qt.  New code should follow the
\fI\%cmake\-qt(7)\fP instead of using this module.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBQt3_FOUND\fP
True if Qt3 has been found.
.TP
.B \fBQT_FOUND\fP
True if Qt3 has been found.  This variable is for compatibility with other Qt
find modules.
.TP
.B \fBQT_VERSION_STRING\fP
The version of Qt3 that was found.
.TP
.B \fBQT_LIBRARIES\fP
Libraries needed to link against for using Qt3.
.TP
.B \fBQT_DEFINITIONS\fP
A list of compile definitions to use when compiling code that uses Qt3.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBQT_INCLUDE_DIR\fP
The directory containing \fBqt.h\fP and other Qt3 header files.
.UNINDENT
.sp
The following cache variables may also be set but are not meant for general use:
.INDENT 0.0
.TP
.B \fBQT_MOC_EXECUTABLE\fP
Path to the \fBmoc\fP tool.
.TP
.B \fBQT_UIC_EXECUTABLE\fP
Path to the \fBuic\fP tool.
.TP
.B \fBQT_QT_LIBRARY\fP
Path to the Qt3 library.
.TP
.B \fBQT_QTMAIN_LIBRARY\fP
Path to the \fBqtmain\fP library.  This is only required by Qt3 on Windows.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBQT_MT_REQUIRED\fP
To search for the multithreaded version of Qt3, set this variable to \fBTRUE\fP
before looking for Qt3.
.UNINDENT
.SS Examples
.sp
Finding Qt3 on the system:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Qt3)
if(Qt3_FOUND)
  target_link_libraries(foo PRIVATE ${QT_LIBRARIES})
  target_include_directories(foo PRIVATE ${QT_INCLUDE_DIR})
  target_compile_definitions(foo PRIVATE ${QT_DEFINITIONS})
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Looking for the multithreaded version of Qt3:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(QT_MT_REQUIRED TRUE)
find_package(Qt3)
.EE
.UNINDENT
.UNINDENT
.SS FindQt4
.sp
This module finds Qt4, a cross\-platform application development framework for
creating graphical user interfaces and applications.  It defines a number of
imported targets, macros, and variables to use Qt4 in the project.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is for Qt version 4.  As of Qt version 5, the Qt upstream also
provides an exported configuration to find Qt.  New code should follow the
\fI\%cmake\-qt(7)\fP instead of using this module.
.UNINDENT
.UNINDENT
.sp
To detect the Qt4 package, the Qt4 \fBqmake\fP tool is required and must be
available in the system path.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When using \fI\%Imported Targets\fP, the \fBqtmain.lib\fP static library is
automatically linked on Windows for \fI\%WIN32\fP
executables.  To disable this globally, set the \fBQT4_NO_LINK_QTMAIN\fP
variable before finding Qt4.  To disable this for a particular executable,
set the \fBQT4_NO_LINK_QTMAIN\fP target property to \fBTRUE\fP on that executable.
.UNINDENT
.UNINDENT
.SS Qt Build Tools
.sp
Qt relies on some bundled tools for code generation, such as \fBmoc\fP for
meta\-object code generation, \fBuic\fP for widget layout and population,
and \fBrcc\fP for virtual filesystem content generation.  These tools may be
automatically invoked by \fI\%cmake(1)\fP if the appropriate conditions
are met.  See \fI\%cmake\-qt(7)\fP for more.
.SS Imported Targets
.sp
Qt libraries can be linked using their corresponding
\fI\%IMPORTED target\fP with the
\fI\%target_link_libraries()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)
.EE
.UNINDENT
.UNINDENT
.sp
Linking to an imported target automatically applies the correct include
directories and compile definitions when building \fBmyexe\fP\&.
.sp
Imported targets also manage their dependencies, so listing \fBQt4::QtCore\fP is
unnecessary if another Qt library depends on it.  Likewise, \fBQt4::QtGui\fP is
automatically included when linking \fBQt4::QtDeclarative\fP\&.  Targets can be
checked for existence using \fI\%if(TARGET)\fP command.
.sp
If both debug and release versions of a Qt toolkit library are available, CMake
selects the appropriate one based on the
\fI\%build configuration\fP\&.
.sp
This module provides the following imported targets, if found:
.INDENT 0.0
.TP
.B \fBQt4::QtCore\fP
The QtCore target
.TP
.B \fBQt4::QtGui\fP
The QtGui target
.TP
.B \fBQt4::Qt3Support\fP
The Qt3Support target
.TP
.B \fBQt4::QtAssistant\fP
The QtAssistant target
.TP
.B \fBQt4::QtAssistantClient\fP
The QtAssistantClient target
.TP
.B \fBQt4::QAxContainer\fP
The QAxContainer target (Windows only)
.TP
.B \fBQt4::QAxServer\fP
The QAxServer target (Windows only)
.TP
.B \fBQt4::QtDBus\fP
The QtDBus target
.TP
.B \fBQt4::QtDeclarative\fP
The QtDeclarative target
.TP
.B \fBQt4::QtDesigner\fP
The QtDesigner target
.TP
.B \fBQt4::QtDesignerComponents\fP
The QtDesignerComponents target
.TP
.B \fBQt4::QtHelp\fP
The QtHelp target
.TP
.B \fBQt4::QtMotif\fP
The QtMotif target
.TP
.B \fBQt4::QtMultimedia\fP
The QtMultimedia target
.TP
.B \fBQt4::QtNetwork\fP
The QtNetwork target
.TP
.B \fBQt4::QtNsPlugin\fP
The QtNsPlugin target
.TP
.B \fBQt4::QtOpenGL\fP
The QtOpenGL target
.TP
.B \fBQt4::QtScript\fP
The QtScript target
.TP
.B \fBQt4::QtScriptTools\fP
The QtScriptTools target
.TP
.B \fBQt4::QtSql\fP
The QtSql target
.TP
.B \fBQt4::QtSvg\fP
The QtSvg target
.TP
.B \fBQt4::QtTest\fP
The QtTest target
.TP
.B \fBQt4::QtUiTools\fP
The QtUiTools target
.TP
.B \fBQt4::QtWebKit\fP
The QtWebKit target
.TP
.B \fBQt4::QtXml\fP
The QtXml target
.TP
.B \fBQt4::QtXmlPatterns\fP
The QtXmlPatterns target
.TP
.B \fBQt4::phonon\fP
The phonon target
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBQt4_FOUND\fP
Boolean whether Qt4 has been found.  If false, don\(aqt try to use Qt4.
.TP
.B \fBQT_FOUND\fP
Boolean whether Qt4 has been found.  If false, don\(aqt try to use Qt4.  This
variable is for compatibility with other Qt find modules.
.TP
.B \fBQT4_FOUND\fP
Boolean whether Qt4 has been found.  If false, don\(aqt try to use Qt4.  This
variable is for backward compatibility only.
.TP
.B \fBQT_VERSION_MAJOR\fP
The major version of Qt found.
.TP
.B \fBQT_VERSION_MINOR\fP
The minor version of Qt found.
.TP
.B \fBQT_VERSION_PATCH\fP
The patch version of Qt found.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBQT4_NO_LINK_QTMAIN\fP
If set to boolean true before finding Qt4, it globally disables linking
\fBqtmain.lib\fP static library on Windows.
.UNINDENT
.SS Macros
.sp
In some cases it can be necessary or useful to invoke the Qt build tools in a
more\-manual way.  This module provides the following macros to add targets for
such uses:
.INDENT 0.0
.TP
.B qt4_wrap_cpp
Creates build rules for running \fBmoc\fP on a given list of input files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_wrap_cpp(<variable> <files>... [TARGET <target>] [OPTIONS <options>...])
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates build rules for processing a list of input files
\fB<files>\fP that contain Qt classes with the \fBQ_OBJECT\fP declaration.
Per\-directory preprocessor definitions are also added.
.INDENT 7.0
.TP
.B \fB<variable>\fP
Name of a variable where a list of generated output files is stored.
.TP
.B \fB<files>\fP
One or more input source files.
.TP
.B \fBTARGET\fP
If specified, the \fBINTERFACE_INCLUDE_DIRECTORIES\fP and
\fBINTERFACE_COMPILE_DEFINITIONS\fP target properties from the \fB<target>\fP
are passed to \fBmoc\fP\&.
.TP
.B \fBOPTIONS\fP
Optional list of options given to \fBmoc\fP, such as those found when
executing \fBmoc \-help\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Instead of using \fBqt4_wrap_cpp()\fP, the \fI\%CMAKE_AUTOMOC\fP variable
can be set to process source files with \fBmoc\fP automatically.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_wrap_ui
Creates build rules for running \fBuic\fP on a given list of Qt designer ui
input files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_wrap_ui(<variable> <files>... [OPTIONS <options>...])
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<variable>\fP
Name of a variable where a list of generated output filenames is stored.
.TP
.B \fB<files>\fP
One or more Qt designer ui input source files.
.TP
.B \fBOPTIONS\fP
Optional list of options given to \fBuic\fP, such as those found when
executing \fBuic \-help\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Instead of using \fBqt4_wrap_ui()\fP, the \fI\%CMAKE_AUTOUIC\fP variable
can be set to process ui files with \fBuic\fP automatically.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_add_resources
Creates build rules for running \fBrcc\fP on a given list of input Qt resource
files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_add_resources(<variable> <files>... [OPTIONS <options>...])
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<variable>\fP
Name of a variable where a list of generated output filenames is stored.
.TP
.B \fB<files>\fP
One or more Qt resource input source files.
.TP
.B \fBOPTIONS\fP
Optional list of options given to \fBrcc\fP, such as those found when
executing \fBrcc \-help\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Instead of using \fBqt4_add_resources()\fP, the \fI\%CMAKE_AUTORCC\fP
variable can be set to process resource files with \fBrcc\fP automatically.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_generate_moc
Creates a build rule that generates output file by running \fBmoc\fP on a given
input file.
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_generate_moc(<input\-file> <output\-file> [TARGET <target>])
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates a build rule for \fB<input\-file>\fP to generate
\fB<output\-file>\fP\&.  Use this if for some reason \fBqt4_wrap_cpp()\fP isn\(aqt
feasible, e.g. because a custom filename is needed for the moc file or
similar.
.INDENT 7.0
.TP
.B \fBTARGET\fP
If specified, the \fBINTERFACE_INCLUDE_DIRECTORIES\fP and
\fBINTERFACE_COMPILE_DEFINITIONS\fP target properties from the \fB<target>\fP
are passed to \fBmoc\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_add_dbus_interface
Creates the interface header and implementation files from an interface XML
file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_add_dbus_interface(<variable> <interface\-file> <basename>)
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates the interface header (\fB<basename>.h\fP) and implementation
files (\fB<basename>.{cpp,moc}\fP) from the given interface XML file
\fB<interface\-file>\fP and adds it to the variable which contains a list of
sources (specified as variable name \fB<variable>\fP).
.sp
Additional parameters can be passed to the \fBqdbusxml2cpp\fP call by setting
the following source file properties on the input file \fB<interface\-file>\fP:
.INDENT 7.0
.TP
.B \fBINCLUDE\fP
The given file will be included in the generate interface header.
.TP
.B \fBCLASSNAME\fP
The name of the generated class.
.TP
.B \fBNO_NAMESPACE\fP
The generated class will not be wrapped in a namespace.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_add_dbus_interfaces
Creates the interface header and implementation files from multiple interface
XML files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_add_dbus_interfaces(<variable> <interface\-files>...)
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates the interface header and implementation files for all
listed interface XML files \fB<interface\-files>\fP\&.  The basename will be
automatically determined from the name of the XML file.  The resulting output
files list is stored in a variable \fB<variable>\fP\&.
.sp
The source file properties described for \fBqt4_add_dbus_interface()\fP also
apply here.
.UNINDENT
.INDENT 0.0
.TP
.B qt4_add_dbus_adaptor
Generates an adaptor class for a D\-Bus interface:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_add_dbus_adaptor(<variable> <xmlfile> <parent\-header> <parent\-classname>
                     [<basename>] [<classname>])
.EE
.UNINDENT
.UNINDENT
.sp
Creates a D\-Bus adaptor (header and implementation file) from the XML file
describing the interface, and adds it to the list of sources.  The adaptor
forwards the calls to a parent class, defined in \fB<parent\-header>\fP and named
\fB<parent\-classname>\fP\&.  The generated filenames will be
\fB<basename>adaptor.{cpp,h}\fP where \fB<basename>\fP defaults to the basename of
the XML file if not given.  If \fB<classname>\fP is provided, then it will be
used as the classname of the adaptor itself.  Generated filenames are stored
in a variable \fB<variable>\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B qt4_generate_dbus_interface
Generates a D\-Bus XML interface file from a given header file:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_generate_dbus_interface(<header> [<interface>] [OPTIONS <options>...])
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates a build rule to extract declaration from the given
\fB<header>\fP file to generate a corresponding XML interface file.
.INDENT 7.0
.TP
.B \fB<header>\fP
Path to header file from which XML interface file is generated.
.TP
.B \fB<interface>\fP
Path to the generated XML interface file.  If this optional argument is
omitted, the name of the interface file is constructed from the basename of
the header with the suffix \fB\&.xml\fP appended.  A relative path is
interpreted as relative to \fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
.TP
.B \fBOPTIONS\fP
A list of options that may be given to \fBqdbuscpp2xml\fP, such as those found
when executing \fBqdbuscpp2xml \-\-help\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_create_translation
Creates build rules for generating TS and QM files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_create_translation(<qm\-files\-var> <directories>... <sources>...
                       <ts\-files>... [OPTIONS <options>...])
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates build rules to generate TS (Translation Source files
\fB\&.ts\fP) files via \fBlupdate\fP and QM (Qt Message files \fB\&.qm\fP) files via
\fBlrelease\fP from the given \fB<directories>\fP and/or \fB<sources>\fP\&.  The TS
files are created and/or updated in the source tree (unless given with full
paths).  The QM files are generated in the build tree.
.INDENT 7.0
.TP
.B \fB<qm\-files\-var>\fP
A list of generated QM files is stored in this variable.  Updating the
translations can be done by adding the \fB<qm\-files\-var>\fP to the source list
of the project library/executable, so they are always updated, or by adding
a custom target to control when they get updated/generated.
.TP
.B \fB<directories>\fP
A list of directories containing source files.
.TP
.B \fB<sources>\fP
A list of source files.
.TP
.B \fB<ts\-files>\fP
A list of TS (Translation Source) files.
.TP
.B \fBOPTIONS\fP
Optional list of flags passed to \fBlupdate\fP, such as \fB\-extensions\fP, to
specify file extensions for directory scanning.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_add_translation
Creates build rules for generating QM files from the given TS files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_add_translation(<qm\-files\-var> <ts\-files>...)
.EE
.UNINDENT
.UNINDENT
.sp
This macro creates build rules for generating QM files from the given TS files
and stores a list of generated filenames of QM files in the \fB<qm\-files\-var>\fP
variable.  The \fB<ts\-files>\fP must exist and are not updated in any way.
.UNINDENT
.INDENT 0.0
.TP
.B qt4_automoc
Deprecated since version 2.8.11: Use feature provided by the \fI\%CMAKE_AUTOMOC\fP variable instead.

.sp
Runs \fBmoc\fP on input files:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_automoc(<source\-files>... [TARGET <target>])
.EE
.UNINDENT
.UNINDENT
.sp
This macro can be used to have \fBmoc\fP automatically handled.  For example, if
there are \fBfoo.h\fP and \fBfoo.cpp\fP files, and in \fBfoo.h\fP a class uses the
\fBQ_OBJECT\fP preprocessor macro, \fBmoc\fP has to run on it.  If using
\fBqt4_wrap_cpp()\fP isn\(aqt wanted (however, it is reliable and mature), the
\fB#include \(dqfoo.moc\(dq\fP can be inserted in \fBfoo.cpp\fP and then \fBfoo.cpp\fP
given as argument to \fBqt4_automoc()\fP\&.  This will scan all listed files
\fB<source\-files>\fP at configuration phase for such included moc files and if
it finds them, a rule is generated to run moc at build time on the
accompanying header file \fBfoo.h\fP\&.  If a source file has the
\fI\%SKIP_AUTOMOC\fP property set, file will be ignored by this macro.
.INDENT 7.0
.TP
.B \fBTARGET\fP
If specified, the \fBINTERFACE_INCLUDE_DIRECTORIES\fP and
\fBINTERFACE_COMPILE_DEFINITIONS\fP target properties from the \fB<target>\fP
are passed to \fBmoc\fP\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B qt4_use_modules
Deprecated since version 2.8.11: Use \fI\%target_link_libraries()\fP with \fI\%Imported Targets\fP instead.

.sp
Provides Qt modules to a project for linking them to a target:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
qt4_use_modules(<target> [<LINK_PUBLIC|LINK_PRIVATE>] <modules>...)
.EE
.UNINDENT
.UNINDENT
.sp
This function makes \fB<target>\fP use the \fB<modules>\fP from Qt.  Using a Qt
module means to link to the library, add the relevant include directories for
the module, and add the relevant compiler defines for using the module.
Modules are roughly equivalent to Qt4 components.
.INDENT 7.0
.TP
.B \fBLINK_PUBLIC\fP or \fBLINK_PRIVATE\fP
Optional linking mode, used as the corresponding argument in the
\fBtarget_link_libraries()\fP call.
.UNINDENT
.sp
For example, calling \fBqt4_use_modules(myexe Core Gui Declarative)\fP will use
the \fBQtCore\fP, \fBQtGui\fP and \fBQtDeclarative\fP components on the project
target \fBmyexe\fP\&.
.UNINDENT
.SS Examples
.sp
Typical usage to find Qt4, could be something like:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
find_package(Qt4 4.4.3 REQUIRED QtGui QtXml)
add_executable(myexe main.cpp)
target_link_libraries(myexe PRIVATE Qt4::QtGui Qt4::QtXml)
.EE
.UNINDENT
.UNINDENT
.SS FindQuickTime
.sp
Finds the QuickTime multimedia framework, which provides support for video,
audio, and interactive media.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is for the QuickTime framework, which has been deprecated by Apple
and is no longer supported.  On Apple systems, use AVFoundation and AVKit
instead.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBQuickTime_FOUND\fP
Boolean indicating whether the QuickTime is found.  For backward
compatibility, the \fBQUICKTIME_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBQUICKTIME_LIBRARY\fP
The path to the QuickTime library.
.TP
.B \fBQUICKTIME_INCLUDE_DIR\fP
Directory containing QuickTime headers.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBQUICKTIME_DIR\fP
Environment variable that can be set to help locate a QuickTime library
installed in a custom location.  It should point to the installation
destination that was used when configuring, building, and installing QuickTime
library: \fB\&./configure \-\-prefix=$QUICKTIME_DIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding QuickTime library:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(QuickTime)
.EE
.UNINDENT
.UNINDENT
.SS FindRTI
.sp
Finds HLA RTI standard libraries and their include directories.
.sp
\X'tty: link https://en.wikipedia.org/wiki/Run-time_infrastructure_(simulation)'\fI\%RTI\fP\X'tty: link'
(Run\-Time Infrastructure) is a simulation infrastructure standardized by IEEE
and SISO, required when implementing HLA (High Level Architecture).  It provides
a well\-defined C++ API, ensuring that M&S (Modeling and Simulation) applications
remain independent of a particular RTI implementation.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBRTI_FOUND\fP
Set to FALSE if any HLA RTI was not found.
.TP
.B \fBRTI_LIBRARIES\fP
The libraries to link against to use RTI.
.TP
.B \fBRTI_DEFINITIONS\fP
Compile definitions for using RTI.  Default value is set to
\fB\-DRTI_USES_STD_FSTREAM\fP\&.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBRTI_INCLUDE_DIR\fP
Directory where RTI include files are found.
.UNINDENT
.SS Examples
.sp
Finding RTI:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(RTI)
.EE
.UNINDENT
.UNINDENT
.SS FindRuby
.sp
This module determines if Ruby is installed and finds the locations of its
include files and libraries. Ruby 1.8 through 3.4 are supported.
.sp
The minimum required version of Ruby can be specified using the
standard syntax, e.g.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Ruby 3.2.6 EXACT REQUIRED)
# OR
find_package(Ruby 3.2)
.EE
.UNINDENT
.UNINDENT
.sp
Virtual environments, such as RVM or RBENV, are supported.
.SS Result Variables
.sp
This module will set the following variables in your project:
.INDENT 0.0
.TP
.B \fBRuby_FOUND\fP
set to true if ruby was found successfully
.TP
.B \fBRuby_EXECUTABLE\fP
full path to the ruby binary
.TP
.B \fBRuby_INCLUDE_DIRS\fP
include dirs to be used when using the ruby library
.TP
.B \fBRuby_LIBRARIES\fP
Added in version 3.18: libraries needed to use ruby from C.

.TP
.B \fBRuby_VERSION\fP
the version of ruby which was found, e.g. \(dq3.2.6\(dq
.TP
.B \fBRuby_VERSION_MAJOR\fP
Ruby major version.
.TP
.B \fBRuby_VERSION_MINOR\fP
Ruby minor version.
.TP
.B \fBRuby_VERSION_PATCH\fP
Ruby patch version.
.UNINDENT
.sp
Changed in version 3.18: Previous versions of CMake used the \fBRUBY_\fP prefix for all variables.

.sp
Deprecated since version 4.0: The following variables are deprecated.  See policy \fI\%CMP0185\fP\&.
.INDENT 0.0
.TP
.B \fBRUBY_EXECUTABLE\fP
same as \fBRuby_EXECUTABLE\fP\&.
.TP
.B \fBRUBY_INCLUDE_DIRS\fP
same as \fBRuby_INCLUDE_DIRS\fP\&.
.TP
.B \fBRUBY_INCLUDE_PATH\fP
same as \fBRuby_INCLUDE_DIRS\fP\&.
.TP
.B \fBRUBY_LIBRARY\fP
same as \fBRuby_LIBRARY\fP\&.
.TP
.B \fBRUBY_VERSION\fP
same as \fBRuby_VERSION\fP\&.
.TP
.B \fBRUBY_FOUND\fP
same as \fBRuby_FOUND\fP\&.
.UNINDENT

.SS Hints
.INDENT 0.0
.TP
.B \fBRuby_FIND_VIRTUALENV\fP
Added in version 3.18.

.sp
This variable defines the handling of virtual environments.
It can be left empty or be set to one of the following values:
.INDENT 7.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBFIRST\fP: Virtual Ruby environments are searched for first,
then the system Ruby installation.
This is the default.
.UNINDENT
.IP \(bu 2
\fBONLY\fP: Only virtual environments are searched
.IP \(bu 2
\fBSTANDARD\fP: Only the system Ruby installation is searched.
.UNINDENT
.sp
Virtual environments may be provided by:
.INDENT 7.0
.TP
.B \fBrvm\fP
Requires that the \fBMY_RUBY_HOME\fP environment environment is defined.
.TP
.B \fBrbenv\fP
Requires that \fBrbenv\fP is installed in \fB~/.rbenv/bin\fP
or that the \fBRBENV_ROOT\fP environment variable is defined.
.UNINDENT
.UNINDENT
.SS FindSDL
.sp
Finds the SDL (Simple DirectMedia Layer) library.  SDL is a cross\-platform
library for developing multimedia software, such as games and emulators.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for SDL version 1.  Starting with version
2, SDL provides a CMake package configuration file when built with CMake and
should be found using \fBfind_package(SDL2)\fP\&.  Similarly, SDL version 3 can be
found using \fBfind_package(SDL3)\fP\&.  These newer versions provide separate
\fI\%Imported Targets\fP that encapsulate usage requirements.  Refer to the
official SDL documentation for more information.
.UNINDENT
.UNINDENT
.sp
Note that the include path for the SDL header has changed in recent SDL 1
versions from \fBSDL/SDL.h\fP to simply \fBSDL.h\fP\&.  This change aligns with SDL\(aqs
convention of using \fB#include \(dqSDL.h\(dq\fP for portability, as not all systems
install the headers in a \fBSDL/\fP subdirectory (e.g., FreeBSD).
.sp
When targeting macOS and using the SDL framework, be sure to include both
\fBSDLmain.h\fP and \fBSDLmain.m\fP in the project.  For other platforms, the
\fBSDLmain\fP library is typically linked using \fB\-lSDLmain\fP, which this module
will attempt to locate automatically.  Additionally, for macOS, this module will
add the \fB\-framework Cocoa\fP flag as needed.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBSDL::SDL\fP
Added in version 3.19.

.sp
Target encapsulating the SDL library usage requirements, available if SDL is
found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_FOUND\fP
Boolean indicating whether the (requested version of) SDL is found.
.TP
.B \fBSDL_VERSION\fP
Added in version 3.19.

.sp
The human\-readable string containing the version of SDL found.
.TP
.B \fBSDL_VERSION_MAJOR\fP
Added in version 3.19.

.sp
The major version of SDL found.
.TP
.B \fBSDL_VERSION_MINOR\fP
Added in version 3.19.

.sp
The minor version of SDL found.
.TP
.B \fBSDL_VERSION_PATCH\fP
Added in version 3.19.

.sp
The patch version of SDL found.
.TP
.B \fBSDL_INCLUDE_DIRS\fP
Added in version 3.19.

.sp
Include directories needed to use SDL.
.TP
.B \fBSDL_LIBRARIES\fP
Added in version 3.19.

.sp
Libraries needed to link against to use SDL.
.UNINDENT
.SS Cache Variables
.sp
These variables may optionally be set to help this module find the correct
files:
.INDENT 0.0
.TP
.B \fBSDL_INCLUDE_DIR\fP
The directory containing the \fBSDL.h\fP header file.
.TP
.B \fBSDL_LIBRARY\fP
A list of libraries containing the path to the SDL library and libraries
needed to link against to use SDL.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDL_BUILDING_LIBRARY\fP
When set to boolean true, the \fBSDL_main\fP library will be excluded from
linking, as it is not required when building the SDL library itself (only
applications need \fBmain()\fP function).  If not set, this module assumes an
application is being built and attempts to locate and include the appropriate
\fBSDL_main\fP link flags in the returned \fBSDL_LIBRARY\fP variable.
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.sp
On macOS, setting this variable will prefer the Framework version (if found)
over others.  In this case, the cache value of \fBSDL_LIBRARY\fP would need to
be manually changed to override this selection or set the
\fI\%CMAKE_INCLUDE_PATH\fP variable to modify the search paths.
.UNINDENT
.SS Troubleshooting
.sp
In case the SDL library is not found automatically, the \fBSDL_LIBRARY_TEMP\fP
variable may be empty, and \fBSDL_LIBRARY\fP will not be set.  This typically
means that CMake could not locate the SDL library (e.g., \fBSDL.dll\fP,
\fBlibSDL.so\fP, \fBSDL.framework\fP, etc.).  To resolve this, manually set
\fBSDL_LIBRARY_TEMP\fP to the correct path and reconfigure the project.
Similarly, if \fBSDLMAIN_LIBRARY\fP is unset, it may also need to be specified
manually.  These variables are used to construct the final \fBSDL_LIBRARY\fP
value.  If they are not set, \fBSDL_LIBRARY\fP will remain undefined.
.SS Deprecated Variables
.sp
These variables are obsolete and provided for backwards compatibility:
.INDENT 0.0
.TP
.B \fBSDL_VERSION_STRING\fP
Deprecated since version 3.19: Superseded by the \fBSDL_VERSION\fP with the same value.

.sp
The human\-readable string containing the version of SDL if found.
.UNINDENT
.SS Examples
.sp
Finding SDL library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL)
target_link_libraries(project_target PRIVATE SDL::SDL)
.EE
.UNINDENT
.UNINDENT
.sp
When working with SDL version 2, the upstream package provides the
\fBSDL2::SDL2\fP imported target directly.  It can be used in a project without
using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL2)
target_link_libraries(project_target PRIVATE SDL2::SDL2)
.EE
.UNINDENT
.UNINDENT
.sp
Similarly, for SDL version 3:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL3)
target_link_libraries(project_target PRIVATE SDL3::SDL3)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL_gfx\fP module to find the SDL_gfx library.
.IP \(bu 2
The \fI\%FindSDL_image\fP module to find the SDL_image library.
.IP \(bu 2
The \fI\%FindSDL_mixer\fP module to find the SDL_mixer library.
.IP \(bu 2
The \fI\%FindSDL_net\fP module to find the SDL_net library.
.IP \(bu 2
The \fI\%FindSDL_sound\fP module to find the SDL_sound library.
.IP \(bu 2
The \fI\%FindSDL_ttf\fP module to find the SDL_ttf library.
.UNINDENT
.SS FindSDL_gfx
.sp
Added in version 3.25.

.sp
Finds the SDL_gfx library that provides graphics support in SDL (Simple
DirectMedia Layer) applications.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is for SDL_gfx version 1.  For version 2 or newer usage refer to
the upstream documentation.
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBSDL::SDL_gfx\fP
Target encapsulating the SDL_gfx library usage requirements, available if
SDL_gfx is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_gfx_FOUND\fP
Boolean indicating whether the (requested version of) SDL_gfx library is
found.  For backward compatibility, the \fBSDL_GFX_FOUND\fP variable is also set
to the same value.
.TP
.B \fBSDL_GFX_VERSION_STRING\fP
The human\-readable string containing the version of SDL_gfx found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBSDL_GFX_INCLUDE_DIRS\fP
The directory containing the headers needed to use SDL_gfx.
.TP
.B \fBSDL_GFX_LIBRARIES\fP
The path to the SDL_gfx library needed to link against to use SDL_gfx.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding SDL_gfx library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL_gfx)
target_link_libraries(project_target PRIVATE SDL::SDL_gfx)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL\fP module to find the main SDL library.
.UNINDENT
.SS FindSDL_image
.sp
Finds the SDL_image library that loads images of various formats as SDL (Simple
DirectMedia Layer) surfaces.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for SDL_image version 1.  Starting with
version 2.6, SDL_image provides a CMake package configuration file when built
with CMake and should be found using \fBfind_package(SDL2_image)\fP\&.  Similarly,
SDL_image version 3 can be found using \fBfind_package(SDL3_image)\fP\&.  These
newer versions provide \fI\%Imported Targets\fP that encapsulate usage
requirements.  Refer to the official SDL documentation for more information.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_image_FOUND\fP
Boolean indicating whether the (requested version of) SDL_image library is
found.  For backward compatibility, the \fBSDL_IMAGE_FOUND\fP variable is also
set to the same value.
.TP
.B \fBSDL_IMAGE_VERSION_STRING\fP
The human\-readable string containing the version of SDL_image found.
.TP
.B \fBSDL_IMAGE_INCLUDE_DIRS\fP
Include directories containing headers needed to use the SDL_image library.
.TP
.B \fBSDL_IMAGE_LIBRARIES\fP
Libraries needed to link against to use the SDL_image library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.UNINDENT
.SS Deprecated Variables
.sp
For backward compatibility the following variables are also set:
.INDENT 0.0
.TP
.B \fBSDLIMAGE_FOUND\fP
Deprecated since version 2.8.10: Use the \fBSDL_image_FOUND\fP, which has the same value.

.TP
.B \fBSDLIMAGE_INCLUDE_DIR\fP
Deprecated since version 2.8.10: Use the \fBSDL_IMAGE_INCLUDE_DIRS\fP, which has the same value.

.TP
.B \fBSDLIMAGE_LIBRARY\fP
Deprecated since version 2.8.10: Use the \fBSDL_IMAGE_LIBRARIES\fP, which has the same value.

.UNINDENT
.SS Examples
.sp
Finding SDL_image library and creating an imported interface target for linking
it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL_image)

if(SDL_image_FOUND AND NOT TARGET SDL::SDL_image)
  add_library(SDL::SDL_image INTERFACE IMPORTED)
  set_target_properties(
    SDL::SDL_image
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${SDL_IMAGE_INCLUDE_DIRS}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${SDL_IMAGE_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE SDL::SDL_image)
.EE
.UNINDENT
.UNINDENT
.sp
When working with SDL_image version 2, the upstream package provides the
\fBSDL2_image::SDL2_image\fP imported target directly.  It can be used in a
project without using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL2_image)
target_link_libraries(project_target PRIVATE SDL2_image::SDL2_image)
.EE
.UNINDENT
.UNINDENT
.sp
Similarly, for SDL_image version 3:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL3_image)
target_link_libraries(project_target PRIVATE SDL3_image::SDL3_image)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL\fP module to find the main SDL library.
.UNINDENT
.SS FindSDL_mixer
.sp
Finds the SDL_mixer library that provides an audio mixer with support for
various file formats in SDL (Simple DirectMedia Layer) applications.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for SDL_mixer version 1.  Starting with
version 2.5, SDL_mixer provides a CMake package configuration file when built
with CMake and should be found using \fBfind_package(SDL2_mixer)\fP\&.  These
newer versions provide \fI\%Imported Targets\fP that encapsulate usage
requirements.  Refer to the official SDL documentation for more information.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_mixer_FOUND\fP
Boolean indicating whether the (requested version of) SDL_mixer library is
found.  For backward compatibility, the \fBSDL_MIXER_FOUND\fP variable is also
set to the same value.
.TP
.B \fBSDL_MIXER_VERSION_STRING\fP
The human\-readable string containing the version of SDL_mixer found.
.TP
.B \fBSDL_MIXER_INCLUDE_DIRS\fP
Include directories containing headers needed to use the SDL_mixer library.
.TP
.B \fBSDL_MIXER_LIBRARIES\fP
Libraries needed to link against to use SDL_mixer.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.UNINDENT
.SS Deprecated Variables
.sp
For backward compatibility the following variables are also set:
.INDENT 0.0
.TP
.B \fBSDLMIXER_FOUND\fP
Deprecated since version 2.8.10: Use \fBSDL_mixer_FOUND\fP, which has the same value.

.TP
.B \fBSDLMIXER_INCLUDE_DIR\fP
Deprecated since version 2.8.10: Use \fBSDL_MIXER_INCLUDE_DIRS\fP, which has the same value.

.TP
.B \fBSDLMIXER_LIBRARY\fP
Deprecated since version 2.8.10: Use \fBSDL_MIXER_LIBRARIES\fP, which has the same value.

.UNINDENT
.SS Examples
.sp
Finding SDL_mixer library and creating an imported interface target for linking
it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL_mixer)

if(SDL_mixer_FOUND AND NOT TARGET SDL::SDL_mixer)
  add_library(SDL::SDL_mixer INTERFACE IMPORTED)
  set_target_properties(
    SDL::SDL_mixer
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${SDL_MIXER_INCLUDE_DIRS}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${SDL_MIXER_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE SDL::SDL_mixer)
.EE
.UNINDENT
.UNINDENT
.sp
When working with SDL_mixer version 2, the upstream package provides the
\fBSDL2_mixer::SDL2_mixer\fP imported target directly.  It can be used in a
project without using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL2_mixer)
target_link_libraries(project_target PRIVATE SDL2_mixer::SDL2_mixer)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL\fP module to find the main SDL library.
.UNINDENT
.SS FindSDL_net
.sp
Finds the SDL_net library, a cross\-platform network library for use with the
SDL (Simple DirectMedia Layer) applications.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for SDL_net version 1.  Starting with
version 2.1, SDL_net provides a CMake package configuration file when built
with CMake and should be found using \fBfind_package(SDL2_net)\fP\&.  These
newer versions provide \fI\%Imported Targets\fP that encapsulate usage
requirements.  Refer to the official SDL documentation for more information.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_net_FOUND\fP
Boolean indicating whether the (requested version of) SDL_net library is
found.  For backward compatibility, the \fBSDL_NET_FOUND\fP variable is also set
to the same value.
.TP
.B \fBSDL_NET_VERSION_STRING\fP
The human\-readable string containing the version of SDL_net found.
.TP
.B \fBSDL_NET_INCLUDE_DIRS\fP
Include directories containing headers needed to use the SDL_net library.
.TP
.B \fBSDL_NET_LIBRARIES\fP
Libraries needed to link against to use the SDL_net library.
.UNINDENT
.SS Deprecated Variables
.sp
For backward compatibility the following variables are also set:
.INDENT 0.0
.TP
.B \fBSDLNET_FOUND\fP
Deprecated since version 2.8.10: Use the \fBSDL_net_FOUND\fP, which has the same value.

.TP
.B \fBSDLNET_INCLUDE_DIR\fP
Deprecated since version 2.8.10: Use the \fBSDL_NET_INCLUDE_DIRS\fP, which has the same value.

.TP
.B \fBSDLNET_LIBRARY\fP
Deprecated since version 2.8.10: Use the \fBSDL_NET_LIBRARIES\fP, which has the same value.

.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding SDL_net library and creating an imported interface target for linking it
to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL_net)

if(SDL_net_FOUND AND NOT TARGET SDL::SDL_net)
  add_library(SDL::SDL_net INTERFACE IMPORTED)
  set_target_properties(
    SDL::SDL_net
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${SDL_NET_INCLUDE_DIRS}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${SDL_NET_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE SDL::SDL_net)
.EE
.UNINDENT
.UNINDENT
.sp
When working with SDL_net version 2, the upstream package provides the
\fBSDL2_net::SDL2_net\fP imported target directly.  It can be used in a project
without using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL2_net)
target_link_libraries(project_target PRIVATE SDL2_net::SDL2_net)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL\fP module to find the main SDL library.
.UNINDENT
.SS FindSDL_sound
.sp
Finds the SDL_sound library, an abstract soundfile decoder for use in SDL
(Simple DirectMedia Layer) applications.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for SDL_sound version 1.  Starting with
version 2.0.2, SDL_sound provides a CMake package configuration file when
built with CMake and should be found using \fBfind_package(SDL2_sound)\fP\&.
These newer versions provide \fI\%Imported Targets\fP that encapsulate usage
requirements.  Refer to the upstream SDL_sound documentation for more
information.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module depends on SDL being found and must be called after the
\fI\%find_package(SDL)\fP\&.
.sp
Depending on how the SDL_sound library is built, it may require additional
dependent libraries to be found for this module to succeed.  These
dependencies may include MikMod, ModPlug, Ogg, Vorbis, SMPEG, FLAC, and Speex.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_sound_FOUND\fP
Boolean indicating whether the (requested version of) SDL_sound library is
found.  For backward compatibility, the \fBSDL_SOUND_FOUND\fP variable is also
set to the same value.
.TP
.B \fBSDL_SOUND_VERSION_STRING\fP
The human\-readable string containing the version of SDL_sound found.
.TP
.B \fBSDL_SOUND_LIBRARIES\fP
Libraries needed to link against to use the SDL_sound library.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBSDL_SOUND_INCLUDE_DIR\fP
The directory containing the \fBSDL_sound.h\fP and other headers needed to use
the SDL_sound library.
.TP
.B \fBSDL_SOUND_LIBRARY\fP
The name of just the SDL_sound library you would link against.  Use
\fBSDL_SOUND_LIBRARIES\fP for the link instructions and not this one.
.TP
.B \fBMIKMOD_LIBRARY\fP
The path to the dependent MikMod library.
.TP
.B \fBMODPLUG_LIBRARY\fP
The path to the dependent ModPlug library (libmodplug).
.TP
.B \fBOGG_LIBRARY\fP
The path to the dependent Ogg library.
.TP
.B \fBVORBIS_LIBRARY\fP
The path to the dependent Vorbis library.
.TP
.B \fBSMPEG_LIBRARY\fP
The path to the dependent SMPEG library.
.TP
.B \fBFLAC_LIBRARY\fP
The path to the dependent FLAC library.
.TP
.B \fBSPEEX_LIBRARY\fP
The path to the dependent Speex library.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.sp
On macOS, setting this variable will prefer the Framework version (if found)
over others.  In this case, the cache value of \fBSDL_LIBRARY\fP would need to
be manually changed to override this selection or set the
\fI\%CMAKE_INCLUDE_PATH\fP variable to modify the search paths.
.TP
.B \fBSDLSOUNDDIR\fP
Environment variable that works the same as \fBSDLDIR\fP\&.
.TP
.B \fBSDL_SOUND_EXTRAS\fP
This is an optional cache variable that can be used to add additional flags
that are prepended to the \fBSDL_SOUND_LIBRARIES\fP result variable.  This is
available mostly for cases this module failed to anticipate for and additional
flags must be added.
.UNINDENT
.SS Examples
.sp
Finding SDL_sound library and creating an imported interface target for linking
it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL)
find_package(SDL_sound)

if(SDL_sound_FOUND AND NOT TARGET SDL::SDL_sound)
  add_library(SDL::SDL_sound INTERFACE IMPORTED)
  set_target_properties(
    SDL::SDL_sound
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${SDL_SOUND_INCLUDE_DIR}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${SDL_SOUND_LIBRARIES}\(dq
  )

  # Append the SDL dependency as imported target to be transitively linked:
  set_property(
    TARGET SDL::SDL_sound
    APPEND
    PROPERTY INTERFACE_LINK_LIBRARIES SDL::SDL
  )
endif()

target_link_libraries(project_target PRIVATE SDL::SDL_sound)
.EE
.UNINDENT
.UNINDENT
.sp
When working with SDL_sound version 2, the upstream package provides the
\fBSDL2_sound::SDL2_sound\fP imported target directly.  It can be used in a
project without using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL2_sound)
target_link_libraries(project_target PRIVATE SDL2_sound::SDL2_sound)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL\fP module to find the main SDL library.
.UNINDENT
.SS FindSDL_ttf
.sp
Finds the SDL_ttf library that provides support for rendering text with TrueType
fonts in SDL (Simple DirectMedia Layer) applications.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is specifically intended for SDL_ttf version 1.  Starting with
version 2.0.15, SDL_ttf provides a CMake package configuration file when built
with CMake and should be found using \fBfind_package(SDL2_ttf)\fP\&.  Similarly,
SDL_ttf version 3 can be found using \fBfind_package(SDL3_ttf)\fP\&.  These newer
versions provide \fI\%Imported Targets\fP that encapsulate usage requirements.
Refer to the official SDL documentation for more information.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSDL_ttf_FOUND\fP
Boolean indicating whether the (requested version of) SDL_ttf library is
found.  For backward compatibility, the \fBSDL_TTF_FOUND\fP variable is also set
to the same value.
.TP
.B \fBSDL_TTF_VERSION_STRING\fP
The human\-readable string containing the version of SDL_ttf found.
.TP
.B \fBSDL_TTF_INCLUDE_DIRS\fP
Include directories containing headers needed to use SDL_ttf library.
.TP
.B \fBSDL_TTF_LIBRARIES\fP
Libraries needed to link against to use SDL_ttf.
.UNINDENT
.SS Deprecated Variables
.sp
For backward compatibility the following variables are also set:
.INDENT 0.0
.TP
.B \fBSDLTTF_FOUND\fP
Deprecated since version 2.8.10: Replaced with \fBSDL_ttf_FOUND\fP, which has the same value.

.TP
.B \fBSDLTTF_INCLUDE_DIR\fP
Deprecated since version 2.8.10: Replaced with \fBSDL_TTF_INCLUDE_DIRS\fP, which has the same value.

.TP
.B \fBSDLTTF_LIBRARY\fP
Deprecated since version 2.8.10: Replaced with \fBSDL_TTF_LIBRARIES\fP, which has the same value.

.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBSDLDIR\fP
Environment variable that can be set to help locate an SDL library installed
in a custom location.  It should point to the installation destination that
was used when configuring, building, and installing SDL library:
\fB\&./configure \-\-prefix=$SDLDIR\fP\&.
.UNINDENT
.SS Examples
.sp
Finding SDL_ttf library and creating an imported interface target for linking
it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL_ttf)

if(SDL_ttf_FOUND AND NOT TARGET SDL::SDL_ttf)
  add_library(SDL::SDL_ttf INTERFACE IMPORTED)
  set_target_properties(
    SDL::SDL_ttf
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES \(dq${SDL_TTF_INCLUDE_DIRS}\(dq
      INTERFACE_LINK_LIBRARIES \(dq${SDL_TTF_LIBRARIES}\(dq
  )
endif()

target_link_libraries(project_target PRIVATE SDL::SDL_ttf)
.EE
.UNINDENT
.UNINDENT
.sp
When working with SDL_ttf version 2, the upstream package provides the
\fBSDL2_ttf::SDL2_ttf\fP imported target directly.  It can be used in a project
without using this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL2_ttf)
target_link_libraries(project_target PRIVATE SDL2_ttf::SDL2_ttf)
.EE
.UNINDENT
.UNINDENT
.sp
Similarly, for SDL_ttf version 3:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SDL3_ttf)
target_link_libraries(project_target PRIVATE SDL3_ttf::SDL3_ttf)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindSDL\fP module to find the main SDL library.
.UNINDENT
.SS FindSelfPackers
.sp
Finds \X'tty: link https://upx.github.io/'\fI\%UPX\fP\X'tty: link', the Ultimate Packer for eXecutables.
.sp
This module searches for executable packers\-tools that compress executables or
shared libraries into on\-the\-fly, self\-extracting versions.  It currently
supports \fBUPX\fP\&.
.SS Cache Variables
.sp
The following cache variables may be set:
.INDENT 0.0
.TP
.B \fBSELF_PACKER_FOR_EXECUTABLE\fP
Path to the executable packer for compressing executables.
.TP
.B \fBSELF_PACKER_FOR_SHARED_LIB\fP
Path to the executable packer for compressing shared libraries.
.TP
.B \fBSELF_PACKER_FOR_EXECUTABLE_FLAGS\fP
Command\-line options to use when compressing executables.
.TP
.B \fBSELF_PACKER_FOR_SHARED_LIB_FLAGS\fP
Command\-line options to use when compressing shared libraries.
.UNINDENT
.SS Examples
.sp
Finding UPX:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SelfPackers)
.EE
.UNINDENT
.UNINDENT
.SS FindSquish
.sp
Finds Squish, a cross\-platform automated GUI testing framework for applications
built on various GUI technologies.  Squish supports testing of both native and
cross\-platform toolkits, such as Qt, Java, and Tk.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSquish_FOUND\fP
Boolean indicating whether the (requested version of) Squish is found.  For
backward compatibility, the \fBSQUISH_FOUND\fP variable is also set to the same
value.
.TP
.B \fBSQUISH_VERSION\fP
The full version of the Squish found.
.TP
.B \fBSQUISH_VERSION_MAJOR\fP
The major version of the Squish found.
.TP
.B \fBSQUISH_VERSION_MINOR\fP
The minor version of the Squish found.
.TP
.B \fBSQUISH_VERSION_PATCH\fP
The patch version of the Squish found.
.TP
.B \fBSQUISH_INSTALL_DIR_FOUND\fP
Boolean indicating whether the Squish installation directory is found.
.TP
.B \fBSQUISH_SERVER_EXECUTABLE_FOUND\fP
Boolean indicating whether the Squish server executable is found.
.TP
.B \fBSQUISH_CLIENT_EXECUTABLE_FOUND\fP
Boolean indicating whether the Squish client executable is found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBSQUISH_INSTALL_DIR\fP
The Squish installation directory containing \fBbin\fP, \fBlib\fP, etc.
.TP
.B \fBSQUISH_SERVER_EXECUTABLE\fP
The path to the \fBsquishserver\fP executable.
.TP
.B \fBSQUISH_CLIENT_EXECUTABLE\fP
The path to the \fBsquishrunner\fP executable.
.UNINDENT
.SS Commands
.sp
This module provides the following commands, if Squish is found:
.INDENT 0.0
.TP
.B squish_add_test
Adds a Squish test to the project:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
squish_add_test(
  <name>
  AUT <target>
  SUITE <suite\-name>
  TEST <squish\-test\-case\-name>
  [PRE_COMMAND <command>]
  [POST_COMMAND <command>]
  [SETTINGSGROUP <group>]
)
.EE
.UNINDENT
.UNINDENT
.sp
This command is built on top of the \fI\%add_test()\fP command and adds a
Squish test called \fB<name>\fP to the CMake project.  It supports Squish
versions 4 and newer.
.sp
During the CMake testing phase, the Squish server is started, the test is
executed on the client, and the server is stopped once the test completes.  If
any of these steps fail (including if the test itself fails), a fatal error is
raised indicating the test did not pass.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<name>\fP
The name of the test.  This is passed as the first argument to the
\fI\%add_test()\fP command.
.TP
.B \fBAUT <target>\fP
The name of the CMake target to be used as the AUT (Application Under Test),
i.e., the executable that will be tested.
.TP
.B \fBSUITE <suite\-name>\fP
Either the full path to the Squish test suite or just the suite name (i.e.,
the last directory name of the suite).  In the latter case, the
\fBCMakeLists.txt\fP invoking \fBsquish_add_test()\fP must reside in the parent
directory of the suite.
.TP
.B \fBTEST <squish\-test\-case\-name>\fP
The name of the Squish test, corresponding to the subdirectory of the test
within the suite directory.
.TP
.B \fBPRE_COMMAND <command>\fP
An optional command to execute before starting the Squish test.  Pass it as
a string.  This may be a single command, or a \fI\%semicolon\-separated list\fP of command and arguments.
.TP
.B \fBPOST_COMMAND <command>\fP
An optional command to execute after the Squish test has completed.  Pass it
as a string.  This may be a single command, or a \fI\%semicolon\-separated
list\fP of command and arguments.
.TP
.B \fBSETTINGSGROUP <group>\fP
Deprecated since version 3.18: This argument is now ignored.  It was previously used to specify a
settings group name for executing the test instead of the default value
\fBCTest_<username>\fP\&.

.UNINDENT
.sp
Changed in version 3.18: In previous CMake versions, this command was named \fBsquish_v4_add_test()\fP\&.

.UNINDENT
.INDENT 0.0
.TP
.B squish_v3_add_test
Adds a Squish test to the project, when using Squish version 3.x:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
squish_v3_add_test(
  <test\-name>
  <application\-under\-test>
  <squish\-test\-case\-name>
  <environment\-variables>
  <test\-wrapper>
)
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This command is for Squish version 3, which is not maintained anymore.  Use
a newer Squish version, and \fBsquish_add_test()\fP command.
.UNINDENT
.UNINDENT
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<name>\fP
The name of the test.
.TP
.B \fB<application\-under\-test>\fP
The path to the executable used as the AUT (Application Under Test), i.e.,
the executable that will be tested.
.TP
.B \fB<squish\-test\-case\-name>\fP
The name of the Squish test, corresponding to the subdirectory of the test
within the suite directory.
.TP
.B \fB<environment\-variables>\fP
A semicolon\-separated list of environment variables and their values
(VAR=VALUE).
.TP
.B \fB<test\-wrapper>\fP
A string of one or more (semicolon\-separated list) test wrappers needed by
the test case.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding Squish and specifying a minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Squish 6.5)
.EE
.UNINDENT
.UNINDENT
.sp
Adding a Squish test:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
enable_testing()

find_package(Squish 6.5)
if(Squish_FOUND)
  squish_add_test(
    projectTestName
    AUT projectApp
    SUITE ${CMAKE_CURRENT_SOURCE_DIR}/tests/projectSuite
    TEST someSquishTest
  )
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Example, how to use the \fBsquish_v3_add_test()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
enable_testing()

find_package(Squish 3.0)
if(Squish_FOUND)
  squish_v3_add_test(
    projectTestName
    $<TARGET_FILE:projectApp>
    someSquishTest
    \(dqFOO=1;BAR=2\(dq
    testWrapper
  )
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindSQLite3
.sp
Added in version 3.14.

.sp
Finds the SQLite 3 library.  SQLite is a small, fast, self\-contained,
high\-reliability, and full\-featured SQL database engine written in C, intended
for embedding in applications.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBSQLite::SQLite3\fP
Target encapsulating SQLite library usage requirements.  It is available only
when SQLite is found.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBSQLite3_INCLUDE_DIRS\fP
Include directories containing the \fBsqlite3.h\fP and related headers needed
to use SQLite.
.TP
.B \fBSQLite3_LIBRARIES\fP
Libraries needed to link against to use SQLite.
.TP
.B \fBSQLite3_VERSION\fP
Version of the SQLite library found.
.TP
.B \fBSQLite3_FOUND\fP
Boolean indicating whether the SQLite library is found.
.UNINDENT
.SS Examples
.sp
Finding the SQLite library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SQLite3)
target_link_libraries(project_target PRIVATE SQLite::SQLite3)
.EE
.UNINDENT
.UNINDENT
.SS FindSubversion
.sp
Finds a Subversion command\-line client executable (\fBsvn\fP) and provides
commands for extracting information from a Subversion working copy:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Subversion [<version>] [...])
.EE
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBSubversion_FOUND\fP
Boolean indicating whether (the requested version of) Subversion command\-line
client is found.  For backward compatibility, the \fBSUBVERSION_FOUND\fP
variable is also set to the same value.
.TP
.B \fBSubversion_VERSION_SVN\fP
Version of the \fBsvn\fP command\-line client found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBSubversion_SVN_EXECUTABLE\fP
Path to the \fBsvn\fP command\-line client.
.UNINDENT
.SS Commands
.sp
This module provides the following commands if the Subversion command\-line
client is found:
.INDENT 0.0
.TP
.B Subversion_WC_INFO
Extracts information from a Subversion working copy located at a specified
directory:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
Subversion_WC_INFO(<dir> <var\-prefix> [IGNORE_SVN_FAILURE])
.EE
.UNINDENT
.UNINDENT
.sp
This command defines the following variables if running Subversion\(aqs \fBinfo\fP
subcommand on \fB<dir>\fP succeeds; otherwise a \fBSEND_ERROR\fP message is
generated:
.INDENT 7.0
.TP
.B \fB<var\-prefix>_WC_URL\fP
URL of the repository (at \fB<dir>\fP).
.TP
.B \fB<var\-prefix>_WC_ROOT\fP
Root URL of the repository.
.TP
.B \fB<var\-prefix>_WC_REVISION\fP
Current revision.
.TP
.B \fB<var\-prefix>_WC_LAST_CHANGED_AUTHOR\fP
Author of last commit.
.TP
.B \fB<var\-prefix>_WC_LAST_CHANGED_DATE\fP
Date of last commit.
.TP
.B \fB<var\-prefix>_WC_LAST_CHANGED_REV\fP
Revision of last commit.
.TP
.B \fB<var\-prefix>_WC_INFO\fP
Output of the command \fBsvn info <dir>\fP
.UNINDENT
.sp
The options are:
.INDENT 7.0
.TP
.B \fBIGNORE_SVN_FAILURE\fP
Added in version 3.13.

.sp
When specified, errors from Subversion operation will not trigger a
\fBSEND_ERROR\fP message.  In case of an error, the \fB<var\-prefix>_*\fP
variables remain undefined.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B Subversion_WC_LOG
Retrieves the log message of the base revision of a Subversion working copy at
a given location:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
Subversion_WC_LOG(<dir> <var\-prefix>)
.EE
.UNINDENT
.UNINDENT
.sp
This command defines the following variable if running Subversion\(aqs \fBlog\fP
subcommand on \fB<dir>\fP succeeds; otherwise a \fBSEND_ERROR\fP message is
generated:
.INDENT 7.0
.TP
.B \fB<var\-prefix>_LAST_CHANGED_LOG\fP
Last log of the base revision of a Subversion working copy located at
\fB<dir>\fP\&.
.UNINDENT
.UNINDENT
.SS Examples
.SS Examples: Finding Subversion
.sp
Finding Subversion:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Subversion)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Subversion and specifying a minimum required version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Subversion 1.4)
.EE
.UNINDENT
.UNINDENT
.sp
Or, finding Subversion and making it required (if not found, processing stops
with an error message):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Subversion REQUIRED)
.EE
.UNINDENT
.UNINDENT
.SS Example: Using Subversion
.sp
Finding Subversion and retrieving information about the current project\(aqs
working copy:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Subversion)
if(Subversion_FOUND)
  Subversion_WC_INFO(${PROJECT_SOURCE_DIR} Project)
  message(\(dqCurrent revision is ${Project_WC_REVISION}\(dq)
  Subversion_WC_LOG(${PROJECT_SOURCE_DIR} Project)
  message(\(dqLast changed log is ${Project_LAST_CHANGED_LOG}\(dq)
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindSWIG
.sp
Find the Simplified Wrapper and Interface Generator (\X'tty: link https://swig.org'\fI\%SWIG\fP\X'tty: link') executable.
.sp
This module finds an installed SWIG and determines its version.
.sp
Added in version 3.18: If a \fBCOMPONENTS\fP or \fBOPTIONAL_COMPONENTS\fP argument is given to the
\fI\%find_package()\fP command, it will also determine supported target
languages.

.sp
Added in version 3.19: When a version is requested, it can be specified as a simple value or as a
range. For a detailed description of version range usage and capabilities,
refer to the \fI\%find_package()\fP command.

.sp
The module defines the following variables:
.INDENT 0.0
.TP
.B \fBSWIG_FOUND\fP
Whether SWIG and any required components were found on the system.
.TP
.B \fBSWIG_EXECUTABLE\fP
Path to the SWIG executable.
.TP
.B \fBSWIG_DIR\fP
Path to the installed SWIG \fBLib\fP directory (result of \fBswig \-swiglib\fP).
.TP
.B \fBSWIG_VERSION\fP
SWIG executable version (result of \fBswig \-version\fP).
.TP
.B \fBSWIG_<lang>_FOUND\fP
If \fBCOMPONENTS\fP or \fBOPTIONAL_COMPONENTS\fP are requested, each available
target language \fB<lang>\fP (lowercase) will be set to TRUE.
.UNINDENT
.sp
Any \fBCOMPONENTS\fP given to \fBfind_package\fP should be the names of supported
target languages as provided to the LANGUAGE argument of \fBswig_add_library\fP,
such as \fBpython\fP or \fBperl5\fP\&. Language names \fImust\fP be lowercase.
.sp
All information is collected from the \fBSWIG_EXECUTABLE\fP, so the version
to be found can be changed from the command line by means of setting
\fBSWIG_EXECUTABLE\fP\&.
.sp
Example usage requiring SWIG 4.0 or higher and Python language support, with
optional Fortran support:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(SWIG 4.0 COMPONENTS python OPTIONAL_COMPONENTS fortran)
if(SWIG_FOUND)
  message(\(dqSWIG found: ${SWIG_EXECUTABLE}\(dq)
  if(NOT SWIG_fortran_FOUND)
    message(WARNING \(dqSWIG Fortran bindings cannot be generated\(dq)
  endif()
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindTCL
.sp
Finds the Tcl (Tool Command Language), dynamic programming language.
.sp
This module locates a Tcl installation, including its include directories and
libraries, and determines the appropriate Tcl library name for linking.  As part
of the Tcl ecosystem, it also finds Tk, a GUI toolkit that provides a library of
basic widgets for building graphical user interfaces.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBTCL_FOUND\fP
Boolean indicating whether the Tcl is found.
.TP
.B \fBTK_FOUND\fP
Boolean indicating whether the Tk is found.
.TP
.B \fBTCLTK_FOUND\fP
Boolean indicating whether both Tcl and Tk are found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBTCL_LIBRARY\fP
The path to the Tcl library (e.g., \fBtcl\fP, etc.).
.TP
.B \fBTCL_INCLUDE_PATH\fP
The directory containing \fBtcl.h\fP and other Tcl\-related headers needed to use
Tcl.
.TP
.B \fBTCL_TCLSH\fP
The path to the \fBtclsh\fP command\-line executable.
.TP
.B \fBTK_LIBRARY\fP
The path to the Tk library (e.g., \fBtk\fP, etc.).
.TP
.B \fBTK_INCLUDE_PATH\fP
The directory containing \fBtk.h\fP and other Tk\-related headers needed to use
Tk.
.TP
.B \fBTK_WISH\fP
The path to the \fBwish\fP windowing shell command\-line executable.
.UNINDENT
.SS Other Libraries
.sp
The Tcl Stub Library can be found using the separate \fI\%FindTclStub\fP
module.
.SS Examples
.sp
Finding Tcl:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(TCL)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindTclsh\fP module to find the Tcl shell command\-line executable.
.IP \(bu 2
The \fI\%FindTclStub\fP module to find the Tcl Stubs Library.
.IP \(bu 2
The \fI\%FindWish\fP module to find the \fBwish\fP windowing shell
command\-line executable .
.UNINDENT
.SS FindTclsh
.sp
Finds the Tcl shell command\-line executable (\fBtclsh\fP), which includes the Tcl
(Tool Command Language) interpreter.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBTclsh_FOUND\fP
Boolean indicating whether the \fBtclsh\fP executable (and the requested
version, if specified) is found.  For backward compatibility, the
\fBTCLSH_FOUND\fP variable is also set to the same value.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBTCL_TCLSH\fP
The path to the \fBtclsh\fP executable.
.UNINDENT
.SS Examples
.sp
Finding the \fBtclsh\fP command\-line executable:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Tclsh)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindTCL\fP module to find the Tcl installation.
.IP \(bu 2
The \fI\%FindTclStub\fP module to find the Tcl Stubs Library.
.UNINDENT
.SS FindTclStub
.sp
Finds the Tcl Stub Library, which is used for building version\-independent Tcl
extensions.
.sp
Tcl (Tool Command Language) is a dynamic programming language, and the Tcl Stub
Library provides a mechanism to allow Tcl extensions to be compiled in a way
that they can work across multiple Tcl versions, without requiring
recompilation.
.sp
This module is typically used in conjunction with Tcl development projects that
aim to be portable across different Tcl releases.  It first calls the
\fI\%FindTCL\fP module to locate Tcl installation and then attempts to find
the stub libraries corresponding to the located Tcl version.
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBTCL_STUB_LIBRARY\fP
The path to the Tcl stub library.
.TP
.B \fBTK_STUB_LIBRARY\fP
The path to the Tk stub library.
.TP
.B \fBTTK_STUB_LIBRARY\fP
The path to the ttk stub library.
.UNINDENT
.SS Examples
.sp
Finding Tcl Stubs Library:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(TclStub)
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%FindTCL\fP module to find the Tcl installation.
.IP \(bu 2
The \fI\%FindTclsh\fP module to find the Tcl shell command\-line executable.
.UNINDENT
.sp
Online references:
.INDENT 0.0
.IP \(bu 2
\X'tty: link https://www.tcl-lang.org/doc/howto/stubs.html'\fI\%How to Use the Tcl Stubs Library\fP\X'tty: link'
.IP \(bu 2
\X'tty: link https://www.oreilly.com/library/view/practical-programming-in/0130385603/'\fI\%Practical Programming in Tcl and Tk\fP\X'tty: link'
.UNINDENT
.SS FindThreads
.sp
This module determines the thread library of the system.
.SS Imported Targets
.sp
Added in version 3.1.

.sp
This module defines the following \fI\%IMPORTED\fP target:
.INDENT 0.0
.TP
.B \fBThreads::Threads\fP
The thread library, if found.
.UNINDENT
.SS Result Variables
.sp
The following variables are set:
.INDENT 0.0
.TP
.B \fBThreads_FOUND\fP
If a supported thread library was found.
.TP
.B \fBCMAKE_THREAD_LIBS_INIT\fP
The thread library to use. This may be empty if the thread functions
are provided by the system libraries and no special flags are needed
to use them.
.TP
.B \fBCMAKE_USE_WIN32_THREADS_INIT\fP
If the found thread library is the win32 one.
.TP
.B \fBCMAKE_USE_PTHREADS_INIT\fP
If the found thread library is pthread compatible.
.TP
.B \fBCMAKE_HP_PTHREADS_INIT\fP
If the found thread library is the HP thread library.
.UNINDENT
.SS Variables Affecting Behavior
.INDENT 0.0
.TP
.B THREADS_PREFER_PTHREAD_FLAG
Added in version 3.1.

.sp
If the use of the \-pthread compiler and linker flag is preferred then
the caller can set this variable to TRUE. The compiler flag can only be
used with the imported target. Use of both the imported target as well
as this switch is highly recommended for new code.
.sp
This variable has no effect if the system libraries provide the
thread functions, i.e. when \fBCMAKE_THREAD_LIBS_INIT\fP will be empty.
.UNINDENT
.SS FindTIFF
.sp
Finds the \X'tty: link https://libtiff.gitlab.io/libtiff/'\fI\%TIFF library\fP\X'tty: link' (\fBlibtiff\fP).
This module also takes into account the upstream TIFF library\(aqs exported CMake
package configuration, if available.
.SS Components
.sp
This module supports the following components:
.INDENT 0.0
.TP
.B \fBCXX\fP
Added in version 3.19.

.sp
Optional component that ensures that the C++ wrapper library (\fBlibtiffxx\fP)
is found.
.UNINDENT
.sp
Components can be specified using the standard syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(TIFF [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBTIFF::TIFF\fP
Added in version 3.5.

.sp
Target encapsulating the TIFF library usage requirements, available only if
the TIFF is found.
.TP
.B \fBTIFF::CXX\fP
Added in version 3.19.

.sp
Target encapsulating the usage requirements for the the C++ wrapper library
\fBlibtiffxx\fP, available only if TIFF is found.  This target provides CXX
usage requirements only if the compiler is not MSVC.  It also has the
\fBTIFF::TIFF\fP target linked in to simplify its usage.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBTIFF_FOUND\fP
Boolean indicating whether the TIFF is found.
.TP
.B \fBTIFF_VERSION_STRING\fP
The version of the TIFF library found.
.TP
.B \fBTIFF_INCLUDE_DIRS\fP
The directory containing the TIFF headers.
.TP
.B \fBTIFF_LIBRARIES\fP
TIFF libraries to be linked.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBTIFF_INCLUDE_DIR\fP
The directory containing the TIFF headers.
.TP
.B \fBTIFF_LIBRARY_RELEASE\fP
Added in version 3.4.

.sp
The path to the TIFF library for release configurations.
.TP
.B \fBTIFF_LIBRARY_DEBUG\fP
Added in version 3.4.

.sp
The path to the TIFF library for debug configurations.
.TP
.B \fBTIFFXX_LIBRARY_RELEASE\fP
Added in version 3.19.

.sp
The path to the TIFFXX library for release configurations.
.TP
.B \fBTIFFXX_LIBRARY_DEBUG\fP
Added in version 3.19.

.sp
The path to the TIFFXX library for debug configurations.
.UNINDENT
.SS Examples
.sp
Finding TIFF library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(TIFF)
target_link_libraries(project_target PRIVATE TIFF::TIFF)
.EE
.UNINDENT
.UNINDENT
.sp
Finding TIFF and TIFFXX libraries by specifying the \fBCXX\fP component:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(TIFF COMPONENTS CXX)
target_link_libraries(project_target PRIVATE TIFF::CXX)
.EE
.UNINDENT
.UNINDENT
.SS FindVulkan
.sp
Added in version 3.7.

.sp
Finds Vulkan, a low\-overhead, cross\-platform 3D graphics and computing API,
along with related development tools typically provided by the Vulkan SDK.  This
includes commonly used utilities such as shader compilers and SPIR\-V tools
(e.g., DXC, \fBglslc\fP, \fBglslang\fP, etc.) that support Vulkan\-based development
workflows.
.SS Components
.sp
Added in version 3.24.

.sp
This module supports several optional components that can be specified with the
\fI\%find_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Vulkan [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Each component provides a corresponding imported target.  Supported components
include:
.INDENT 0.0
.TP
.B \fBglslc\fP
Added in version 3.24.

.sp
Finds the SPIR\-V compiler.  This optional component is always implied
automatically for backward compatibility, even if not requested.
.TP
.B \fBglslangValidator\fP
Added in version 3.24.

.sp
Finds the \fBglslangValidator\fP tool that is used to compile GLSL and HLSL
shaders into SPIR\-V.  This optional component is always implied automatically
for backward compatibility, even if not requested.
.TP
.B \fBglslang\fP
Added in version 3.24.

.sp
Finds the Khronos\-reference front\-end shader parser and SPIR\-V code
generation library (\fBglslang\fP).
.TP
.B \fBshaderc_combined\fP
Added in version 3.24.

.sp
Finds the Google static library used for Vulkan shader compilation.
.TP
.B \fBSPIRV\-Tools\fP
Added in version 3.24.

.sp
Finds Khronos library for analyzing and transforming SPIR\-V modules.
.TP
.B \fBMoltenVK\fP
Added in version 3.24.

.sp
Finds the Khronos MoltenVK library, which is available on macOS, and
implements a subset of Vulkan API over Apple Metal graphics framework.
.TP
.B \fBdxc\fP
Added in version 3.25.

.sp
Finds the DirectX Shader Compiler (DXC), including the library and
command\-line tool.  Note that Visual Studio also provides a DXC tool, but the
version included with the Vulkan SDK is typically required for Vulkan
development, as it has Vulkan capability enabled.
.TP
.B \fBvolk\fP
Added in version 3.25.

.sp
Finds the Vulkan meta\-loader \fBvolk\fP library, a vector\-optimized library of
kernels.
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBVulkan::Vulkan\fP
Target encapsulating the main Vulkan library usage requirements, available
if Vulkan is found.
.TP
.B \fBVulkan::glslc\fP
Added in version 3.19.

.sp
Imported executable target encapsulating the GLSLC SPIR\-V compiler usage
requirements, available if \fBglslc\fP is found.
.TP
.B \fBVulkan::Headers\fP
Added in version 3.21.

.sp
Target encapsulating the usage requirements needed to include Vulkan headers.
It provides only the include directories and does not link to any library.
This is useful for applications that load the Vulkan library dynamically at
runtime.  This target is available if Vulkan is found.
.TP
.B \fBVulkan::glslangValidator\fP
Added in version 3.21.

.sp
Imported executable target encapsulating the \fBglslangValidator\fP usage
requirements, available if this tool is found.
.TP
.B \fBVulkan::glslang\fP
Added in version 3.24.

.sp
Target encapsulating the \fBglslang\fP library usage requirements, available if
\fBglslang\fP is found in the SDK.
.TP
.B \fBVulkan::shaderc_combined\fP
Added in version 3.24.

.sp
Target encapsulating the \fBshaderc_combined\fP library usage requirements,
available if this library is found in the SDK.
.TP
.B \fBVulkan::SPIRV\-Tools\fP
Added in version 3.24.

.sp
Target encapsulating the SPIRV\-Tools library usage requirements, available if
this library is found in the SDK.
.TP
.B \fBVulkan::MoltenVK\fP
Added in version 3.24.

.sp
Target encapsulating the MoltenVK library usage requirements, available if
this library is found in the SDK.
.TP
.B \fBVulkan::volk\fP
Added in version 3.25.

.sp
Target encapsulating the \fBvolk\fP library usage requirements, available if
\fBvolk\fP is found in the SDK.
.TP
.B \fBVulkan::dxc_lib\fP
Added in version 3.25.

.sp
Target encapsulating the usage requirements for the DirectX shader compiler
library, available if DXC library is found in the SDK.
.TP
.B \fBVulkan::dxc_exe\fP
Added in version 3.25.

.sp
Imported executable target providing usage requirements for the DirectX shader
compiler CLI tool, available if SDK has this tool.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBVulkan_FOUND\fP
Boolean indicating whether (the requested version of) Vulkan and all required
components are found.
.TP
.B \fBVulkan_VERSION\fP
Added in version 3.23.

.sp
The version of Vulkan found.  Value is retrieved from
\fBvulkan/vulkan_core.h\fP\&.
.TP
.B \fBVulkan_INCLUDE_DIRS\fP
Include directories needed to use the main Vulkan library.
.TP
.B \fBVulkan_LIBRARIES\fP
Libraries needed to link against to use the main Vulkan library.
.TP
.B \fBVulkan_glslc_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the SDK provides the \fBglslc\fP executable.
.TP
.B \fBVulkan_glslangValidator_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the SDK provides the \fBglslangValidator\fP
executable.
.TP
.B \fBVulkan_glslang_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the SDK provides the \fBglslang\fP library.
.TP
.B \fBVulkan_shaderc_combined_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the SDK provides the \fBshaderc_combined\fP library.
.TP
.B \fBVulkan_SPIRV\-Tools_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the SDK provides the SPIRV\-Tools library.
.TP
.B \fBVulkan_MoltenVK_FOUND\fP
Added in version 3.24.

.sp
Boolean indicating whether the SDK provides the MoltenVK library.
.TP
.B \fBVulkan_volk_FOUND\fP
Added in version 3.25.

.sp
Boolean indicating whether the SDK provides the volk library.
.TP
.B \fBVulkan_dxc_lib_FOUND\fP
Added in version 3.25.

.sp
Boolean indicating whether the SDK provides the DirectX shader compiler
library.
.TP
.B \fBVulkan_dxc_exe_FOUND\fP
Added in version 3.25.

.sp
Boolean indicating whether the SDK provides the DirectX shader compiler CLI
tool.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBVulkan_INCLUDE_DIR\fP
The directory containing Vulkan headers.
.TP
.B \fBVulkan_LIBRARY\fP
The path to the Vulkan library.
.TP
.B \fBVulkan_GLSLC_EXECUTABLE\fP
Added in version 3.19.

.sp
The path to the GLSL SPIR\-V compiler.
.TP
.B \fBVulkan_GLSLANG_VALIDATOR_EXECUTABLE\fP
Added in version 3.21.

.sp
The path to the \fBglslangValidator\fP tool.
.TP
.B \fBVulkan_glslang_LIBRARY\fP
Added in version 3.24.

.sp
The path to the \fBglslang\fP library.
.TP
.B \fBVulkan_shaderc_combined_LIBRARY\fP
Added in version 3.24.

.sp
The path to the \fBshaderc_combined\fP library.
.TP
.B \fBVulkan_SPIRV\-Tools_LIBRARY\fP
Added in version 3.24.

.sp
The path to the SPIRV\-Tools library.
.TP
.B \fBVulkan_MoltenVK_LIBRARY\fP
Added in version 3.24.

.sp
The path to the MoltenVK library.
.TP
.B \fBVulkan_volk_LIBRARY\fP
Added in version 3.25.

.sp
The path to the \fBvolk\fP library.
.TP
.B \fBVulkan_dxc_LIBRARY\fP
Added in version 3.25.

.sp
The path to the DirectX shader compiler library.
.TP
.B \fBVulkan_dxc_EXECUTABLE\fP
Added in version 3.25.

.sp
The path to the DirectX shader compiler CLI tool.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBVULKAN_SDK\fP
This environment variable can be optionally set to specify the location of the
Vulkan SDK root directory for the given architecture.  It is typically set by
sourcing the toplevel \fBsetup\-env.sh\fP script of the Vulkan SDK directory into
the shell environment.
.UNINDENT
.SS Examples
.sp
Finding the Vulkan library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Vulkan)
target_link_libraries(project_target PRIVATE Vulkan::Vulkan)
.EE
.UNINDENT
.UNINDENT
.sp
Finding the Vulkan library along with additional components:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Vulkan COMPONENTS volk)
target_link_libraries(project_target PRIVATE Vulkan::Vulkan Vulkan::volk)
.EE
.UNINDENT
.UNINDENT
.SS FindWget
.sp
This module finds the \fBwget\fP command\-line tool for retrieving content from web
servers.
.SS Result Variables
.sp
This module defines the following local variables:
.INDENT 0.0
.TP
.B \fBWget_FOUND\fP
True if \fBwget\fP has been found.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBWGET_EXECUTABLE\fP
The full path to the \fBwget\fP tool.
.UNINDENT
.SS Examples
.sp
Finding \fBwget\fP and executing it in a process:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Wget)
if(Wget_FOUND)
  execute_process(COMMAND ${WGET_EXECUTABLE} \-h)
endif()
.EE
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The \fI\%file(DOWNLOAD)\fP command to download the given URL to a local
file.
.UNINDENT
.SS FindWish
.sp
Finds \fBwish\fP, a simple windowing shell command\-line executable.
.sp
This module is commonly used in conjunction with finding a TCL installation (see
the \fI\%FindTCL\fP module).  It helps determine where the TCL include paths
and libraries are, as well as identifying the name of the TCL library.
.sp
If the \fI\%UNIX\fP variable is defined, the module will prioritize looking
for the Cygwin version of \fBwish\fP executable.
.SS Cache Variables
.sp
The following cache variables may be set:
.INDENT 0.0
.TP
.B \fBTK_WISH\fP
The path to the \fBwish\fP executable.
.UNINDENT
.SS Examples
.sp
Finding \fBwish\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Wish)
message(STATUS \(dqFound wish at: ${TK_WISH}\(dq)
.EE
.UNINDENT
.UNINDENT
.SS FindwxWidgets
.sp
Find a wxWidgets (a.k.a., wxWindows) installation.
.sp
This module finds if wxWidgets is installed and selects a default
configuration to use.  wxWidgets is a modular library.  To specify the
modules that you will use, you need to name them as components to the
package:
.sp
find_package(wxWidgets COMPONENTS core base ... OPTIONAL_COMPONENTS net ...)
.sp
Added in version 3.4: Support for \fI\%find_package()\fP version argument; \fBwebview\fP component.

.sp
Added in version 3.14: \fBOPTIONAL_COMPONENTS\fP support.

.sp
There are two search branches: a windows style and a unix style.  For
windows, the following variables are searched for and set to defaults
in case of multiple choices.  Change them if the defaults are not
desired (i.e., these are the only variables you should change to
select a configuration):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
wxWidgets_ROOT_DIR      \- Base wxWidgets directory
                          (e.g., C:/wxWidgets\-3.2.0).
wxWidgets_LIB_DIR       \- Path to wxWidgets libraries
                          (e.g., C:/wxWidgets\-3.2.0/lib/vc_x64_lib).
wxWidgets_CONFIGURATION \- Configuration to use
                          (e.g., msw, mswd, mswu, mswunivud, etc.)
wxWidgets_EXCLUDE_COMMON_LIBRARIES
                        \- Set to TRUE to exclude linking of
                          commonly required libs (e.g., png tiff
                          jpeg zlib regex expat scintilla lexilla).
.EE
.UNINDENT
.UNINDENT
.sp
For unix style it uses the wx\-config utility.  You can select between
debug/release, unicode/ansi, universal/non\-universal, and
static/shared in the QtDialog or ccmake interfaces by turning ON/OFF
the following variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
wxWidgets_USE_DEBUG
wxWidgets_USE_UNICODE
wxWidgets_USE_UNIVERSAL
wxWidgets_USE_STATIC
.EE
.UNINDENT
.UNINDENT
.sp
There is also a wxWidgets_CONFIG_OPTIONS variable for all other
options that need to be passed to the wx\-config utility.  For example,
to use the base toolkit found in the /usr/local path, set the variable
(before calling the FIND_PACKAGE command) as such:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(wxWidgets_CONFIG_OPTIONS \-\-toolkit=base \-\-prefix=/usr)
.EE
.UNINDENT
.UNINDENT
.sp
The following are set after the configuration is done for both windows
and unix style:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
wxWidgets_FOUND            \- Set to TRUE if wxWidgets was found.
wxWidgets_INCLUDE_DIRS     \- Include directories for WIN32
                             i.e., where to find \(dqwx/wx.h\(dq and
                             \(dqwx/setup.h\(dq; possibly empty for unices.
wxWidgets_LIBRARIES        \- Path to the wxWidgets libraries.
wxWidgets_LIBRARY_DIRS     \- compile time link dirs, useful for
                             rpath on UNIX. Typically an empty string
                             in WIN32 environment.
wxWidgets_DEFINITIONS      \- Contains defines required to compile/link
                             against WX, e.g. WXUSINGDLL
wxWidgets_DEFINITIONS_DEBUG\- Contains defines required to compile/link
                             against WX debug builds, e.g. __WXDEBUG__
wxWidgets_CXX_FLAGS        \- Include dirs and compiler flags for
                             unices, empty on WIN32. Essentially
                             \(dq\(gawx\-config \-\-cxxflags\(ga\(dq.
wxWidgets_USE_FILE         \- Convenience include file.
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.11: The following environment variables can be used as hints: \fBWX_CONFIG\fP,
\fBWXRC_CMD\fP\&.

.sp
Sample usage:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Note that for MinGW users the order of libs is important!
find_package(wxWidgets COMPONENTS gl core base OPTIONAL_COMPONENTS net)
if(wxWidgets_FOUND)
  include(${wxWidgets_USE_FILE})
  # and for each of your dependent executable/library targets:
  target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})
endif()
.EE
.UNINDENT
.UNINDENT
.sp
If wxWidgets is required (i.e., not an optional part):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(wxWidgets REQUIRED gl core base OPTIONAL_COMPONENTS net)
include(${wxWidgets_USE_FILE})
# and for each of your dependent executable/library targets:
target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})
.EE
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
Added in version 3.27.

.sp
This module defines the following \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBwxWidgets::wxWidgets\fP
An interface library providing usage requirements for the found components.
.UNINDENT
.SS FindX11
.sp
Find X11 installation
.sp
Try to find X11 on UNIX systems. The following values are defined
.INDENT 0.0
.INDENT 3.5
.sp
.EX
X11_FOUND        \- True if X11 is available
X11_INCLUDE_DIR  \- include directories to use X11
X11_LIBRARIES    \- link against these to use X11
.EE
.UNINDENT
.UNINDENT
.sp
and also the following more fine grained variables and targets:
.sp
Added in version 3.14: Imported targets.

.INDENT 0.0
.INDENT 3.5
.sp
.EX
X11_ICE_INCLUDE_PATH,            X11_ICE_LIB,            X11_ICE_FOUND,            X11::ICE
X11_SM_INCLUDE_PATH,             X11_SM_LIB,             X11_SM_FOUND,             X11::SM
X11_X11_INCLUDE_PATH,            X11_X11_LIB,                                      X11::X11
X11_Xaccessrules_INCLUDE_PATH,
X11_Xaccessstr_INCLUDE_PATH,                             X11_Xaccess_FOUND
X11_Xau_INCLUDE_PATH,            X11_Xau_LIB,            X11_Xau_FOUND,            X11::Xau
X11_xcb_INCLUDE_PATH,            X11_xcb_LIB,            X11_xcb_FOUND,            X11::xcb
X11_X11_xcb_INCLUDE_PATH,        X11_X11_xcb_LIB,        X11_X11_xcb_FOUND,        X11::X11_xcb
X11_xcb_composite_INCLUDE_PATH,  X11_xcb_composite_LIB,  X11_xcb_composite_FOUND,  X11::xcb_composite
X11_xcb_cursor_INCLUDE_PATH,     X11_xcb_cursor_LIB,     X11_xcb_cursor_FOUND,     X11::xcb_cursor
X11_xcb_damage_INCLUDE_PATH,     X11_xcb_damage_LIB,     X11_xcb_damage_FOUND,     X11::xcb_damage
X11_xcb_dpms_INCLUDE_PATH,       X11_xcb_dpms_LIB,       X11_xcb_dpms_FOUND,       X11::xcb_dpms
X11_xcb_dri2_INCLUDE_PATH,       X11_xcb_dri2_LIB,       X11_xcb_dri2_FOUND,       X11::xcb_dri2
X11_xcb_dri3_INCLUDE_PATH,       X11_xcb_dri3_LIB,       X11_xcb_dri3_FOUND,       X11::xcb_dri3
X11_xcb_errors_INCLUDE_PATH,     X11_xcb_errors_LIB,     X11_xcb_errors_FOUND,     X11::xcb_errors
X11_xcb_ewmh_INCLUDE_PATH,       X11_xcb_ewmh_LIB,       X11_xcb_ewmh_FOUND,       X11::xcb_ewmh
X11_xcb_glx_INCLUDE_PATH,        X11_xcb_glx_LIB,        X11_xcb_glx_FOUND,        X11::xcb_glx
X11_xcb_icccm_INCLUDE_PATH,      X11_xcb_icccm_LIB,      X11_xcb_icccm_FOUND,      X11::xcb_icccm
X11_xcb_image_INCLUDE_PATH,      X11_xcb_image_LIB,      X11_xcb_image_FOUND,      X11::xcb_image
X11_xcb_keysyms_INCLUDE_PATH,    X11_xcb_keysyms_LIB,    X11_xcb_keysyms_FOUND,    X11::xcb_keysyms
X11_xcb_present_INCLUDE_PATH,    X11_xcb_present_LIB,    X11_xcb_present_FOUND,    X11::xcb_present
X11_xcb_randr_INCLUDE_PATH,      X11_xcb_randr_LIB,      X11_xcb_randr_FOUND,      X11::xcb_randr
X11_xcb_record_INCLUDE_PATH,     X11_xcb_record_LIB,     X11_xcb_record_FOUND,     X11::xcb_record
X11_xcb_render_INCLUDE_PATH,     X11_xcb_render_LIB,     X11_xcb_render_FOUND,     X11::xcb_render
X11_xcb_render_util_INCLUDE_PATH,X11_xcb_render_util_LIB,X11_xcb_render_util_FOUND,X11::xcb_render_util
X11_xcb_res_INCLUDE_PATH,        X11_xcb_res_LIB,        X11_xcb_res_FOUND,        X11::xcb_res
X11_xcb_screensaver_INCLUDE_PATH,X11_xcb_screensaver_LIB,X11_xcb_screensaver_FOUND,X11::xcb_screensaver
X11_xcb_shape_INCLUDE_PATH,      X11_xcb_shape_LIB,      X11_xcb_shape_FOUND,      X11::xcb_shape
X11_xcb_shm_INCLUDE_PATH,        X11_xcb_shm_LIB,        X11_xcb_shm_FOUND,        X11::xcb_shm
X11_xcb_sync_INCLUDE_PATH,       X11_xcb_sync_LIB,       X11_xcb_sync_FOUND,       X11::xcb_sync
X11_xcb_util_INCLUDE_PATH,       X11_xcb_util_LIB,       X11_xcb_util_FOUND,       X11::xcb_util
X11_xcb_xf86dri_INCLUDE_PATH,    X11_xcb_xf86dri_LIB,    X11_xcb_xf86dri_FOUND,    X11::xcb_xf86dri
X11_xcb_xfixes_INCLUDE_PATH,     X11_xcb_xfixes_LIB,     X11_xcb_xfixes_FOUND,     X11::xcb_xfixes
X11_xcb_xinerama_INCLUDE_PATH,   X11_xcb_xinerama_LIB,   X11_xcb_xinerama_FOUND,   X11::xcb_xinerama
X11_xcb_xinput_INCLUDE_PATH,     X11_xcb_xinput_LIB,     X11_xcb_xinput_FOUND,     X11::xcb_xinput
X11_xcb_xkb_INCLUDE_PATH,        X11_xcb_xkb_LIB,        X11_xcb_xkb_FOUND,        X11::xcb_xkb
X11_xcb_xrm_INCLUDE_PATH,        X11_xcb_xrm_LIB,        X11_xcb_xrm_FOUND,        X11::xcb_xrm
X11_xcb_xtest_INCLUDE_PATH,      X11_xcb_xtest_LIB,      X11_xcb_xtest_FOUND,      X11::xcb_xtest
X11_xcb_xvmc_INCLUDE_PATH,       X11_xcb_xvmc_LIB,       X11_xcb_xvmc_FOUND,       X11::xcb_xvmc
X11_xcb_xv_INCLUDE_PATH,         X11_xcb_xv_LIB,         X11_xcb_xv_FOUND          X11::xcb_xv
X11_Xcomposite_INCLUDE_PATH,     X11_Xcomposite_LIB,     X11_Xcomposite_FOUND,     X11::Xcomposite
X11_Xcursor_INCLUDE_PATH,        X11_Xcursor_LIB,        X11_Xcursor_FOUND,        X11::Xcursor
X11_Xdamage_INCLUDE_PATH,        X11_Xdamage_LIB,        X11_Xdamage_FOUND,        X11::Xdamage
X11_Xdmcp_INCLUDE_PATH,          X11_Xdmcp_LIB,          X11_Xdmcp_FOUND,          X11::Xdmcp
X11_Xext_INCLUDE_PATH,           X11_Xext_LIB,           X11_Xext_FOUND,           X11::Xext
X11_Xxf86misc_INCLUDE_PATH,      X11_Xxf86misc_LIB,      X11_Xxf86misc_FOUND,      X11::Xxf86misc
X11_Xxf86vm_INCLUDE_PATH,        X11_Xxf86vm_LIB         X11_Xxf86vm_FOUND,        X11::Xxf86vm
X11_Xfixes_INCLUDE_PATH,         X11_Xfixes_LIB,         X11_Xfixes_FOUND,         X11::Xfixes
X11_Xft_INCLUDE_PATH,            X11_Xft_LIB,            X11_Xft_FOUND,            X11::Xft
X11_Xi_INCLUDE_PATH,             X11_Xi_LIB,             X11_Xi_FOUND,             X11::Xi
X11_Xinerama_INCLUDE_PATH,       X11_Xinerama_LIB,       X11_Xinerama_FOUND,       X11::Xinerama
X11_Xkb_INCLUDE_PATH,
X11_Xkblib_INCLUDE_PATH,                                 X11_Xkb_FOUND,            X11::Xkb
X11_xkbcommon_INCLUDE_PATH,      X11_xkbcommon_LIB,      X11_xkbcommon_FOUND,      X11::xkbcommon
X11_xkbcommon_X11_INCLUDE_PATH,  X11_xkbcommon_X11_LIB,  X11_xkbcommon_X11_FOUND,  X11::xkbcommon_X11
X11_xkbfile_INCLUDE_PATH,        X11_xkbfile_LIB,        X11_xkbfile_FOUND,        X11::xkbfile
X11_Xmu_INCLUDE_PATH,            X11_Xmu_LIB,            X11_Xmu_FOUND,            X11::Xmu
X11_Xpm_INCLUDE_PATH,            X11_Xpm_LIB,            X11_Xpm_FOUND,            X11::Xpm
X11_Xpresent_INCLUDE_PATH,       X11_Xpresent_LIB,       X11_Xpresent_FOUND,       X11::Xpresent
X11_Xtst_INCLUDE_PATH,           X11_Xtst_LIB,           X11_Xtst_FOUND,           X11::Xtst
X11_Xrandr_INCLUDE_PATH,         X11_Xrandr_LIB,         X11_Xrandr_FOUND,         X11::Xrandr
X11_Xrender_INCLUDE_PATH,        X11_Xrender_LIB,        X11_Xrender_FOUND,        X11::Xrender
X11_XRes_INCLUDE_PATH,           X11_XRes_LIB,           X11_XRes_FOUND,           X11::XRes
X11_Xss_INCLUDE_PATH,            X11_Xss_LIB,            X11_Xss_FOUND,            X11::Xss
X11_Xt_INCLUDE_PATH,             X11_Xt_LIB,             X11_Xt_FOUND,             X11::Xt
X11_Xutil_INCLUDE_PATH,                                  X11_Xutil_FOUND,          X11::Xutil
X11_Xv_INCLUDE_PATH,             X11_Xv_LIB,             X11_Xv_FOUND,             X11::Xv
X11_dpms_INCLUDE_PATH,           (in X11_Xext_LIB),      X11_dpms_FOUND
X11_Xdbe_INCLUDE_PATH,           (in X11_Xext_LIB),      X11_Xdbe_FOUND
X11_XShm_INCLUDE_PATH,           (in X11_Xext_LIB),      X11_XShm_FOUND
X11_Xshape_INCLUDE_PATH,         (in X11_Xext_LIB),      X11_Xshape_FOUND
X11_XSync_INCLUDE_PATH,          (in X11_Xext_LIB),      X11_XSync_FOUND
X11_Xaw_INCLUDE_PATH,            X11_Xaw_LIB             X11_Xaw_FOUND             X11::Xaw
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.14: Renamed \fBXxf86misc\fP, \fBX11_Xxf86misc\fP, \fBX11_Xxf86vm\fP, \fBX11_xkbfile\fP,
\fBX11_Xtst\fP, and \fBX11_Xss\fP libraries to match their file names.
Deprecated the \fBX11_Xinput\fP library.  Old names are still available
for compatibility.

.sp
Added in version 3.14: Added the \fBX11_Xext_INCLUDE_PATH\fP variable.

.sp
Added in version 3.18: Added the \fBxcb\fP, \fBX11\-xcb\fP, \fBxcb\-icccm\fP, \fBxcb\-xkb\fP, \fBxkbcommon\fP,
and \fBxkbcommon\-X11\fP libraries.

.sp
Added in version 3.19: Added the \fBXaw\fP, \fBxcb_util\fP, and \fBxcb_xfixes\fP libraries.

.sp
Added in version 3.24: Added the \fBxcb_randr\fP, \fBxcb_xtext\fP, and \fBxcb_keysyms\fP libraries.

.sp
Added in version 3.27: Added the \fBxcb_composite\fP, \fBxcb_cursor\fP, \fBxcb_damage\fP, \fBxcb_dpms\fP,
\fBxcb_dri2\fP, \fBxcb_dri3\fP, \fBxcb_errors\fP, \fBxcb_ewmh\fP, \fBxcb_glx\fP,
\fBxcb_image\fP, \fBxcb_present\fP, \fBxcb_record\fP, \fBxcb_render\fP,
\fBxcb_render_util\fP, \fBxcb_res\fP, \fBxcb_screensaver\fP, \fBxcb_shape\fP,
\fBxcb_shm\fP, \fBxcb_sync\fP, \fBxcb_xf86dri\fP, \fBxcb_xinerama\fP, \fBxcb_xinput\fP,
\fBxcb_xrm\fP, \fBxcb_xvmc\fP, and \fBxcb_xv\fP libraries.

.sp
Added in version 3.29: Added coverage of double buffer extension (variables
\fBX11_Xdbe_INCLUDE_PATH\fP and \fBX11_Xdbe_FOUND\fP).

.SS FindXalanC
.sp
Added in version 3.5.

.sp
Finds the Apache Xalan\-C++ XSL transform processor headers and libraries.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The Xalan\-C++ library depends on the \fI\%Xerces\-C++\fP
library, which must be found for this module to succeed.
.UNINDENT
.UNINDENT
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBXalanC::XalanC\fP
Target encapsulating the Xalan\-C++ library usage requirements, available only
if Xalan\-C++ is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBXalanC_FOUND\fP
Boolean indicating whether the Xalan\-C++ is found.
.TP
.B \fBXalanC_VERSION\fP
The version of the found Xalan\-C++ library.
.TP
.B \fBXalanC_INCLUDE_DIRS\fP
Include directories needed for using Xalan\-C++ library.  These contain the
Xalan\-C++ and Xerces\-C++ headers.
.TP
.B \fBXalanC_LIBRARIES\fP
Libraries needed to link against Xalan\-C++.  These contain the Xalan\-C++ and
Xerces\-C++ libraries.
.TP
.B \fBXalanC_LIBRARY\fP
The path to the Xalan\-C++ library (\fBxalan\-c\fP), either release or debug
variant.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBXalanC_INCLUDE_DIR\fP
The directory containing the Xalan\-C++ headers.
.TP
.B \fBXalanC_LIBRARY_RELEASE\fP
The path to a release (optimized) variant of the Xalan\-C++ library.
.TP
.B \fBXalanC_LIBRARY_DEBUG\fP
The path to a debug variant of the Xalan\-C++ library.
.UNINDENT
.SS Examples
.sp
Finding Xalan\-C++ library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(XalanC)
target_link_libraries(project_target PRIVATE XalanC::XalanC)
.EE
.UNINDENT
.UNINDENT
.SS FindXCTest
.sp
Added in version 3.3.

.sp
Finds the XCTest framework for writing unit tests in Xcode projects.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Xcode 16 and later includes the Swift Testing framework for writing unit tests
in the Swift programming language, which supersedes XCTest.
.UNINDENT
.UNINDENT
.sp
An XCTest bundle is a CFBundle (Core Foundation Bundle) with a special
product type and bundle extension.  See the Apple Developer Library for more
information in the \X'tty: link https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/testing_with_xcode/'\fI\%Testing with Xcode\fP\X'tty: link' documentation.
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBXCTest_FOUND\fP
Boolean indicating whether the XCTest framework and executable are found.
.TP
.B \fBXCTest_INCLUDE_DIRS\fP
Include directories containing the XCTest framework headers needed to use
XCTest.
.TP
.B \fBXCTest_LIBRARIES\fP
Libraries needed to link against to use XCTest framework.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBXCTest_EXECUTABLE\fP
The path to the \fBxctest\fP command\-line tool used to execute XCTest bundles.
.UNINDENT
.SS Commands
.sp
When XCTest is found, this module provides the following commands to help
create and run XCTest bundles:
.INDENT 0.0
.TP
.B xctest_add_bundle
Creates an XCTest bundle to test a given target:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
xctest_add_bundle(<bundle> <testee> [<sources>...])
.EE
.UNINDENT
.UNINDENT
.sp
This command creates an XCTest bundle named \fB<bundle>\fP that will test the
specified \fB<testee>\fP target.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<bundle>\fP
Name of the XCTest bundle to create.  The \fI\%XCTEST\fP target
property will be set on this bundle.
.TP
.B \fB<testee>\fP
Name of the target to test.  Supported types for the testee are Frameworks
and App Bundles.
.TP
.B \fB<sources>...\fP
One or more source files to add to the bundle.  If not provided, they must
be added later using commands like \fI\%target_sources()\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The \fI\%CMAKE_OSX_SYSROOT\fP variable must be set before using this
command.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B xctest_add_test
Adds an XCTest bundle to the project to be run during the CTest phase:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
xctest_add_test(<name> <bundle>)
.EE
.UNINDENT
.UNINDENT
.sp
This command registers an XCTest bundle to be executed by \fI\%ctest(1)\fP\&.
The test will be named \fB<name>\fP and will run the specified \fB<bundle>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<name>\fP
Name of the test as it will appear in CTest.
.TP
.B \fB<bundle>\fP
Target name of the XCTest bundle.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Finding XCTest and adding tests:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(XCTest)

add_library(foo SHARED foo.c)

if(XCTest_FOUND)
  xctest_add_bundle(TestAppBundle foo source.swift)
  xctest_add_test(app.TestAppBundle TestAppBundle)
endif()
.EE
.UNINDENT
.UNINDENT
.SS FindXercesC
.sp
Added in version 3.1.

.sp
Finds the Apache Xerces\-C++ validating XML parser headers and libraries.
.SS Imported Targets
.sp
This module defines the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBXercesC::XercesC\fP
Added in version 3.5.

.sp
Target encapsulating the Xerces\-C++ library (\fBxerces\-c\fP) usage requirements,
available only if Xerces\-C++ is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBXercesC_FOUND\fP
Boolean indicating whether the Xerces\-C++ is found.
.TP
.B \fBXercesC_VERSION\fP
The version of the found Xerces\-C++ library.
.TP
.B \fBXercesC_INCLUDE_DIRS\fP
Include directories needed to use Xerces\-C++.
.TP
.B \fBXercesC_LIBRARIES\fP
Libraries needed to link for using Xerces\-C++.
.TP
.B \fBXercesC_LIBRARY\fP
The path to the Xerces\-C++ library (\fBxerces\-c\fP), either release or debug
variant.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBXercesC_INCLUDE_DIR\fP
The directory containing the Xerces\-C++ headers.
.TP
.B \fBXercesC_LIBRARY_RELEASE\fP
Added in version 3.4.

.sp
The path to a release (optimized) variant of the Xerces\-C++ library.
.TP
.B \fBXercesC_LIBRARY_DEBUG\fP
Added in version 3.4.

.sp
The path to a debug variant of the Xerces\-C++ library.
.UNINDENT
.SS Examples
.sp
Finding the Xerces\-C++ library and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(XercesC)
target_link_libraries(project_target PRIVATE XercesC::XercesC)
.EE
.UNINDENT
.UNINDENT
.SS FindXMLRPC
.sp
Finds the native XML\-RPC library for C and C++.  XML\-RPC is a standard network
protocol that enables remote procedure calls (RPC) between systems.  It encodes
requests and responses in XML and uses HTTP as the transport mechanism.
.SS Components
.sp
The XML\-RPC C/C++ library consists of various features (modules) that provide
specific functionality.  The availability of these features depends on the
installed XML\-RPC library version and system configuration.  Some features also
have dependencies on others.
.sp
To list the available features on a system, the \fBxmlrpc\-c\-config\fP command\-line
utility can be used.
.sp
In CMake, these features can be specified as components with the
\fBfind_package()\fP command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(XMLRPC [COMPONENTS <components>...])
.EE
.UNINDENT
.UNINDENT
.sp
Components may be:
.INDENT 0.0
.TP
.B \fBc++2\fP
C++ wrapper API, replacing the legacy \fBc++\fP feature.
.TP
.B \fBc++\fP
The legacy C++ wrapper API (superseded by \fBc++2\fP).
.TP
.B \fBclient\fP
XML\-RPC client functions (also available as the legacy libwww\-based feature
named \fBlibwww\-client\fP).
.TP
.B \fBcgi\-server\fP
CGI\-based server functions.
.TP
.B \fBabyss\-server\fP
Abyss\-based server functions.
.TP
.B \fBpstream\-server\fP
The pstream\-based server functions.
.TP
.B \fBserver\-util\fP
Basic server functions (they are automatically included with \fB*\-server\fP
features).
.TP
.B \fBabyss\fP
Abyss HTTP server (not needed with \fBabyss\-server\fP).
.TP
.B \fBopenssl\fP
OpenSSL convenience functions.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBXMLRPC_INCLUDE_DIRS\fP
Include directories containing \fBxmlrpc.h\fP and other headers needed to use
the XML\-RPC library.
.TP
.B \fBXMLRPC_LIBRARIES\fP
List of libraries needed for linking to XML\-RPC library and its requested
features.
.TP
.B \fBXMLRPC_FOUND\fP
Boolean indicating whether the XML\-RPC library and all its requested
components are found.
.UNINDENT
.SS Examples
.sp
Finding XML\-RPC library and its \fBclient\fP feature to use in the project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(XMLRPC REQUIRED COMPONENTS client)
.EE
.UNINDENT
.UNINDENT
.SS FindZLIB
.sp
Finds the native zlib data compression library.
.SS Imported Targets
.sp
This module provides the following \fI\%Imported Targets\fP:
.INDENT 0.0
.TP
.B \fBZLIB::ZLIB\fP
Added in version 3.1.

.sp
Target that encapsulates the zlib usage requirements.  It is available only
when zlib is found.
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBZLIB_INCLUDE_DIRS\fP
Include directories containing \fBzlib.h\fP and other headers needed to use
zlib.
.TP
.B \fBZLIB_LIBRARIES\fP
List of libraries needed to link to zlib.
.sp
Changed in version 3.4: Debug and Release library variants can be now found separately.

.TP
.B \fBZLIB_FOUND\fP
True if zlib is found.
.TP
.B \fBZLIB_VERSION\fP
Added in version 3.26.

.sp
The version of zlib found.
.UNINDENT
.SS Legacy Variables
.sp
The following variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBZLIB_VERSION_MAJOR\fP
The major version of zlib.
.sp
Changed in version 3.26: Superseded by \fBZLIB_VERSION\fP\&.

.TP
.B \fBZLIB_VERSION_MINOR\fP
The minor version of zlib.
.sp
Changed in version 3.26: Superseded by \fBZLIB_VERSION\fP\&.

.TP
.B \fBZLIB_VERSION_PATCH\fP
The patch version of zlib.
.sp
Changed in version 3.26: Superseded by \fBZLIB_VERSION\fP\&.

.TP
.B \fBZLIB_VERSION_TWEAK\fP
The tweak version of zlib.
.sp
Changed in version 3.26: Superseded by \fBZLIB_VERSION\fP\&.

.TP
.B \fBZLIB_VERSION_STRING\fP
The version of zlib found (x.y.z).
.sp
Changed in version 3.26: Superseded by \fBZLIB_VERSION\fP\&.

.TP
.B \fBZLIB_MAJOR_VERSION\fP
The major version of zlib.  Superseded by \fBZLIB_VERSION_MAJOR\fP\&.
.TP
.B \fBZLIB_MINOR_VERSION\fP
The minor version of zlib.  Superseded by \fBZLIB_VERSION_MINOR\fP\&.
.TP
.B \fBZLIB_PATCH_VERSION\fP
The patch version of zlib.  Superseded by \fBZLIB_VERSION_PATCH\fP\&.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables:
.INDENT 0.0
.TP
.B \fBZLIB_ROOT\fP
A user may set this variable to a zlib installation root to help locate zlib
in custom installation paths.
.TP
.B \fBZLIB_USE_STATIC_LIBS\fP
Added in version 3.24.

.sp
Set this variable to \fBON\fP before calling \fBfind_package(ZLIB)\fP to look for
static libraries.  Default is \fBOFF\fP\&.
.UNINDENT
.SS Examples
.sp
Finding zlib and linking it to a project target:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(ZLIB)
target_link_libraries(project_target PRIVATE ZLIB::ZLIB)
.EE
.UNINDENT
.UNINDENT
.SH DEPRECATED MODULES
.SS Deprecated Utility Modules
.SS AddFileDependencies
.sp
Deprecated since version 3.20.

.sp
Add dependencies to a source file.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_file_dependencies(<source> <files>...)
.EE
.UNINDENT
.UNINDENT
.sp
Adds the given \fB<files>\fP to the dependencies of file \fB<source>\fP\&.
.sp
Do not use this command in new code.  It is just a wrapper around:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set_property(SOURCE <source> APPEND PROPERTY OBJECT_DEPENDS <files>...)
.EE
.UNINDENT
.UNINDENT
.sp
Instead use the \fI\%set_property()\fP command to append to the
\fI\%OBJECT_DEPENDS\fP source file property directly.
.SS CMakeDetermineVSServicePack
.sp
Changed in version 4.1: This module is available only if policy \fI\%CMP0196\fP is not set to \fBNEW\fP\&.

.sp
Deprecated since version 3.0: This module should no longer be used.  The functionality of this module has
been superseded by the \fI\%CMAKE_<LANG>_COMPILER_VERSION\fP variable that
contains the compiler version number.

.sp
This module provides a command to determine the installed Visual Studio
service pack version for Visual Studio 2012 and earlier.
.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeDetermineVSServicePack)
.EE
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B DetermineVSServicePack
Determines the Visual Studio service pack version of the \fBcl\fP compiler
in use:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
DetermineVSServicePack(<variable>)
.EE
.UNINDENT
.UNINDENT
.sp
The result is stored in the specified internal cache variable \fB<variable>\fP,
which is set to one of the following values, or to an empty string if the
service pack cannot be determined:
.INDENT 7.0
.IP \(bu 2
\fBvc80\fP, \fBvc80sp1\fP
.IP \(bu 2
\fBvc90\fP, \fBvc90sp1\fP
.IP \(bu 2
\fBvc100\fP, \fBvc100sp1\fP
.IP \(bu 2
\fBvc110\fP, \fBvc110sp1\fP, \fBvc110sp2\fP, \fBvc110sp3\fP, \fBvc110sp4\fP
.UNINDENT
.UNINDENT
.SS Examples
.sp
Determining the Visual Studio service pack version in a project:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
if(MSVC)
  include(CMakeDetermineVSServicePack)
  DetermineVSServicePack(my_service_pack)
  if(my_service_pack)
    message(STATUS \(dqDetected: ${my_service_pack}\(dq)
  endif()
endif()
.EE
.UNINDENT
.UNINDENT
.SS CMakeExpandImportedTargets
.sp
Deprecated since version 3.4: This module should no longer be used.
.sp
It was once needed to replace \fI\%Imported Targets\fP with their underlying
libraries referenced on disk for use with the \fI\%try_compile()\fP and
\fI\%try_run()\fP commands.  These commands now support imported targets in
their \fBLINK_LIBRARIES\fP options (since CMake 2.8.11 for
\fI\%try_compile()\fP command and since CMake 3.2 for \fI\%try_run()\fP
command).

.sp
Load this module in a CMake project with:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeExpandImportedTargets)
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module does not support the policy \fI\%CMP0022\fP \fBNEW\fP behavior,
nor does it use the \fI\%INTERFACE_LINK_LIBRARIES\fP property, because
\fI\%generator expressions\fP cannot be
evaluated at the configuration phase.
.UNINDENT
.UNINDENT
.SS Commands
.sp
This module provides the following command:
.INDENT 0.0
.TP
.B cmake_expand_imported_targets
Expands all imported targets in a given list of libraries to their
corresponding file paths on disk and stores the resulting list in a local
variable:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
cmake_expand_imported_targets(
  <result\-var>
  LIBRARIES <libs>...
  [CONFIGURATION <config>]
)
.EE
.UNINDENT
.UNINDENT
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<result\-var>\fP
Name of a CMake variable containing the resulting list of file paths.
.TP
.B \fBLIBRARIES <libs>...\fP
A \fI\%semicolon\-separated list\fP of system and
imported targets.  Imported targets in this list are replaced with their
corresponding library file paths, including libraries from their link
interfaces.
.TP
.B \fBCONFIGURATION <config>\fP
If this option is given, it uses the respective build configuration
\fB<config>\fP of the imported targets if it exists.  If omitted, it defaults
to the first entry in the \fI\%CMAKE_CONFIGURATION_TYPES\fP variable, or
falls back to \fI\%CMAKE_BUILD_TYPE\fP if \fBCMAKE_CONFIGURATION_TYPES\fP
is not set.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Using this module to get a list of library paths:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CMakeExpandImportedTargets)
cmake_expand_imported_targets(
  expandedLibs
  LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}
  CONFIGURATION \(dq${CMAKE_TRY_COMPILE_CONFIGURATION}\(dq
)
.EE
.UNINDENT
.UNINDENT
.SS CMakeFindFrameworks
.sp
Deprecated since version 3.31: This module does nothing, unless policy \fI\%CMP0173\fP is set to \fBOLD\fP\&.

.sp
helper module to find OSX frameworks
.sp
This module reads hints about search locations from variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
CMAKE_FIND_FRAMEWORK_EXTRA_LOCATIONS \- Extra directories
.EE
.UNINDENT
.UNINDENT
.SS CMakeForceCompiler
.sp
Deprecated since version 3.6: Do not use.

.sp
The macros provided by this module were once intended for use by
cross\-compiling toolchain files when CMake was not able to automatically
detect the compiler identification.  Since the introduction of this module,
CMake\(aqs compiler identification capabilities have improved and can now be
taught to recognize any compiler.  Furthermore, the suite of information
CMake detects from a compiler is now too extensive to be provided by
toolchain files using these macros.
.sp
One common use case for this module was to skip CMake\(aqs checks for a
working compiler when using a cross\-compiler that cannot link binaries
without special flags or custom linker scripts.  This case is now supported
by setting the \fI\%CMAKE_TRY_COMPILE_TARGET_TYPE\fP variable in the
toolchain file instead.

.sp
.ce
----

.ce 0
.sp
.sp
Macro \fBCMAKE_FORCE_C_COMPILER\fP has the following signature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
CMAKE_FORCE_C_COMPILER(<compiler> <compiler\-id>)
.EE
.UNINDENT
.UNINDENT
.sp
It sets \fI\%CMAKE_C_COMPILER\fP to
the given compiler and the cmake internal variable
\fI\%CMAKE_C_COMPILER_ID\fP to the given
compiler\-id.  It also bypasses the check for working compiler and basic
compiler information tests.
.sp
Macro \fBCMAKE_FORCE_CXX_COMPILER\fP has the following signature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
CMAKE_FORCE_CXX_COMPILER(<compiler> <compiler\-id>)
.EE
.UNINDENT
.UNINDENT
.sp
It sets \fI\%CMAKE_CXX_COMPILER\fP to
the given compiler and the cmake internal variable
\fI\%CMAKE_CXX_COMPILER_ID\fP to the given
compiler\-id.  It also bypasses the check for working compiler and basic
compiler information tests.
.sp
Macro \fBCMAKE_FORCE_Fortran_COMPILER\fP has the following signature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
CMAKE_FORCE_Fortran_COMPILER(<compiler> <compiler\-id>)
.EE
.UNINDENT
.UNINDENT
.sp
It sets \fI\%CMAKE_Fortran_COMPILER\fP to
the given compiler and the cmake internal variable
\fI\%CMAKE_Fortran_COMPILER_ID\fP to the given
compiler\-id.  It also bypasses the check for working compiler and basic
compiler information tests.
.sp
So a simple toolchain file could look like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include (CMakeForceCompiler)
set(CMAKE_SYSTEM_NAME Generic)
CMAKE_FORCE_C_COMPILER   (chc12 MetrowerksHicross)
CMAKE_FORCE_CXX_COMPILER (chc12 MetrowerksHicross)
.EE
.UNINDENT
.UNINDENT
.SS CMakeParseArguments
.sp
Deprecated since version 3.5.

.sp
This module once implemented the \fI\%cmake_parse_arguments()\fP command
that is now implemented natively by CMake.  It is now an empty placeholder
for compatibility with projects that include it to get the command from
CMake 3.4 and lower.
.SS Dart
.sp
Deprecated since version 3.27: This module is available only if policy \fI\%CMP0145\fP
is not set to \fBNEW\fP\&.  Do not use it in new code.
Use the \fI\%CTest\fP module instead.

.sp
Configure a project for testing with CTest or old Dart Tcl Client
.sp
This file is the backwards\-compatibility version of the CTest module.
It supports using the old Dart 1 Tcl client for driving dashboard
submissions as well as testing with CTest.  This module should be
included in the CMakeLists.txt file at the top of a project.  Typical
usage:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(Dart)
if(BUILD_TESTING)
  # ... testing related CMake code ...
endif()
.EE
.UNINDENT
.UNINDENT
.sp
The BUILD_TESTING option is created by the Dart module to determine
whether testing support should be enabled.  The default is ON.
.SS Documentation
.sp
Deprecated since version 3.18: This module does nothing, unless policy \fI\%CMP0106\fP is set to \fBOLD\fP\&.

.sp
This module provides support for the VTK documentation framework.  It
relies on several tools (Doxygen, Perl, etc).
.SS GetPrerequisites
.sp
Deprecated since version 3.16: Use \fI\%file(GET_RUNTIME_DEPENDENCIES)\fP instead.

.sp
This module provides functions to analyze and list the dependencies
(prerequisites) of executable or shared library files.  These functions list the
shared libraries (\fB\&.dll\fP, \fB\&.dylib\fP, or \fB\&.so\fP files) required by an
executable or shared library.
.sp
It determines dependencies using the following platform\-specific tools:
.INDENT 0.0
.IP \(bu 2
\fBdumpbin\fP (Windows)
.IP \(bu 2
\fBobjdump\fP (MinGW on Windows)
.IP \(bu 2
\fBldd\fP (Linux/Unix)
.IP \(bu 2
\fBotool\fP (Apple operating systems)
.UNINDENT
.sp
Changed in version 3.16: The tool specified by the \fI\%CMAKE_OBJDUMP\fP variable will be used, if
set.

.sp
The following functions are provided by this module:
.INDENT 0.0
.IP \(bu 2
\fI\%get_prerequisites()\fP
.IP \(bu 2
\fI\%list_prerequisites()\fP
.IP \(bu 2
\fI\%list_prerequisites_by_glob()\fP
.IP \(bu 2
\fI\%gp_append_unique()\fP
.IP \(bu 2
\fI\%is_file_executable()\fP
.IP \(bu 2
\fI\%gp_item_default_embedded_path()\fP
(projects can override it with \fBgp_item_default_embedded_path_override()\fP)
.IP \(bu 2
\fI\%gp_resolve_item()\fP
(projects can override it with \fBgp_resolve_item_override()\fP)
.IP \(bu 2
\fI\%gp_resolved_file_type()\fP
(projects can override it with \fBgp_resolved_file_type_override()\fP)
.IP \(bu 2
\fI\%gp_file_type()\fP
.UNINDENT
.SS Functions
.INDENT 0.0
.TP
.B get_prerequisites
.INDENT 7.0
.INDENT 3.5
.sp
.EX
get_prerequisites(<target> <prerequisites\-var> <exclude\-system> <recurse>
                  <exepath> <dirs> [<rpaths>])
.EE
.UNINDENT
.UNINDENT
.sp
Gets the list of shared library files required by \fB<target>\fP\&.  The list
in the variable named \fB<prerequisites\-var>\fP should be empty on first
entry to this function.  On exit, \fB<prerequisites\-var>\fP will contain the
list of required shared library files.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<target>\fP
The full path to an executable or shared library file.
.TP
.B \fB<prerequisites\-var>\fP
The name of a CMake variable to contain the results.
.TP
.B \fB<exclude\-system>\fP
If set to 1 system prerequisites will be excluded, if set to 0 they will be
included.
.TP
.B \fB<recurse>\fP
If set to 1 all prerequisites will be found recursively, if set to 0 only
direct prerequisites are listed.
.TP
.B \fB<exepath>\fP
The path to the top level executable used for \fB@executable_path\fP
replacement on Apple operating systems.
.TP
.B \fB<dirs>\fP
A list of paths where libraries might be found: these paths are searched
first when a target without any path info is given.  Then standard system
locations are also searched: PATH, Framework locations, /usr/lib...
.TP
.B \fB<rpaths>\fP
Optional run\-time search paths for an executable file or library to help
find files.
.UNINDENT
.sp
Added in version 3.14: The variable \fBGET_PREREQUISITES_VERBOSE\fP can be set to true before calling
this function to enable verbose output.

.UNINDENT
.INDENT 0.0
.TP
.B list_prerequisites
.INDENT 7.0
.INDENT 3.5
.sp
.EX
list_prerequisites(<target> [<recurse> [<exclude\-system> [<verbose>]]])
.EE
.UNINDENT
.UNINDENT
.sp
Prints a message listing the prerequisites of \fB<target>\fP\&.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<target>\fP
The name of a shared library or executable target or the full path to a
shared library or executable file.
.TP
.B \fB<recurse>\fP
If set to 1 all prerequisites will be found recursively, if set to 0 only
direct prerequisites are listed.
.TP
.B \fB<exclude\-system>\fP
If set to 1 system prerequisites will be excluded, if set to 0 they will be
included.
.TP
.B \fB<verbose>\fP
If set to 0 only the full path names of the prerequisites are printed. If
set to 1 extra information will be displayed.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B list_prerequisites_by_glob
.INDENT 7.0
.INDENT 3.5
.sp
.EX
list_prerequisites_by_glob(<GLOB|GLOB_RECURSE>
                           <glob\-exp>
                           [<optional\-args>...])
.EE
.UNINDENT
.UNINDENT
.sp
Prints the prerequisites of shared library and executable files matching a
globbing pattern.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fBGLOB\fP or \fBGLOB_RECURSE\fP
The globbing mode, whether to traverse only the match or also its
subdirectories recursively.
.TP
.B \fB<glob\-exp>\fP
A globbing expression used with \fI\%file(GLOB)\fP or
\fI\%file(GLOB_RECURSE)\fP to retrieve a list of matching files.  If a
matching file is executable, its prerequisites are listed.
.TP
.B \fB<optional\-args>...\fP
Any additional (optional) arguments provided are passed along as the
optional arguments to the \fBlist_prerequisite()\fP calls.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B gp_append_unique
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gp_append_unique(<list\-var> <value>)
.EE
.UNINDENT
.UNINDENT
.sp
Appends \fB<value>\fP to the list variable \fB<list\-var>\fP only if the value is
not already in the list.
.UNINDENT
.INDENT 0.0
.TP
.B is_file_executable
.INDENT 7.0
.INDENT 3.5
.sp
.EX
is_file_executable(<file> <result\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
Sets \fB<result\-var>\fP to 1 if \fB<file>\fP is a binary executable; otherwise
sets it to 0.
.UNINDENT
.INDENT 0.0
.TP
.B gp_item_default_embedded_path
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gp_item_default_embedded_path(<item> <default\-embedded\-path\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
Determines the reference path for \fB<item>\fP when it is embedded inside a
bundle and stores it to a variable \fB<default\-embedded\-path\-var>\fP\&.
.sp
Projects can override this function by defining a custom
\fBgp_item_default_embedded_path_override()\fP function.
.UNINDENT
.INDENT 0.0
.TP
.B gp_resolve_item
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gp_resolve_item(<context> <item> <exepath> <dirs> <resolved\-item\-var>
                [<rpaths>])
.EE
.UNINDENT
.UNINDENT
.sp
Resolves a given \fB<item>\fP into an existing full path file and stores it to a
\fB<resolved\-item\-var>\fP variable.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<context>\fP
The path to the top level loading path used for \fB@loader_path\fP replacement
on Apple operating systems.  When resolving item, \fB@loader_path\fP
references will be resolved relative to the directory of the given context
value (presumably another library).
.TP
.B \fB<item>\fP
The item to resolve.
.TP
.B \fB<exepath>\fP
See the argument description in \fI\%get_prerequisites()\fP\&.
.TP
.B \fB<dirs>\fP
See the argument description in \fI\%get_prerequisites()\fP\&.
.TP
.B \fB<resolved\-item\-var>\fP
The result variable where the resolved item is stored into.
.TP
.B \fB<rpaths>\fP
See the argument description in \fI\%get_prerequisites()\fP\&.
.UNINDENT
.sp
Projects can override this function by defining a custom
\fBgp_resolve_item_override()\fP function.
.UNINDENT
.INDENT 0.0
.TP
.B gp_resolved_file_type
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gp_resolved_file_type(<original\-file> <file> <exepath> <dirs> <type\-var>
                      [<rpaths>])
.EE
.UNINDENT
.UNINDENT
.sp
Determines the type of \fB<file>\fP with respect to \fB<original\-file>\fP\&. The
resulting type of prerequisite is stored in the \fB<type\-var>\fP variable.
.sp
Use \fB<exepath>\fP and \fB<dirs>\fP if necessary to resolve non\-absolute
\fB<file>\fP values \-\- but only for non\-embedded items.
.INDENT 7.0
.TP
.B \fB<rpaths>\fP
See the argument description in \fI\%get_prerequisites()\fP\&.
.UNINDENT
.sp
The \fB<type\-var>\fP variable will be set to one of the following values:
.INDENT 7.0
.IP \(bu 2
\fBsystem\fP
.IP \(bu 2
\fBlocal\fP
.IP \(bu 2
\fBembedded\fP
.IP \(bu 2
\fBother\fP
.UNINDENT
.sp
Projects can override this function by defining a custom
\fBgp_resolved_file_type_override()\fP function.
.UNINDENT
.INDENT 0.0
.TP
.B gp_file_type
.INDENT 7.0
.INDENT 3.5
.sp
.EX
gp_file_type(<original\-file> <file> <type\-var>)
.EE
.UNINDENT
.UNINDENT
.sp
Determines the type of \fB<file>\fP with respect to \fB<original\-file>\fP\&. The
resulting type of prerequisite is stored in the \fB<type\-var>\fP variable.
.sp
The \fB<type\-var>\fP variable will be set to one of the following values:
.INDENT 7.0
.IP \(bu 2
\fBsystem\fP
.IP \(bu 2
\fBlocal\fP
.IP \(bu 2
\fBembedded\fP
.IP \(bu 2
\fBother\fP
.UNINDENT
.UNINDENT
.SS Examples
.sp
Printing all dependencies of a shared library, including system libraries, with
verbose output:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(GetPrerequisites)
list_prerequisites(\(dqpath/to/libfoo.dylib\(dq 1 0 1)
.EE
.UNINDENT
.UNINDENT
.SS MacroAddFileDependencies
.sp
Deprecated since version 3.14.

.INDENT 0.0
.INDENT 3.5
.sp
.EX
macro_add_file_dependencies(<source> <files>...)
.EE
.UNINDENT
.UNINDENT
.sp
Do not use this command in new code.  It is just a wrapper around:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set_property(SOURCE <source> APPEND PROPERTY OBJECT_DEPENDS <files>...)
.EE
.UNINDENT
.UNINDENT
.sp
Instead use the \fI\%set_property()\fP command to append to the
\fI\%OBJECT_DEPENDS\fP source file property directly.
.SS SquishTestScript
.sp
Deprecated since version 3.0.

.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module is not intended to be included directly in a CMake project.  It is
an internal CMake test script used to launch GUI tests with Squish.  For usage
details, refer to the \fI\%squish_add_test()\fP command documentation in the
\fBFindSquish\fP module.
.UNINDENT
.UNINDENT
.SS TestBigEndian
.sp
Deprecated since version 3.20: Supserseded by the \fI\%CMAKE_<LANG>_BYTE_ORDER\fP variable.

.sp
Check if the target architecture is big endian or little endian.
.INDENT 0.0
.TP
.B test_big_endian
.INDENT 7.0
.INDENT 3.5
.sp
.EX
test_big_endian(<var>)
.EE
.UNINDENT
.UNINDENT
.sp
Stores in variable \fB<var>\fP either 1 or 0 indicating whether the
target architecture is big or little endian.
.UNINDENT
.SS TestCXXAcceptsFlag
.sp
Deprecated since version 3.0: This module should no longer be used.  It has been superseded by the
\fI\%CheckCXXCompilerFlag\fP module.  As of CMake 3.19, the
\fI\%CheckCompilerFlag\fP module is also available for checking flags across
multiple languages.

.sp
This module provides a macro to test whether the C++ (CXX) compiler supports
specific flags.
.SS Macros
.INDENT 0.0
.TP
.B check_cxx_accepts_flag
Checks whether the CXX compiler accepts the specified flags:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
check_cxx_accepts_flag(<flags> <result\-variable>)
.EE
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B \fB<flags>\fP
One or more compiler flags to test.  For multiple flags, provide them as a
space\-separated string.
.TP
.B \fB<result\-variable>\fP
Name of an internal cache variable that stores the result.  It is set to
boolean true if the compiler accepts the flags and false otherwise.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Checking if the C++ compiler supports specific flags:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(TestCXXAcceptsFlag)
check_cxx_accepts_flag(\(dq\-fno\-common \-fstack\-clash\-protection\(dq HAVE_FLAGS)
.EE
.UNINDENT
.UNINDENT
.sp
Migrating to the \fI\%CheckCompilerFlag\fP module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(CheckCompilerFlag)
check_compiler_flag(CXX \(dq\-fno\-common;\-fstack\-clash\-protection\(dq HAVE_FLAGS)
.EE
.UNINDENT
.UNINDENT
.SS Use_wxWindows
.sp
Deprecated since version 2.8.10: Use \fI\%find_package(wxWidgets)\fP instead.

.sp
This convenience include finds if wxWindows library is installed and sets the
appropriate libraries, include directories, flags, etc.
.SS Examples
.sp
Include \fBUse_wxWindows\fP module in project\(aqs \fBCMakeLists.txt\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# CMakeLists.txt
include(Use_wxWindows)
.EE
.UNINDENT
.UNINDENT
.sp
When the GL support is required, set \fBWXWINDOWS_USE_GL\fP \fIbefore\fP including
this module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(WXWINDOWS_USE_GL ON)
include(Use_wxWindows)
.EE
.UNINDENT
.UNINDENT
.SS UseJavaClassFilelist
.sp
Changed in version 3.20: This module was previously documented by mistake and was never meant for
direct inclusion by project code.  See the \fI\%UseJava\fP module.

.SS UseJavaSymlinks
.sp
Changed in version 3.20: This module was previously documented by mistake and was never meant for
direct inclusion by project code.  See the \fI\%UseJava\fP module.

.SS UsePkgConfig
.sp
Deprecated since version 3.0: This module should no longer be used.  Instead, use the
\fI\%FindPkgConfig\fP module or the \fI\%cmake_pkg_config()\fP command.
.sp
This module provided a macro for finding external packages using
\fBpkg\-config\fP command\-line utility.  It has been replaced by the more
convenient \fBFindPkgConfig\fP module, which is commonly used in
\fI\%Find Modules\fP\&.
.sp
As of CMake 3.31, the built\-in \fI\%cmake_pkg_config()\fP command provides
even more features to extract package information.

.SS Macros
.sp
This module defines the following macro:
.INDENT 0.0
.TP
.B pkgconfig
Finds external package using \fBpkg\-config\fP and sets result variables:
.INDENT 7.0
.INDENT 3.5
.sp
.EX
pkgconfig(<package> <includedir> <libdir> <linkflags> <cflags>)
.EE
.UNINDENT
.UNINDENT
.sp
This macro invokes \fBpkg\-config\fP command\-line utility to retrieve the package
information into specified variables.  If \fBpkg\-config\fP or the specified
package \fB<package>\fP is NOT found, the result variables remain empty.
.sp
The arguments are:
.INDENT 7.0
.TP
.B \fB<package>\fP
Name of the package as defined in its PC metadata file (\fB<package>.pc\fP).
.TP
.B \fB<includedir>\fP
Variable name to store the package\(aqs include directory.
.TP
.B \fB<libdir>\fP
Variable name to store the directory containing the package library.
.TP
.B \fB<linkflags>\fP
Variable name to store the linker flags for the package.
.TP
.B \fB<cflags>\fP
Variable name to store the compiler flags for the package.
.UNINDENT
.UNINDENT
.SS Examples
.sp
Using this module fills the desired information into the four given variables:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(UsePkgConfig)
pkgconfig(
  libart\-2.0
  LIBART_INCLUDEDIR
  LIBART_LIBDIR
  LIBART_LDFLAGS
  LIBART_CFLAGS
)
.EE
.UNINDENT
.UNINDENT
.sp
Migrating to the \fI\%FindPkgConfig\fP  would look something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PkgConfig QUIET)
if(PKG_CONFIG_FOUND)
  pkg_check_modules(LIBART QUIET libart\-2.0)
endif()

message(STATUS \(dqLIBART_INCLUDEDIR=${LIBART_INCLUDEDIR}\(dq)
message(STATUS \(dqLIBART_LIBDIR=${LIBART_LIBDIR}\(dq)
message(STATUS \(dqLIBART_LDFLAGS=${LIBART_LDFLAGS}\(dq)
message(STATUS \(dqLIBART_CFLAGS=${LIBART_CFLAGS}\(dq)
.EE
.UNINDENT
.UNINDENT
.SS WriteBasicConfigVersionFile
.sp
Deprecated since version 3.0: Use the identical command \fI\%write_basic_package_version_file()\fP
from module \fI\%CMakePackageConfigHelpers\fP\&.

.INDENT 0.0
.INDENT 3.5
.sp
.EX
WRITE_BASIC_CONFIG_VERSION_FILE(filename
  [VERSION major.minor.patch]
  COMPATIBILITY (AnyNewerVersion|SameMajorVersion|SameMinorVersion|ExactVersion)
  [ARCH_INDEPENDENT]
  )
.EE
.UNINDENT
.UNINDENT
.SS WriteCompilerDetectionHeader
.sp
Deprecated since version 3.20: This module is available only if policy \fI\%CMP0120\fP
is not set to \fBNEW\fP\&.  Do not use it in new code.

.sp
Added in version 3.1.

.sp
This module provides the function \fBwrite_compiler_detection_header()\fP\&.
.sp
This function can be used to generate a file suitable for preprocessor
inclusion which contains macros to be used in source code:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
write_compiler_detection_header(
          FILE <file>
          PREFIX <prefix>
          [OUTPUT_FILES_VAR <output_files_var> OUTPUT_DIR <output_dir>]
          COMPILERS <compiler> [...]
          FEATURES <feature> [...]
          [BARE_FEATURES <feature> [...]]
          [VERSION <version>]
          [PROLOG <prolog>]
          [EPILOG <epilog>]
          [ALLOW_UNKNOWN_COMPILERS]
          [ALLOW_UNKNOWN_COMPILER_VERSIONS]
)
.EE
.UNINDENT
.UNINDENT
.sp
This generates the file \fB<file>\fP with macros which all have the prefix
\fB<prefix>\fP\&.
.sp
By default, all content is written directly to the \fB<file>\fP\&.  The
\fBOUTPUT_FILES_VAR\fP may be specified to cause the compiler\-specific
content to be written to separate files.  The separate files are then
available in the \fB<output_files_var>\fP and may be consumed by the caller
for installation for example.  The \fBOUTPUT_DIR\fP specifies a relative
path from the main \fB<file>\fP to the compiler\-specific files. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
write_compiler_detection_header(
  FILE climbingstats_compiler_detection.h
  PREFIX ClimbingStats
  OUTPUT_FILES_VAR support_files
  OUTPUT_DIR compilers
  COMPILERS GNU Clang MSVC Intel
  FEATURES cxx_variadic_templates
)
install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/climbingstats_compiler_detection.h
  DESTINATION include
)
install(FILES
  ${support_files}
  DESTINATION include/compilers
)
.EE
.UNINDENT
.UNINDENT
.sp
\fBVERSION\fP may be used to specify the API version to be generated.
Future versions of CMake may introduce alternative APIs.  A given
API is selected by any \fB<version>\fP value greater than or equal
to the version of CMake that introduced the given API and less
than the version of CMake that introduced its succeeding API.
The value of the \fI\%CMAKE_MINIMUM_REQUIRED_VERSION\fP
variable is used if no explicit version is specified.
(As of CMake version 4.1.0 there is only one API version.)
.sp
\fBPROLOG\fP may be specified as text content to write at the start of the
header. \fBEPILOG\fP may be specified as text content to write at the end
of the header
.sp
At least one \fB<compiler>\fP and one \fB<feature>\fP must be listed.  Compilers
which are known to CMake, but not specified are detected and a preprocessor
\fB#error\fP is generated for them.  A preprocessor macro matching
\fB<PREFIX>_COMPILER_IS_<compiler>\fP is generated for each compiler
known to CMake to contain the value \fB0\fP or \fB1\fP\&.
.sp
Possible compiler identifiers are documented with the
\fI\%CMAKE_<LANG>_COMPILER_ID\fP variable.
Available features in this version of CMake are listed in the
\fI\%CMAKE_C_KNOWN_FEATURES\fP and
\fI\%CMAKE_CXX_KNOWN_FEATURES\fP global properties.
See the \fI\%cmake\-compile\-features(7)\fP manual for information on
compile features.
.sp
Added in version 3.2: Added \fBMSVC\fP and \fBAppleClang\fP compiler support.

.sp
Added in version 3.6: Added \fBIntel\fP compiler support.

.sp
Changed in version 3.8: The \fB{c,cxx}_std_*\fP meta\-features are ignored if requested.

.sp
Added in version 3.8: \fBALLOW_UNKNOWN_COMPILERS\fP and \fBALLOW_UNKNOWN_COMPILER_VERSIONS\fP cause
the module to generate conditions that treat unknown compilers as simply
lacking all features.  Without these options the default behavior is to
generate a \fB#error\fP for unknown compilers and versions.

.sp
Added in version 3.12: \fBBARE_FEATURES\fP will define the compatibility macros with the name used in
newer versions of the language standard, so the code can use the new feature
name unconditionally.

.SS Feature Test Macros
.sp
For each compiler, a preprocessor macro is generated matching
\fB<PREFIX>_COMPILER_IS_<compiler>\fP which has the content either \fB0\fP
or \fB1\fP, depending on the compiler in use. Preprocessor macros for
compiler version components are generated matching
\fB<PREFIX>_COMPILER_VERSION_MAJOR\fP \fB<PREFIX>_COMPILER_VERSION_MINOR\fP
and \fB<PREFIX>_COMPILER_VERSION_PATCH\fP containing decimal values
for the corresponding compiler version components, if defined.
.sp
A preprocessor test is generated based on the compiler version
denoting whether each feature is enabled.  A preprocessor macro
matching \fB<PREFIX>_COMPILER_<FEATURE>\fP, where \fB<FEATURE>\fP is the
upper\-case \fB<feature>\fP name, is generated to contain the value
\fB0\fP or \fB1\fP depending on whether the compiler in use supports the
feature:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
write_compiler_detection_header(
  FILE climbingstats_compiler_detection.h
  PREFIX ClimbingStats
  COMPILERS GNU Clang AppleClang MSVC Intel
  FEATURES cxx_variadic_templates
)
.EE
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#if ClimbingStats_COMPILER_CXX_VARIADIC_TEMPLATES
template<typename... T>
void someInterface(T t...) { /* ... */ }
#else
// Compatibility versions
template<typename T1>
void someInterface(T1 t1) { /* ... */ }
template<typename T1, typename T2>
void someInterface(T1 t1, T2 t2) { /* ... */ }
template<typename T1, typename T2, typename T3>
void someInterface(T1 t1, T2 t2, T3 t3) { /* ... */ }
#endif
.EE
.UNINDENT
.UNINDENT
.SS Symbol Macros
.sp
Some additional symbol\-defines are created for particular features for
use as symbols which may be conditionally defined empty:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
class MyClass ClimbingStats_FINAL
{
    ClimbingStats_CONSTEXPR int someInterface() { return 42; }
};
.EE
.UNINDENT
.UNINDENT
.sp
The \fBClimbingStats_FINAL\fP macro will expand to \fBfinal\fP if the
compiler (and its flags) support the \fBcxx_final\fP feature, and the
\fBClimbingStats_CONSTEXPR\fP macro will expand to \fBconstexpr\fP
if \fBcxx_constexpr\fP is supported.
.sp
If \fBBARE_FEATURES cxx_final\fP was given as argument the \fBfinal\fP keyword
will be defined for old compilers, too.
.sp
The following features generate corresponding symbol defines and if they
are available as \fBBARE_FEATURES\fP:
.TS
box center;
l|l|l|l.
T{
Feature
T}	T{
Define
T}	T{
Symbol
T}	T{
bare
T}
_
T{
\fBc_restrict\fP
T}	T{
\fB<PREFIX>_RESTRICT\fP
T}	T{
\fBrestrict\fP
T}	T{
yes
T}
_
T{
\fBcxx_constexpr\fP
T}	T{
\fB<PREFIX>_CONSTEXPR\fP
T}	T{
\fBconstexpr\fP
T}	T{
yes
T}
_
T{
\fBcxx_deleted_functions\fP
T}	T{
\fB<PREFIX>_DELETED_FUNCTION\fP
T}	T{
\fB= delete\fP
T}	T{
T}
_
T{
\fBcxx_extern_templates\fP
T}	T{
\fB<PREFIX>_EXTERN_TEMPLATE\fP
T}	T{
\fBextern\fP
T}	T{
T}
_
T{
\fBcxx_final\fP
T}	T{
\fB<PREFIX>_FINAL\fP
T}	T{
\fBfinal\fP
T}	T{
yes
T}
_
T{
\fBcxx_noexcept\fP
T}	T{
\fB<PREFIX>_NOEXCEPT\fP
T}	T{
\fBnoexcept\fP
T}	T{
yes
T}
_
T{
\fBcxx_noexcept\fP
T}	T{
\fB<PREFIX>_NOEXCEPT_EXPR(X)\fP
T}	T{
\fBnoexcept(X)\fP
T}	T{
T}
_
T{
\fBcxx_override\fP
T}	T{
\fB<PREFIX>_OVERRIDE\fP
T}	T{
\fBoverride\fP
T}	T{
yes
T}
.TE
.SS Compatibility Implementation Macros
.sp
Some features are suitable for wrapping in a macro with a backward
compatibility implementation if the compiler does not support the feature.
.sp
When the \fBcxx_static_assert\fP feature is not provided by the compiler,
a compatibility implementation is available via the
\fB<PREFIX>_STATIC_ASSERT(COND)\fP and
\fB<PREFIX>_STATIC_ASSERT_MSG(COND, MSG)\fP function\-like macros. The macros
expand to \fBstatic_assert\fP where that compiler feature is available, and
to a compatibility implementation otherwise. In the first form, the
condition is stringified in the message field of \fBstatic_assert\fP\&.  In
the second form, the message \fBMSG\fP is passed to the message field of
\fBstatic_assert\fP, or ignored if using the backward compatibility
implementation.
.sp
The \fBcxx_attribute_deprecated\fP feature provides a macro definition
\fB<PREFIX>_DEPRECATED\fP, which expands to either the standard
\fB[[deprecated]]\fP attribute or a compiler\-specific decorator such
as \fB__attribute__((__deprecated__))\fP used by GNU compilers.
.sp
The \fBcxx_alignas\fP feature provides a macro definition
\fB<PREFIX>_ALIGNAS\fP which expands to either the standard \fBalignas\fP
decorator or a compiler\-specific decorator such as
\fB__attribute__ ((__aligned__))\fP used by GNU compilers.
.sp
The \fBcxx_alignof\fP feature provides a macro definition
\fB<PREFIX>_ALIGNOF\fP which expands to either the standard \fBalignof\fP
decorator or a compiler\-specific decorator such as \fB__alignof__\fP
used by GNU compilers.
.TS
box center;
l|l|l|l.
T{
Feature
T}	T{
Define
T}	T{
Symbol
T}	T{
bare
T}
_
T{
\fBcxx_alignas\fP
T}	T{
\fB<PREFIX>_ALIGNAS\fP
T}	T{
\fBalignas\fP
T}	T{
T}
_
T{
\fBcxx_alignof\fP
T}	T{
\fB<PREFIX>_ALIGNOF\fP
T}	T{
\fBalignof\fP
T}	T{
T}
_
T{
\fBcxx_nullptr\fP
T}	T{
\fB<PREFIX>_NULLPTR\fP
T}	T{
\fBnullptr\fP
T}	T{
yes
T}
_
T{
\fBcxx_static_assert\fP
T}	T{
\fB<PREFIX>_STATIC_ASSERT\fP
T}	T{
\fBstatic_assert\fP
T}	T{
T}
_
T{
\fBcxx_static_assert\fP
T}	T{
\fB<PREFIX>_STATIC_ASSERT_MSG\fP
T}	T{
\fBstatic_assert\fP
T}	T{
T}
_
T{
\fBcxx_attribute_deprecated\fP
T}	T{
\fB<PREFIX>_DEPRECATED\fP
T}	T{
\fB[[deprecated]]\fP
T}	T{
T}
_
T{
\fBcxx_attribute_deprecated\fP
T}	T{
\fB<PREFIX>_DEPRECATED_MSG\fP
T}	T{
\fB[[deprecated]]\fP
T}	T{
T}
_
T{
\fBcxx_thread_local\fP
T}	T{
\fB<PREFIX>_THREAD_LOCAL\fP
T}	T{
\fBthread_local\fP
T}	T{
T}
.TE
.sp
A use\-case which arises with such deprecation macros is the deprecation
of an entire library.  In that case, all public API in the library may
be decorated with the \fB<PREFIX>_DEPRECATED\fP macro.  This results in
very noisy build output when building the library itself, so the macro
may be may be defined to empty in that case when building the deprecated
library:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_library(compat_support ${srcs})
target_compile_definitions(compat_support
  PRIVATE
    CompatSupport_DEPRECATED=
)
.EE
.UNINDENT
.UNINDENT
.SS Example Usage
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This section was migrated from the \fI\%cmake\-compile\-features(7)\fP
manual since it relies on the \fBWriteCompilerDetectionHeader\fP module
which is removed by policy \fI\%CMP0120\fP\&.
.UNINDENT
.UNINDENT
.sp
Compile features may be preferred if available, without creating a hard
requirement.  For example, a library may provide alternative
implementations depending on whether the \fBcxx_variadic_templates\fP
feature is available:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#if Foo_COMPILER_CXX_VARIADIC_TEMPLATES
template<int I, int... Is>
struct Interface;

template<int I>
struct Interface<I>
{
  static int accumulate()
  {
    return I;
  }
};

template<int I, int... Is>
struct Interface
{
  static int accumulate()
  {
    return I + Interface<Is...>::accumulate();
  }
};
#else
template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>
struct Interface
{
  static int accumulate() { return I1 + I2 + I3 + I4; }
};
#endif
.EE
.UNINDENT
.UNINDENT
.sp
Such an interface depends on using the correct preprocessor defines for the
compiler features.  CMake can generate a header file containing such
defines using the \fI\%WriteCompilerDetectionHeader\fP module.  The
module contains the \fBwrite_compiler_detection_header\fP function which
accepts parameters to control the content of the generated header file:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
write_compiler_detection_header(
  FILE \(dq${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\(dq
  PREFIX Foo
  COMPILERS GNU
  FEATURES
    cxx_variadic_templates
)
.EE
.UNINDENT
.UNINDENT
.sp
Such a header file may be used internally in the source code of a project,
and it may be installed and used in the interface of library code.
.sp
For each feature listed in \fBFEATURES\fP, a preprocessor definition
is created in the header file, and defined to either \fB1\fP or \fB0\fP\&.
.sp
Additionally, some features call for additional defines, such as the
\fBcxx_final\fP and \fBcxx_override\fP features. Rather than being used in
\fB#ifdef\fP code, the \fBfinal\fP keyword is abstracted by a symbol
which is defined to either \fBfinal\fP, a compiler\-specific equivalent, or
to empty.  That way, C++ code can be written to unconditionally use the
symbol, and compiler support determines what it is expanded to:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
struct Interface {
  virtual void Execute() = 0;
};

struct Concrete Foo_FINAL {
  void Execute() Foo_OVERRIDE;
};
.EE
.UNINDENT
.UNINDENT
.sp
In this case, \fBFoo_FINAL\fP will expand to \fBfinal\fP if the
compiler supports the keyword, or to empty otherwise.
.sp
In this use\-case, the project code may wish to enable a particular language
standard if available from the compiler. The \fI\%CXX_STANDARD\fP
target property may be set to the desired language standard for a particular
target, and the \fI\%CMAKE_CXX_STANDARD\fP variable may be set to
influence all following targets:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
write_compiler_detection_header(
  FILE \(dq${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\(dq
  PREFIX Foo
  COMPILERS GNU
  FEATURES
    cxx_final cxx_override
)

# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol
# which will expand to \(aqfinal\(aq if the compiler supports the requested
# CXX_STANDARD.
add_library(foo foo.cpp)
set_property(TARGET foo PROPERTY CXX_STANDARD 11)

# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol
# which will expand to \(aqfinal\(aq if the compiler supports the feature,
# even though CXX_STANDARD is not set explicitly.  The requirement of
# cxx_constexpr causes CMake to set CXX_STANDARD internally, which
# affects the compile flags.
add_library(foo_impl foo_impl.cpp)
target_compile_features(foo_impl PRIVATE cxx_constexpr)
.EE
.UNINDENT
.UNINDENT
.sp
The \fBwrite_compiler_detection_header\fP function also creates compatibility
code for other features which have standard equivalents.  For example, the
\fBcxx_static_assert\fP feature is emulated with a template and abstracted
via the \fB<PREFIX>_STATIC_ASSERT\fP and \fB<PREFIX>_STATIC_ASSERT_MSG\fP
function\-macros.
.SS Deprecated Find Modules
.SS FindBoost
.sp
Changed in version 3.30: This module is available only if policy \fI\%CMP0167\fP is not set to
\fBNEW\fP\&.  Port projects to upstream Boost\(aqs \fBBoostConfig.cmake\fP package
configuration file, for which \fBfind_package(Boost)\fP now searches.

.sp
Find Boost include dirs and libraries
.sp
Use this module by invoking \fI\%find_package()\fP with the form:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Boost
  [version] [EXACT]      # Minimum or EXACT version e.g. 1.67.0
  [REQUIRED]             # Fail with error if Boost is not found
  [COMPONENTS <libs>...] # Boost libraries by their canonical name
                         # e.g. \(dqdate_time\(dq for \(dqlibboost_date_time\(dq
  [OPTIONAL_COMPONENTS <libs>...]
                         # Optional Boost libraries by their canonical name)
  )                      # e.g. \(dqdate_time\(dq for \(dqlibboost_date_time\(dq
.EE
.UNINDENT
.UNINDENT
.sp
This module finds headers and requested component libraries OR a CMake
package configuration file provided by a \(dqBoost CMake\(dq build.  For the
latter case skip to the \fI\%Boost CMake\fP section below.
.sp
Added in version 3.7: \fBbzip2\fP and \fBzlib\fP components (Windows only).

.sp
Added in version 3.11: The \fBOPTIONAL_COMPONENTS\fP option.

.sp
Added in version 3.13: \fBstacktrace_*\fP components.

.sp
Added in version 3.19: \fBbzip2\fP and \fBzlib\fP components on all platforms.

.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBBoost_FOUND\fP
True if headers and requested libraries were found.
.TP
.B \fBBoost_INCLUDE_DIRS\fP
Boost include directories.
.TP
.B \fBBoost_LIBRARY_DIRS\fP
Link directories for Boost libraries.
.TP
.B \fBBoost_LIBRARIES\fP
Boost component libraries to be linked.
.TP
.B \fBBoost_<COMPONENT>_FOUND\fP
True if component \fB<COMPONENT>\fP was found (\fB<COMPONENT>\fP name is upper\-case).
.TP
.B \fBBoost_<COMPONENT>_LIBRARY\fP
Libraries to link for component \fB<COMPONENT>\fP (may include
\fI\%target_link_libraries()\fP debug/optimized keywords).
.TP
.B \fBBoost_VERSION_MACRO\fP
\fBBOOST_VERSION\fP value from \fBboost/version.hpp\fP\&.
.TP
.B \fBBoost_VERSION_STRING\fP
Boost version number in \fBX.Y.Z\fP format.
.TP
.B \fBBoost_VERSION\fP
Boost version number in \fBX.Y.Z\fP format (same as \fBBoost_VERSION_STRING\fP).
.sp
Changed in version 3.15: In previous CMake versions, this variable used the raw version string
from the Boost header (same as \fBBoost_VERSION_MACRO\fP).
See policy \fI\%CMP0093\fP\&.

.TP
.B \fBBoost_LIB_VERSION\fP
Version string appended to library filenames.
.TP
.B \fBBoost_VERSION_MAJOR\fP, \fBBoost_MAJOR_VERSION\fP
Boost major version number (\fBX\fP in \fBX.Y.Z\fP).
.TP
.B \fBBoost_VERSION_MINOR\fP, \fBBoost_MINOR_VERSION\fP
Boost minor version number (\fBY\fP in \fBX.Y.Z\fP).
.TP
.B \fBBoost_VERSION_PATCH\fP, \fBBoost_SUBMINOR_VERSION\fP
Boost subminor version number (\fBZ\fP in \fBX.Y.Z\fP).
.TP
.B \fBBoost_VERSION_COUNT\fP
Amount of version components (3).
.TP
.B \fBBoost_LIB_DIAGNOSTIC_DEFINITIONS\fP (Windows\-specific)
Pass to \fI\%add_definitions()\fP to have diagnostic
information about Boost\(aqs automatic linking
displayed during compilation
.UNINDENT
.sp
Added in version 3.15: The \fBBoost_VERSION_<PART>\fP variables.

.SS Cache variables
.sp
Search results are saved persistently in CMake cache entries:
.INDENT 0.0
.TP
.B \fBBoost_INCLUDE_DIR\fP
Directory containing Boost headers.
.TP
.B \fBBoost_LIBRARY_DIR_RELEASE\fP
Directory containing release Boost libraries.
.TP
.B \fBBoost_LIBRARY_DIR_DEBUG\fP
Directory containing debug Boost libraries.
.TP
.B \fBBoost_<COMPONENT>_LIBRARY_DEBUG\fP
Component \fB<COMPONENT>\fP library debug variant.
.TP
.B \fBBoost_<COMPONENT>_LIBRARY_RELEASE\fP
Component \fB<COMPONENT>\fP library release variant.
.UNINDENT
.sp
Added in version 3.3: Per\-configuration variables \fBBoost_LIBRARY_DIR_RELEASE\fP and
\fBBoost_LIBRARY_DIR_DEBUG\fP\&.

.SS Hints
.sp
This module reads hints about search locations from variables:
.INDENT 0.0
.TP
.B \fBBOOST_ROOT\fP, \fBBOOSTROOT\fP
Preferred installation prefix.
.TP
.B \fBBOOST_INCLUDEDIR\fP
Preferred include directory e.g. \fB<prefix>/include\fP\&.
.TP
.B \fBBOOST_LIBRARYDIR\fP
Preferred library directory e.g. \fB<prefix>/lib\fP\&.
.TP
.B \fBBoost_NO_SYSTEM_PATHS\fP
Set to \fBON\fP to disable searching in locations not
specified by these hint variables. Default is \fBOFF\fP\&.
.TP
.B \fBBoost_ADDITIONAL_VERSIONS\fP
List of Boost versions not known to this module.
(Boost install locations may contain the version).
.UNINDENT
.sp
Users may set these hints or results as \fBCACHE\fP entries.  Projects
should not read these entries directly but instead use the above
result variables.  Note that some hint names start in upper\-case
\fBBOOST\fP\&.  One may specify these as environment variables if they are
not specified as CMake variables or cache entries.
.sp
This module first searches for the Boost header files using the above
hint variables (excluding \fBBOOST_LIBRARYDIR\fP) and saves the result in
\fBBoost_INCLUDE_DIR\fP\&.  Then it searches for requested component libraries
using the above hints (excluding \fBBOOST_INCLUDEDIR\fP and
\fBBoost_ADDITIONAL_VERSIONS\fP), \(dqlib\(dq directories near \fBBoost_INCLUDE_DIR\fP,
and the library name configuration settings below.  It saves the
library directories in \fBBoost_LIBRARY_DIR_DEBUG\fP and
\fBBoost_LIBRARY_DIR_RELEASE\fP and individual library
locations in \fBBoost_<COMPONENT>_LIBRARY_DEBUG\fP and \fBBoost_<COMPONENT>_LIBRARY_RELEASE\fP\&.
When one changes settings used by previous searches in the same build
tree (excluding environment variables) this module discards previous
search results affected by the changes and searches again.
.SS Imported Targets
.sp
Added in version 3.5.

.sp
This module defines the following \fI\%IMPORTED\fP targets:
.INDENT 0.0
.TP
.B \fBBoost::boost\fP
Target for header\-only dependencies. (Boost include directory).
.TP
.B \fBBoost::headers\fP
Added in version 3.15: Alias for \fBBoost::boost\fP\&.

.TP
.B \fBBoost::<component>\fP
Target for specific component dependency (shared or static library);
\fB<component>\fP name is lower\-case.
.TP
.B \fBBoost::diagnostic_definitions\fP
Interface target to enable diagnostic information about Boost\(aqs automatic
linking during compilation (adds \fB\-DBOOST_LIB_DIAGNOSTIC\fP).
.TP
.B \fBBoost::disable_autolinking\fP
Interface target to disable automatic linking with MSVC
(adds \fB\-DBOOST_ALL_NO_LIB\fP).
.TP
.B \fBBoost::dynamic_linking\fP
Interface target to enable dynamic linking with MSVC
(adds \fB\-DBOOST_ALL_DYN_LINK\fP).
.UNINDENT
.sp
Implicit dependencies such as \fBBoost::filesystem\fP requiring
\fBBoost::system\fP will be automatically detected and satisfied, even
if system is not specified when using \fI\%find_package()\fP and if
\fBBoost::system\fP is not added to \fI\%target_link_libraries()\fP\&.  If using
\fBBoost::thread\fP, then \fBThreads::Threads\fP will also be added automatically.
.sp
It is important to note that the imported targets behave differently
than variables created by this module: multiple calls to
\fI\%find_package(Boost)\fP in the same directory or sub\-directories with
different options (e.g. static or shared) will not override the
values of the targets created by the first call.
.SS Other Variables
.sp
Boost libraries come in many variants encoded in their file name.
Users or projects may tell this module which variant to find by
setting variables:
.INDENT 0.0
.TP
.B \fBBoost_USE_DEBUG_LIBS\fP
Added in version 3.10.

.sp
Set to \fBON\fP or \fBOFF\fP to specify whether to search and use the debug
libraries.  Default is \fBON\fP\&.
.TP
.B \fBBoost_USE_RELEASE_LIBS\fP
Added in version 3.10.

.sp
Set to \fBON\fP or \fBOFF\fP to specify whether to search and use the release
libraries.  Default is \fBON\fP\&.
.TP
.B \fBBoost_USE_MULTITHREADED\fP
Set to OFF to use the non\-multithreaded libraries (\(dqmt\(dq tag). Default is
\fBON\fP\&.
.TP
.B \fBBoost_USE_STATIC_LIBS\fP
Set to ON to force the use of the static libraries.  Default is \fBOFF\fP\&.
.TP
.B \fBBoost_USE_STATIC_RUNTIME\fP
Set to \fBON\fP or \fBOFF\fP to specify whether to use libraries linked
statically to the C++ runtime (\(dqs\(dq tag).  Default is platform dependent.
.TP
.B \fBBoost_USE_DEBUG_RUNTIME\fP
Set to \fBON\fP or \fBOFF\fP to specify whether to use libraries linked to the
MS debug C++ runtime (\(dqg\(dq tag).  Default is \fBON\fP\&.
.TP
.B \fBBoost_USE_DEBUG_PYTHON\fP
Set to \fBON\fP to use libraries compiled with a debug Python build (\(dqy\(dq
tag).  Default is \fBOFF\fP\&.
.TP
.B \fBBoost_USE_STLPORT\fP
Set to \fBON\fP to use libraries compiled with STLPort (\(dqp\(dq tag). Default is
\fBOFF\fP\&.
.TP
.B \fBBoost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\fP
Set to ON to use libraries compiled with STLPort deprecated \(dqnative
iostreams\(dq (\(dqn\(dq tag).  Default is \fBOFF\fP\&.
.TP
.B \fBBoost_COMPILER\fP
Set to the compiler\-specific library suffix (e.g. \fB\-gcc43\fP).  Default is
auto\-computed for the C++ compiler in use.
.sp
Changed in version 3.9: A list may be used if multiple compatible suffixes should be tested for,
in decreasing order of preference.

.TP
.B \fBBoost_LIB_PREFIX\fP
Added in version 3.18.

.sp
Set to the platform\-specific library name prefix (e.g. \fBlib\fP) used by
Boost static libs.  This is needed only on platforms where CMake does not
know the prefix by default.
.TP
.B \fBBoost_ARCHITECTURE\fP
Added in version 3.13.

.sp
Set to the architecture\-specific library suffix (e.g. \fB\-x64\fP).
Default is auto\-computed for the C++ compiler in use.
.TP
.B \fBBoost_THREADAPI\fP
Suffix for \fBthread\fP component library name, such as \fBpthread\fP or
\fBwin32\fP\&.  Names with and without this suffix will both be tried.
.TP
.B \fBBoost_NAMESPACE\fP
Alternate namespace used to build boost with e.g. if set to \fBmyboost\fP,
will search for \fBmyboost_thread\fP instead of \fBboost_thread\fP\&.
.UNINDENT
.sp
Other variables one may set to control this module are:
.INDENT 0.0
.TP
.B \fBBoost_DEBUG\fP
Set to \fBON\fP to enable debug output from \fBFindBoost\fP\&.
Please enable this before filing any bug report.
.TP
.B \fBBoost_REALPATH\fP
Set to \fBON\fP to resolve symlinks for discovered libraries to assist with
packaging.  For example, the \(dqsystem\(dq component library may be resolved to
\fB/usr/lib/libboost_system.so.1.67.0\fP instead of
\fB/usr/lib/libboost_system.so\fP\&.  This does not affect linking and should
not be enabled unless the user needs this information.
.TP
.B \fBBoost_LIBRARY_DIR\fP
Default value for \fBBoost_LIBRARY_DIR_RELEASE\fP and
\fBBoost_LIBRARY_DIR_DEBUG\fP\&.
.TP
.B \fBBoost_NO_WARN_NEW_VERSIONS\fP
Added in version 3.20.

.sp
Set to \fBON\fP to suppress the warning about unknown dependencies for new
Boost versions.
.UNINDENT
.sp
On Visual Studio and Borland compilers Boost headers request automatic
linking to corresponding libraries.  This requires matching libraries
to be linked explicitly or available in the link library search path.
In this case setting \fBBoost_USE_STATIC_LIBS\fP to \fBOFF\fP may not achieve
dynamic linking.  Boost automatic linking typically requests static
libraries with a few exceptions (such as \fBBoost.Python\fP).  Use:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})
.EE
.UNINDENT
.UNINDENT
.sp
to ask Boost to report information about automatic linking requests.
.SS Examples
.sp
Find Boost headers only:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Boost 1.36.0)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  add_executable(foo foo.cc)
endif()
.EE
.UNINDENT
.UNINDENT
.sp
Find Boost libraries and use imported targets:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Boost 1.56 REQUIRED COMPONENTS
             date_time filesystem iostreams)
add_executable(foo foo.cc)
target_link_libraries(foo Boost::date_time Boost::filesystem
                          Boost::iostreams)
.EE
.UNINDENT
.UNINDENT
.sp
Find Boost Python 3.6 libraries and use imported targets:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Boost 1.67 REQUIRED COMPONENTS
             python36 numpy36)
add_executable(foo foo.cc)
target_link_libraries(foo Boost::python36 Boost::numpy36)
.EE
.UNINDENT
.UNINDENT
.sp
Find Boost headers and some \fIstatic\fP (release only) libraries:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(Boost_USE_STATIC_LIBS        ON)  # only find static libs
set(Boost_USE_DEBUG_LIBS        OFF)  # ignore debug libs and
set(Boost_USE_RELEASE_LIBS       ON)  # only find release libs
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
find_package(Boost 1.66.0 COMPONENTS date_time filesystem system ...)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  add_executable(foo foo.cc)
  target_link_libraries(foo ${Boost_LIBRARIES})
endif()
.EE
.UNINDENT
.UNINDENT
.SS Boost CMake
.sp
If Boost was built using the boost\-cmake project or from Boost 1.70.0 on
it provides a package configuration file for use with find_package\(aqs config mode.
This module looks for the package configuration file called
\fBBoostConfig.cmake\fP or \fBboost\-config.cmake\fP and stores the result in
\fBCACHE\fP entry \fBBoost_DIR\fP\&.  If found, the package configuration file is loaded
and this module returns with no further action.  See documentation of
the Boost CMake package configuration for details on what it provides.
.sp
Set \fBBoost_NO_BOOST_CMAKE\fP to \fBON\fP, to disable the search for boost\-cmake.
.SS FindCABLE
.sp
Changed in version 4.1: This module is available only if policy \fI\%CMP0191\fP is not set to \fBNEW\fP\&.

.sp
Finds the CABLE installation and determines its include paths and libraries.
.sp
Package called CABLE (CABLE Automates Bindings for Language Extension) was
initially developed by Kitware to generate bindings to C++ classes for use in
interpreted languages, such as Tcl.  It worked in conjunction with packages like
GCC\-XML.  The CABLE package has since been superseded by the ITK CableSwig
package.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When building wrappers for interpreted languages, these packages are no longer
necessary.  The CastXML package now serves as the recommended tool for this
purpose and can be found directly using the \fI\%find_program()\fP command.
.UNINDENT
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may be set when using this module:
.INDENT 0.0
.TP
.B \fBCABLE\fP
Path to the \fBcable\fP executable.
.TP
.B \fBCABLE_INCLUDE_DIR\fP
Path to the include directory.
.TP
.B \fBCABLE_TCL_LIBRARY\fP
Path to the Tcl wrapper library.
.UNINDENT
.SS Examples
.sp
Finding CABLE to build Tcl wrapper, by linking library and adding the include
directories:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(CABLE)
target_link_libraries(tcl_wrapper_target PRIVATE ${CABLE_TCL_LIBRARY})
target_include_directories(tcl_wrapper_target PRIVATE ${CABLE_INCLUDE_DIR})
.EE
.UNINDENT
.UNINDENT
.SS FindCUDA
.sp
Changed in version 3.27: This module is available only if policy \fI\%CMP0146\fP is not set to \fBNEW\fP\&.
Port projects to CMake\(aqs first\-class \fBCUDA\fP language support.

.sp
Deprecated since version 3.10: Do not use this module in new code.

.sp
It is no longer necessary to use this module or call \fBfind_package(CUDA)\fP
for compiling CUDA code. Instead, list \fBCUDA\fP among the languages named
in the top\-level call to the \fI\%project()\fP command, or call the
\fI\%enable_language()\fP command with \fBCUDA\fP\&.
Then one can add CUDA (\fB\&.cu\fP) sources directly to targets similar to other
languages.
.sp
Added in version 3.17: To find and use the CUDA toolkit libraries manually, use the
\fI\%FindCUDAToolkit\fP module instead.  It works regardless of the
\fBCUDA\fP language being enabled.

.SS Documentation of Deprecated Usage
.sp
Tools for building CUDA C files: libraries and build dependencies.
.sp
This script locates the NVIDIA CUDA C tools.  It should work on Linux,
Windows, and macOS and should be reasonably up to date with CUDA C
releases.
.sp
Added in version 3.19: QNX support.

.sp
This script makes use of the standard \fI\%find_package()\fP arguments of
\fB<VERSION>\fP, \fBREQUIRED\fP and \fBQUIET\fP\&.  \fBCUDA_FOUND\fP will report if an
acceptable version of CUDA was found.
.sp
The script will prompt the user to specify \fBCUDA_TOOLKIT_ROOT_DIR\fP if
the prefix cannot be determined by the location of nvcc in the system
path and \fBREQUIRED\fP is specified to \fI\%find_package()\fP\&.  To use
a different installed version of the toolkit set the environment variable
\fBCUDA_BIN_PATH\fP before running cmake (e.g.
\fBCUDA_BIN_PATH=/usr/local/cuda1.0\fP instead of the default
\fB/usr/local/cuda\fP) or set \fBCUDA_TOOLKIT_ROOT_DIR\fP after configuring.  If
you change the value of \fBCUDA_TOOLKIT_ROOT_DIR\fP, various components that
depend on the path will be relocated.
.sp
It might be necessary to set \fBCUDA_TOOLKIT_ROOT_DIR\fP manually on certain
platforms, or to use a CUDA runtime not installed in the default
location.  In newer versions of the toolkit the CUDA library is
included with the graphics driver \-\- be sure that the driver version
matches what is needed by the CUDA runtime version.
.SS Input Variables
.sp
The following variables affect the behavior of the macros in the
script (in alphabetical order).  Note that any of these flags can be
changed multiple times in the same directory before calling
\fBcuda_add_executable()\fP, \fBcuda_add_library()\fP, \fBcuda_compile()\fP,
\fBcuda_compile_ptx()\fP, \fBcuda_compile_fatbin()\fP, \fBcuda_compile_cubin()\fP
or \fBcuda_wrap_srcs()\fP:
.INDENT 0.0
.TP
.B \fBCUDA_64_BIT_DEVICE_CODE\fP (Default: host bit size)
Set to \fBON\fP to compile for 64 bit device code, OFF for 32 bit device code.
Note that making this different from the host code when generating object
or C files from CUDA code just won\(aqt work, because size_t gets defined by
nvcc in the generated source.  If you compile to PTX and then load the
file yourself, you can mix bit sizes between device and host.
.TP
.B \fBCUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE\fP (Default: \fBON\fP)
Set to \fBON\fP if you want the custom build rule to be attached to the source
file in Visual Studio.  Turn OFF if you add the same cuda file to multiple
targets.
.sp
This allows the user to build the target from the CUDA file; however, bad
things can happen if the CUDA source file is added to multiple targets.
When performing parallel builds it is possible for the custom build
command to be run more than once and in parallel causing cryptic build
errors.  VS runs the rules for every source file in the target, and a
source can have only one rule no matter how many projects it is added to.
When the rule is run from multiple targets race conditions can occur on
the generated file.  Eventually everything will get built, but if the user
is unaware of this behavior, there may be confusion.  It would be nice if
this script could detect the reuse of source files across multiple targets
and turn the option off for the user, but no good solution could be found.
.TP
.B \fBCUDA_BUILD_CUBIN\fP (Default: \fBOFF\fP)
Set to \fBON\fP to enable and extra compilation pass with the \fB\-cubin\fP option in
Device mode. The output is parsed and register, shared memory usage is
printed during build.
.TP
.B \fBCUDA_BUILD_EMULATION\fP (Default: \fBOFF\fP for device mode)
Set to \fBON\fP for Emulation mode. \fB\-D_DEVICEEMU\fP is defined for CUDA C files
when \fBCUDA_BUILD_EMULATION\fP is \fBTRUE\fP\&.
.TP
.B \fBCUDA_LINK_LIBRARIES_KEYWORD\fP (Default: \fB\(dq\(dq\fP)
Added in version 3.9.

.sp
The \fB<PRIVATE|PUBLIC|INTERFACE>\fP keyword to use for internal
\fI\%target_link_libraries()\fP calls. The default is to use no keyword which
uses the old \(dqplain\(dq form of \fI\%target_link_libraries()\fP\&. Note that is matters
because whatever is used inside the \fBFindCUDA\fP module must also be used
outside \- the two forms of \fI\%target_link_libraries()\fP cannot be mixed.
.TP
.B \fBCUDA_GENERATED_OUTPUT_DIR\fP (Default: \fI\%CMAKE_CURRENT_BINARY_DIR\fP)
Set to the path you wish to have the generated files placed.  If it is
blank output files will be placed in \fI\%CMAKE_CURRENT_BINARY_DIR\fP\&.
Intermediate files will always be placed in
\fBCMAKE_CURRENT_BINARY_DIR/CMakeFiles\fP\&.
.TP
.B \fBCUDA_HOST_COMPILATION_CPP\fP (Default: \fBON\fP)
Set to \fBOFF\fP for C compilation of host code.
.TP
.B \fBCUDA_HOST_COMPILER\fP (Default: \fBCMAKE_C_COMPILER\fP)
Set the host compiler to be used by nvcc.  Ignored if \fB\-ccbin\fP or
\fB\-\-compiler\-bindir\fP is already present in the \fBCUDA_NVCC_FLAGS\fP or
\fBCUDA_NVCC_FLAGS_<CONFIG>\fP variables.  For Visual Studio targets,
the host compiler is constructed with one or more visual studio macros
such as \fB$(VCInstallDir)\fP, that expands out to the path when
the command is run from within VS.
.sp
Added in version 3.13: If the \fI\%CUDAHOSTCXX\fP environment variable is set it will
be used as the default.

.TP
.B \fBCUDA_NVCC_FLAGS\fP, \fBCUDA_NVCC_FLAGS_<CONFIG>\fP
Additional NVCC command line arguments.  NOTE: multiple arguments must be
semi\-colon delimited (e.g. \fB\-\-compiler\-options;\-Wall\fP)
.sp
Added in version 3.6: Contents of these variables may use
\fI\%generator expressions\fP\&.

.TP
.B \fBCUDA_PROPAGATE_HOST_FLAGS\fP (Default: \fBON\fP)
Set to \fBON\fP to propagate \fI\%CMAKE_{C,CXX}_FLAGS\fP and their configuration
dependent counterparts (e.g. \fBCMAKE_C_FLAGS_DEBUG\fP) automatically to the
host compiler through nvcc\(aqs \fB\-Xcompiler\fP flag.  This helps make the
generated host code match the rest of the system better.  Sometimes
certain flags give nvcc problems, and this will help you turn the flag
propagation off.  This does not affect the flags supplied directly to nvcc
via \fBCUDA_NVCC_FLAGS\fP or through the \fBOPTION\fP flags specified through
\fBcuda_add_library()\fP, \fBcuda_add_executable()\fP, or \fBcuda_wrap_srcs()\fP\&.  Flags used for
shared library compilation are not affected by this flag.
.TP
.B \fBCUDA_SEPARABLE_COMPILATION\fP (Default: \fBOFF\fP)
If set this will enable separable compilation for all CUDA runtime object
files.  If used outside of \fBcuda_add_executable()\fP and \fBcuda_add_library()\fP
(e.g. calling \fBcuda_wrap_srcs()\fP directly),
\fBcuda_compute_separable_compilation_object_file_name()\fP and
\fBcuda_link_separable_compilation_objects()\fP should be called.
.TP
.B \fBCUDA_SOURCE_PROPERTY_FORMAT\fP
Added in version 3.3.

.sp
If this source file property is set, it can override the format specified
to \fBcuda_wrap_srcs()\fP (\fBOBJ\fP, \fBPTX\fP, \fBCUBIN\fP, or \fBFATBIN\fP).  If an input source file
is not a \fB\&.cu\fP file, setting this file will cause it to be treated as a \fB\&.cu\fP
file. See documentation for set_source_files_properties on how to set
this property.
.TP
.B \fBCUDA_USE_STATIC_CUDA_RUNTIME\fP (Default: \fBON\fP)
Added in version 3.3.

.sp
When enabled the static version of the CUDA runtime library will be used
in \fBCUDA_LIBRARIES\fP\&.  If the version of CUDA configured doesn\(aqt support
this option, then it will be silently disabled.
.TP
.B \fBCUDA_VERBOSE_BUILD\fP (Default: \fBOFF\fP)
Set to \fBON\fP to see all the commands used when building the CUDA file.  When
using a Makefile generator the value defaults to \fBVERBOSE\fP (run
\fBmake VERBOSE=1\fP to see output), although setting \fBCUDA_VERBOSE_BUILD\fP to \fBON\fP will
always print the output.
.UNINDENT
.SS Commands
.sp
The script creates the following functions and macros (in alphabetical order):
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_add_cufft_to_target(<cuda_target>)
.EE
.UNINDENT
.UNINDENT
.sp
Adds the cufft library to the target (can be any target).  Handles whether
you are in emulation mode or not.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_add_cublas_to_target(<cuda_target>)
.EE
.UNINDENT
.UNINDENT
.sp
Adds the cublas library to the target (can be any target).  Handles
whether you are in emulation mode or not.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_add_executable(<cuda_target> <file>...
                    [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
Creates an executable \fB<cuda_target>\fP which is made up of the files
specified.  All of the non CUDA C files are compiled using the standard
build rules specified by CMake and the CUDA files are compiled to object
files using nvcc and the host compiler.  In addition \fBCUDA_INCLUDE_DIRS\fP is
added automatically to \fI\%include_directories()\fP\&.  Some standard CMake target
calls can be used on the target after calling this macro
(e.g. \fI\%set_target_properties()\fP and \fI\%target_link_libraries()\fP), but setting
properties that adjust compilation flags will not affect code compiled by
nvcc.  Such flags should be modified before calling \fBcuda_add_executable()\fP,
\fBcuda_add_library()\fP or \fBcuda_wrap_srcs()\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_add_library(<cuda_target> <file>...
                 [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
Same as \fBcuda_add_executable()\fP except that a library is created.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_build_clean_target()
.EE
.UNINDENT
.UNINDENT
.sp
Creates a convenience target that deletes all the dependency files
generated.  You should make clean after running this target to ensure the
dependency files get regenerated.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_compile(<generated_files> <file>... [STATIC | SHARED | MODULE]
             [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
Returns a list of generated files from the input source files to be used
with \fI\%add_library()\fP or \fI\%add_executable()\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_compile_ptx(<generated_files> <file>... [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
Returns a list of \fBPTX\fP files generated from the input source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_compile_fatbin(<generated_files> <file>... [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.

.sp
Returns a list of \fBFATBIN\fP files generated from the input source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_compile_cubin(<generated_files> <file>... [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
Added in version 3.1.

.sp
Returns a list of \fBCUBIN\fP files generated from the input source files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_compute_separable_compilation_object_file_name(<output_file_var>
                                                    <cuda_target>
                                                    <object_files>)
.EE
.UNINDENT
.UNINDENT
.sp
Compute the name of the intermediate link file used for separable
compilation.  This file name is typically passed into
\fBCUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\fP\&.  output_file_var is produced
based on cuda_target the list of objects files that need separable
compilation as specified by \fB<object_files>\fP\&.  If the \fB<object_files>\fP list is
empty, then \fB<output_file_var>\fP will be empty.  This function is called
automatically for \fBcuda_add_library()\fP and \fBcuda_add_executable()\fP\&.  Note that
this is a function and not a macro.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_include_directories(path0 path1 ...)
.EE
.UNINDENT
.UNINDENT
.sp
Sets the directories that should be passed to nvcc
(e.g. \fBnvcc \-Ipath0 \-Ipath1 ...\fP). These paths usually contain other \fB\&.cu\fP
files.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_link_separable_compilation_objects(<output_file_var> <cuda_target>
                                        <nvcc_flags> <object_files>)
.EE
.UNINDENT
.UNINDENT
.sp
Generates the link object required by separable compilation from the given
object files.  This is called automatically for \fBcuda_add_executable()\fP and
\fBcuda_add_library()\fP, but can be called manually when using \fBcuda_wrap_srcs()\fP
directly.  When called from \fBcuda_add_library()\fP or \fBcuda_add_executable()\fP the
\fB<nvcc_flags>\fP passed in are the same as the flags passed in via the \fBOPTIONS\fP
argument.  The only nvcc flag added automatically is the bitness flag as
specified by \fBCUDA_64_BIT_DEVICE_CODE\fP\&.  Note that this is a function
instead of a macro.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_select_nvcc_arch_flags(<out_variable> [<target_CUDA_architecture> ...])
.EE
.UNINDENT
.UNINDENT
.sp
Selects GPU arch flags for nvcc based on \fBtarget_CUDA_architecture\fP\&.
.sp
Values for \fBtarget_CUDA_architecture\fP:
.INDENT 0.0
.IP \(bu 2
\fBAuto\fP: detects local machine GPU compute arch at runtime.
.IP \(bu 2
\fBCommon\fP and \fBAll\fP: cover common and entire subsets of architectures.
.IP \(bu 2
\fB<name>\fP: one of \fBFermi\fP, \fBKepler\fP, \fBMaxwell\fP, \fBKepler+Tegra\fP, \fBKepler+Tesla\fP, \fBMaxwell+Tegra\fP, \fBPascal\fP\&.
.IP \(bu 2
\fB<ver>\fP, \fB<ver>(<ver>)\fP, \fB<ver>+PTX\fP, where \fB<ver>\fP is one of
\fB2.0\fP, \fB2.1\fP, \fB3.0\fP, \fB3.2\fP, \fB3.5\fP, \fB3.7\fP, \fB5.0\fP, \fB5.2\fP, \fB5.3\fP, \fB6.0\fP, \fB6.2\fP\&.
.UNINDENT
.sp
Returns list of flags to be added to \fBCUDA_NVCC_FLAGS\fP in \fB<out_variable>\fP\&.
Additionally, sets \fB<out_variable>_readable\fP to the resulting numeric list.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_select_nvcc_arch_flags(ARCH_FLAGS \(dq3.0\(dq \(dq3.5+PTX\(dq \(dq5.2(5.0)\(dq \(dqMaxwell\(dq)
list(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})
.EE
.UNINDENT
.UNINDENT
.sp
More info on CUDA architectures: \X'tty: link https://en.wikipedia.org/wiki/CUDA'\fI\%https://en.wikipedia.org/wiki/CUDA\fP\X'tty: link'\&.
Note that this is a function instead of a macro.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_wrap_srcs(<cuda_target> <format> <generated_files> <file>...
               [STATIC | SHARED | MODULE] [OPTIONS ...])
.EE
.UNINDENT
.UNINDENT
.sp
This is where all the magic happens.  \fBcuda_add_executable()\fP,
\fBcuda_add_library()\fP, \fBcuda_compile()\fP, and \fBcuda_compile_ptx()\fP all call this
function under the hood.
.sp
Given the list of files \fB<file>...\fP this macro generates
custom commands that generate either PTX or linkable objects (use \fBPTX\fP or
\fBOBJ\fP for the \fB<format>\fP argument to switch).  Files that don\(aqt end with \fB\&.cu\fP
or have the \fBHEADER_FILE_ONLY\fP property are ignored.
.sp
The arguments passed in after \fBOPTIONS\fP are extra command line options to
give to nvcc.  You can also specify per configuration options by
specifying the name of the configuration followed by the options.  General
options must precede configuration specific options.  Not all
configurations need to be specified, only the ones provided will be used.
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
cuda_add_executable(...
  OPTIONS \-DFLAG=2 \(dq\-DFLAG_OTHER=space in flag\(dq
  DEBUG \-g
  RELEASE \-\-use_fast_math
  RELWITHDEBINFO \-\-use_fast_math;\-g
  MINSIZEREL \-\-use_fast_math)
.EE
.UNINDENT
.UNINDENT
.sp
For certain configurations (namely VS generating object files with
\fBCUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE\fP set to \fBON\fP), no generated file will
be produced for the given cuda file.  This is because when you add the
cuda file to Visual Studio it knows that this file produces an object file
and will link in the resulting object file automatically.
.sp
This script will also generate a separate cmake script that is used at
build time to invoke nvcc.  This is for several reasons:
.INDENT 0.0
.IP \(bu 2
nvcc can return negative numbers as return values which confuses
Visual Studio into thinking that the command succeeded.  The script now
checks the error codes and produces errors when there was a problem.
.IP \(bu 2
nvcc has been known to not delete incomplete results when it
encounters problems.  This confuses build systems into thinking the
target was generated when in fact an unusable file exists.  The script
now deletes the output files if there was an error.
.IP \(bu 2
By putting all the options that affect the build into a file and then
make the build rule dependent on the file, the output files will be
regenerated when the options change.
.UNINDENT
.sp
This script also looks at optional arguments \fBSTATIC\fP, \fBSHARED\fP, or \fBMODULE\fP to
determine when to target the object compilation for a shared library.
\fI\%BUILD_SHARED_LIBS\fP is ignored in \fBcuda_wrap_srcs()\fP, but it is respected in
\fBcuda_add_library()\fP\&.  On some systems special flags are added for building
objects intended for shared libraries.  A preprocessor macro,
\fB<target_name>_EXPORTS\fP is defined when a shared library compilation is
detected.
.sp
Flags passed into add_definitions with \fB\-D\fP or \fB/D\fP are passed along to nvcc.
.SS Result Variables
.sp
The script defines the following variables:
.INDENT 0.0
.TP
.B \fBCUDA_VERSION_MAJOR\fP
The major version of cuda as reported by nvcc.
.TP
.B \fBCUDA_VERSION_MINOR\fP
The minor version.
.TP
.B \fBCUDA_VERSION\fP, \fBCUDA_VERSION_STRING\fP
Full version in the \fBX.Y\fP format.
.TP
.B \fBCUDA_HAS_FP16\fP
Added in version 3.6: Whether a short float (\fBfloat16\fP, \fBfp16\fP) is supported.

.TP
.B \fBCUDA_TOOLKIT_ROOT_DIR\fP
Path to the CUDA Toolkit (defined if not set).
.TP
.B \fBCUDA_SDK_ROOT_DIR\fP
Path to the CUDA SDK.  Use this to find files in the SDK.  This script will
not directly support finding specific libraries or headers, as that isn\(aqt
supported by NVIDIA.  If you want to change libraries when the path changes
see the \fBFindCUDA.cmake\fP script for an example of how to clear these
variables.  There are also examples of how to use the \fBCUDA_SDK_ROOT_DIR\fP
to locate headers or libraries, if you so choose (at your own risk).
.TP
.B \fBCUDA_INCLUDE_DIRS\fP
Include directory for cuda headers.  Added automatically
for \fBcuda_add_executable()\fP and \fBcuda_add_library()\fP\&.
.TP
.B \fBCUDA_LIBRARIES\fP
Cuda RT library.
.TP
.B \fBCUDA_CUFFT_LIBRARIES\fP
Device or emulation library for the Cuda FFT implementation (alternative to
\fBcuda_add_cufft_to_target()\fP macro)
.TP
.B \fBCUDA_CUBLAS_LIBRARIES\fP
Device or emulation library for the Cuda BLAS implementation (alternative to
\fBcuda_add_cublas_to_target()\fP macro).
.TP
.B \fBCUDA_cudart_static_LIBRARY\fP
Statically linkable cuda runtime library.
Only available for CUDA version 5.5+.
.TP
.B \fBCUDA_cudadevrt_LIBRARY\fP
Added in version 3.7: Device runtime library.  Required for separable compilation.

.TP
.B \fBCUDA_cupti_LIBRARY\fP
CUDA Profiling Tools Interface library.
Only available for CUDA version 4.0+.
.TP
.B \fBCUDA_curand_LIBRARY\fP
CUDA Random Number Generation library.
Only available for CUDA version 3.2+.
.TP
.B \fBCUDA_cusolver_LIBRARY\fP
Added in version 3.2: CUDA Direct Solver library.
Only available for CUDA version 7.0+.

.TP
.B \fBCUDA_cusparse_LIBRARY\fP
CUDA Sparse Matrix library.
Only available for CUDA version 3.2+.
.TP
.B \fBCUDA_npp_LIBRARY\fP
NVIDIA Performance Primitives lib.
Only available for CUDA version 4.0+.
.TP
.B \fBCUDA_nppc_LIBRARY\fP
NVIDIA Performance Primitives lib (core).
Only available for CUDA version 5.5+.
.TP
.B \fBCUDA_nppi_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 5.5 \- 8.0.
.TP
.B \fBCUDA_nppial_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppicc_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppicom_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0 \- 10.2.
Replaced by nvjpeg.
.TP
.B \fBCUDA_nppidei_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppif_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppig_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppim_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppist_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppisu_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_nppitc_LIBRARY\fP
NVIDIA Performance Primitives lib (image processing).
Only available for CUDA version 9.0.
.TP
.B \fBCUDA_npps_LIBRARY\fP
NVIDIA Performance Primitives lib (signal processing).
Only available for CUDA version 5.5+.
.TP
.B \fBCUDA_nvcuvenc_LIBRARY\fP
CUDA Video Encoder library.
Only available for CUDA version 3.2+.
Windows only.
.TP
.B \fBCUDA_nvcuvid_LIBRARY\fP
CUDA Video Decoder library.
Only available for CUDA version 3.2+.
Windows only.
.TP
.B \fBCUDA_nvToolsExt_LIBRARY\fP
Added in version 3.16: NVIDA CUDA Tools Extension library.
Available for CUDA version 5+.

.TP
.B \fBCUDA_OpenCL_LIBRARY\fP
Added in version 3.16: NVIDA CUDA OpenCL library.
Available for CUDA version 5+.

.UNINDENT
.SS FindDart
.sp
Deprecated since version 3.27: This module is available only if policy \fI\%CMP0145\fP is not set to \fBNEW\fP\&.

.sp
Find DART
.sp
This module looks for the dart testing software and sets DART_ROOT to
point to where it found it.
.SS FindGCCXML
.sp
Changed in version 4.1: This module is available only if policy \fI\%CMP0188\fP is not set to \fBNEW\fP\&.
Port projects to search for CastXML by calling \fBfind_program\fP directly.

.sp
Find the GCC\-XML front\-end executable.
.sp
This module will define the following variables:
.INDENT 0.0
.TP
.B \fBGCCXML\fP
The GCC\-XML front\-end executable.
.UNINDENT
.SS FindGDAL
.sp
Find Geospatial Data Abstraction Library (GDAL).
.sp
Deprecated since version 4.0: GDAL 3.5 and above provide a \fBGDALConfig.cmake\fP package configuration file.
Call \fBfind_package(GDAL CONFIG)\fP to find it directly and avoid using this
find module.  For further details, see \X'tty: link https://gdal.org/en/latest/development/cmake.html'\fI\%GDAL\(aqs documentation on CMake
integration\fP\X'tty: link'\&.

.SS Imported Targets
.sp
Added in version 3.14.

.sp
This module defines \fI\%IMPORTED\fP target \fBGDAL::GDAL\fP
if GDAL has been found.
.SS Result Variables
.sp
This module will set the following variables in your project:
.INDENT 0.0
.TP
.B \fBGDAL_FOUND\fP
True if GDAL is found.
.TP
.B \fBGDAL_INCLUDE_DIRS\fP
Include directories for GDAL headers.
.TP
.B \fBGDAL_LIBRARIES\fP
Libraries to link to GDAL.
.TP
.B \fBGDAL_VERSION\fP
Added in version 3.14: The version of GDAL found.

.UNINDENT
.SS Cache variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBGDAL_LIBRARY\fP
The libgdal library file.
.TP
.B \fBGDAL_INCLUDE_DIR\fP
The directory containing \fBgdal.h\fP\&.
.UNINDENT
.SS Hints
.sp
Set \fBGDAL_DIR\fP or \fBGDAL_ROOT\fP in the environment to specify the
GDAL installation prefix.
.sp
The following variables may be set to modify the search strategy:
.INDENT 0.0
.TP
.B \fBFindGDAL_SKIP_GDAL_CONFIG\fP
If set, \fBgdal\-config\fP will not be used. This can be useful if there are
GDAL libraries built with autotools (which provide the tool) and CMake (which
do not) in the same environment.
.TP
.B \fBGDAL_ADDITIONAL_LIBRARY_VERSIONS\fP
Extra versions of library names to search for.
.UNINDENT
.SS FindITK
.sp
This module no longer exists.
.sp
This module existed in versions of CMake prior to 3.1, but became
only a thin wrapper around \fBfind_package(ITK NO_MODULE)\fP to
provide compatibility for projects using long\-outdated conventions.
Now \fBfind_package(ITK)\fP will search for \fBITKConfig.cmake\fP
directly.
.SS FindPythonInterp
.sp
Changed in version 3.27: This module is available only if policy \fI\%CMP0148\fP is not set to \fBNEW\fP\&.

.sp
Deprecated since version 3.12: Use \fI\%FindPython3\fP, \fI\%FindPython2\fP, or \fI\%FindPython\fP
instead.

.sp
This module finds the Python interpreter and determines the location of its
executable.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When using both this and the \fI\%FindPythonLibs\fP module, call
\fBfind_package(PythonInterp)\fP before \fBfind_package(PythonLibs)\fP\&.  This
ensures that the detected interpreter version is used to guide the selection
of compatible libraries, resulting in a consistent \fBPYTHON_LIBRARIES\fP value.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
A call to \fBfind_package(PythonInterp ${V})\fP for Python version \fBV\fP may
find a \fBpython\fP executable with no version suffix.  In this case no attempt
is made to avoid Python executables from other versions.  Use
\fI\%FindPython3\fP, \fI\%FindPython2\fP, or \fI\%FindPython\fP instead.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBPythonInterp_FOUND\fP
Boolean indicating whether the (requested version of) Python executable is
found.  For backward compatibility, the \fBPYTHONINTERP_FOUND\fP variable is
also set to the same value.
.TP
.B \fBPYTHON_VERSION_STRING\fP
Python version found (e.g., \fB2.5.2\fP).
.TP
.B \fBPYTHON_VERSION_MAJOR\fP
Python major version found (e.g., \fB2\fP).
.TP
.B \fBPYTHON_VERSION_MINOR\fP
Python minor version found (e.g., \fB5\fP).
.TP
.B \fBPYTHON_VERSION_PATCH\fP
Python patch version found (e.g., \fB2\fP).
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set:
.INDENT 0.0
.TP
.B \fBPYTHON_EXECUTABLE\fP
The path to the Python interpreter.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling
\fBfind_package(PythonInterp)\fP:
.INDENT 0.0
.TP
.B \fBPython_ADDITIONAL_VERSIONS\fP
This variable can be used to specify a list of version numbers that should be
taken into account when searching for Python.
.UNINDENT
.SS Examples
.sp
Finding the Python interpreter in earlier versions of CMake:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PythonInterp)
execute_process(COMMAND ${PYTHON_EXECUTABLE} \-\-help)
.EE
.UNINDENT
.UNINDENT
.sp
Starting with CMake 3.12, the Python interpreter can be found using the
\fI\%FindPython\fP module.  The equivalent example using the modern approach
is:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Python)
execute_process(COMMAND ${Python_EXECUTABLE} \-\-help)
.EE
.UNINDENT
.UNINDENT
.SS FindPythonLibs
.sp
Changed in version 3.27: This module is available only if policy \fI\%CMP0148\fP is not set to \fBNEW\fP\&.

.sp
Deprecated since version 3.12: Use \fI\%FindPython3\fP, \fI\%FindPython2\fP, or \fI\%FindPython\fP
instead.

.sp
This module finds the Python installation and determines the location of its
include directories and libraries, as well as the name of the Python library to
link against.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When using both this and the \fI\%FindPythonInterp\fP module, call
\fBfind_package(PythonInterp)\fP before \fBfind_package(PythonLibs)\fP\&.  This
ensures that the detected interpreter version is used to guide the selection
of compatible libraries, resulting in a consistent \fBPYTHON_LIBRARIES\fP value.
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBPythonLibs_FOUND\fP
Boolean indicating whether the (requested version of) Python libraries have
been found.  For backward compatibility, the \fBPYTHONLIBS_FOUND\fP variable is
also set to the same value.
.TP
.B \fBPYTHONLIBS_VERSION_STRING\fP
The version of the Python libraries found.
.TP
.B \fBPYTHON_LIBRARIES\fP
Libraries needed to link against to use Python.
.TP
.B \fBPYTHON_INCLUDE_DIRS\fP
Include directories needed to use Python.
.UNINDENT
.SS Cache Variables
.sp
The following cache variables may also be set to specify the Python installation
to use:
.INDENT 0.0
.TP
.B \fBPYTHON_LIBRARY\fP
The path to the Python library.
.TP
.B \fBPYTHON_INCLUDE_DIR\fP
The directory containing the \fBPython.h\fP header file.
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling
\fBfind_package(PythonLibs)\fP:
.INDENT 0.0
.TP
.B \fBPython_ADDITIONAL_VERSIONS\fP
This variable can be used to specify a list of version numbers that should be
taken into account when searching for Python.
.UNINDENT
.SS Deprecated Variables
.sp
These variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBPYTHON_DEBUG_LIBRARIES\fP
Deprecated since version 2.8.8: Use \fBPYTHON_LIBRARIES\fP instead.

.sp
Result variable that holds the path to the debug library.
.TP
.B \fBPYTHON_INCLUDE_PATH\fP
Deprecated since version 2.8.0: Use \fBPYTHON_INCLUDE_DIR\fP or \fBPYTHON_INCLUDE_DIRS\fP instead.

.sp
Result variable that holds the path to the directory containing the
\fBPython.h\fP header file.
.UNINDENT
.SS Examples
.sp
In earlier versions of CMake, Python libraries were found and used in a project
like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(PythonLibs)
target_link_libraries(app PRIVATE ${PYTHON_LIBRARIES})
target_include_directories(app PRIVATE ${PYTHON_INCLUDE_DIRS})
.EE
.UNINDENT
.UNINDENT
.sp
Starting with CMake 3.12, Python libraries can be found using the
\fI\%FindPython\fP module.  The equivalent example using the modern approach
with an imported target is:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Python COMPONENTS Development)
target_link_libraries(app PRIVATE Python::Python)
.EE
.UNINDENT
.UNINDENT
.SS FindQt
.sp
Deprecated since version 3.14: This module is available only if policy \fI\%CMP0084\fP is not set to
\fBNEW\fP\&.  It supports only Qt3 and Qt4.  For Qt5 or later versions see
\fI\%cmake\-qt(7)\fP\&.

.sp
This module finds an installed version of Qt3 or Qt4.  Qt is a cross\-platform
application development framework for creating graphical user interfaces and
applications.
.sp
Use this module only if the project can work with both Qt3 and Qt4
versions.  If a specific version is required, use \fI\%FindQt4\fP or
\fI\%FindQt3\fP module directly.
.sp
Behavior:
.INDENT 0.0
.IP \(bu 2
If multiple Qt versions are found, the user must set the preferred major
Qt version with the \fBDESIRED_QT_VERSION\fP variable.
.IP \(bu 2
If only one Qt version is found, then the \fBDESIRED_QT_VERSION\fP is set
automatically.
.IP \(bu 2
Once the \fBDESIRED_QT_VERSION\fP variable is set, the corresponding
\fI\%FindQt3\fP or \fI\%FindQt4\fP module is included.
.UNINDENT
.SS Result Variables
.sp
This module sets the following variables:
.INDENT 0.0
.TP
.B \fBQT4_INSTALLED\fP
\fBTRUE\fP if Qt4 is found.
.TP
.B \fBQT3_INSTALLED\fP
\fBTRUE\fP if Qt3 is found.
.UNINDENT
.SS Hints
.INDENT 0.0
.TP
.B \fBQT_REQUIRED\fP
If this variable is set to \fBTRUE\fP before calling \fBfind_package(Qt)\fP,
CMake will raise an error if neither Qt3 nor Qt4 is found.
.TP
.B \fBDESIRED_QT_VERSION\fP
Specifies the Qt major version to use.  Can be either \fB3\fP, \fB4\fP, or empty,
to search for version automatically.
.UNINDENT
.SS Examples
.sp
Finding Qt3 or Qt4 version:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(Qt)
.EE
.UNINDENT
.UNINDENT
.SS FindUnixCommands
.sp
Deprecated since version 3.26: Use \fI\%${CMAKE_COMMAND} \-E\fP subcommands instead.

.sp
Find Unix commands, including the ones from Cygwin
.sp
This module looks for the Unix commands \fBbash\fP, \fBcp\fP, \fBgzip\fP,
\fBmv\fP, \fBrm\fP, and \fBtar\fP and stores the result in the variables
\fBBASH\fP, \fBCP\fP, \fBGZIP\fP, \fBMV\fP, \fBRM\fP, and \fBTAR\fP\&.
.SS FindVTK
.sp
This module no longer exists.
.sp
This module existed in versions of CMake prior to 3.1, but became
only a thin wrapper around \fBfind_package(VTK NO_MODULE)\fP to
provide compatibility for projects using long\-outdated conventions.
Now \fBfind_package(VTK)\fP will search for \fBVTKConfig.cmake\fP
directly.
.SS FindwxWindows
.sp
Deprecated since version 3.0: Replaced by \fI\%FindwxWidgets\fP\&.

.sp
Finds the wxWidgets (formerly known as wxWindows) installation and determines
the locations of its include directories and libraries, as well as the name of
the library.
.sp
wxWidgets 2.6.x is supported for monolithic builds, such as those compiled in
the \fBwx/build/msw\fP directory using:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
nmake \-f makefile.vc BUILD=debug SHARED=0 USE_OPENGL=1 MONOLITHIC=1
.EE
.UNINDENT
.UNINDENT
.SS Result Variables
.sp
This module defines the following variables:
.INDENT 0.0
.TP
.B \fBWXWINDOWS_FOUND\fP
Boolean indicating whether the wxWidgets is found.
.TP
.B \fBWXWINDOWS_LIBRARIES\fP
Libraries needed to link against to use wxWidgets.  This includes paths to
the wxWidgets libraries and any additional linker flags, typically derived
from the output of \fBwx\-config \-\-libs\fP on Unix/Linux systems.
.TP
.B \fBCMAKE_WXWINDOWS_CXX_FLAGS\fP
Compiler options needed to use wxWidgets (if any).  On Linux, this corresponds
to the output of \fBwx\-config \-\-cxxflags\fP\&.
.TP
.B \fBWXWINDOWS_INCLUDE_DIR\fP
The directory containing the \fBwx/wx.h\fP and \fBwx/setup.h\fP header files.
.TP
.B \fBWXWINDOWS_LINK_DIRECTORIES\fP
Link directories, useful for setting \fBrpath\fP on Unix\-like platforms.
.TP
.B \fBWXWINDOWS_DEFINITIONS\fP
Extra compile definitions needed to use wxWidgets (if any).
.UNINDENT
.SS Hints
.sp
This module accepts the following variables before calling the
\fBfind_package(wxWindows)\fP:
.INDENT 0.0
.TP
.B \fBWXWINDOWS_USE_GL\fP
Set this variable to boolean true to require OpenGL support.
.TP
.B \fBHAVE_ISYSTEM\fP
Set this variable to boolean true to replace \fB\-I\fP compiler options with
\fB\-isystem\fP when the C++ compiler is GNU (\fBg++\fP).
.UNINDENT
.SS Deprecated Variables
.sp
These variables are provided for backward compatibility:
.INDENT 0.0
.TP
.B \fBCMAKE_WX_CAN_COMPILE\fP
Deprecated since version 1.8: Replaced by the \fBWXWINDOWS_FOUND\fP variable with the same value.

.TP
.B \fBWXWINDOWS_LIBRARY\fP
Deprecated since version 1.8: Replaced by the \fBWXWINDOWS_LIBRARIES\fP variable with the same value.

.TP
.B \fBCMAKE_WX_CXX_FLAGS\fP
Deprecated since version 1.8: Replaced by the \fBCMAKE_WXWINDOWS_CXX_FLAGS\fP variable with the same value.

.TP
.B \fBWXWINDOWS_INCLUDE_PATH\fP
Deprecated since version 1.8: Replaced by the \fBWXWINDOWS_INCLUDE_DIR\fP variable with the same value.

.UNINDENT
.SS Examples
.SS Example: Finding wxWidgets in earlier CMake versions
.sp
In earlier versions of CMake, wxWidgets (wxWindows) could be found using:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(wxWindows)
.EE
.UNINDENT
.UNINDENT
.sp
To request OpenGL support, the \fBWXWINDOWS_USE_GL\fP variable could be set before
calling \fBfind_package()\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
set(WXWINDOWS_USE_GL ON)
find_package(wxWindows)
.EE
.UNINDENT
.UNINDENT
.sp
Using wxWidgets (wxWindows) in CMake was commonly done by including the
\fI\%Use_wxWindows\fP module, which would find wxWidgets and set the
appropriate libraries, include directories, and compiler flags:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
include(Use_wxWindows)
.EE
.UNINDENT
.UNINDENT
.SS Example: Finding wxWidgets as of CMake 3.0
.sp
Starting with CMake 3.0, wxWidgets can be found using the
\fI\%FindwxWidgets\fP module:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
find_package(wxWidgets)
.EE
.UNINDENT
.UNINDENT
.SS Legacy CPack Modules
.sp
These modules used to be mistakenly exposed to the user, and have been moved
out of user visibility. They are for CPack internal use, and should never be
used directly.
.SS CPackArchive
.sp
Added in version 3.9.

.sp
The documentation for the CPack Archive generator has moved here: \fI\%CPack Archive Generator\fP
.SS CPackBundle
.sp
The documentation for the CPack Bundle generator has moved here: \fI\%CPack Bundle Generator\fP
.SS CPackCygwin
.sp
The documentation for the CPack Cygwin generator has moved here: \fI\%CPack Cygwin Generator\fP
.SS CPackDeb
.sp
The documentation for the CPack DEB generator has moved here: \fI\%CPack DEB Generator\fP
.SS CPackDMG
.sp
The documentation for the CPack DragNDrop generator has moved here: \fI\%CPack DragNDrop Generator\fP
.SS CPackFreeBSD
.sp
Added in version 3.10.

.sp
The documentation for the CPack FreeBSD generator has moved here: \fI\%CPack FreeBSD Generator\fP
.SS CPackNSIS
.sp
The documentation for the CPack NSIS generator has moved here: \fI\%CPack NSIS Generator\fP
.SS CPackNuGet
.sp
Added in version 3.12.

.sp
The documentation for the CPack NuGet generator has moved here: \fI\%CPack NuGet Generator\fP
.SS CPackProductBuild
.sp
Added in version 3.7.

.sp
The documentation for the CPack productbuild generator has moved here: \fI\%CPack productbuild Generator\fP
.SS CPackRPM
.sp
The documentation for the CPack RPM generator has moved here: \fI\%CPack RPM Generator\fP
.SS CPackWIX
.sp
The documentation for the CPack WIX generator has moved here:
\fI\%CPack WIX Generator\fP
.SH COPYRIGHT
2000-2025 Kitware, Inc. and Contributors
.\" Generated by docutils manpage writer.
.
