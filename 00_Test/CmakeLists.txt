cmake_minimum_required(VERSION 3.20)
project(stm32_cpp_baremetal LANGUAGES C CXX)

#Set the MCU and toolchain
set(MCU "cortex-m4")
set(CPU_FLAGS "-mcpu=${MCU} -mthumb -O2 -ffunction-sections -fdata-sections")
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#Set toolchain prefix if needed
set(CMAKE_C_COMPILER "C:/ST/GCC/bin/arm-none-eabi-gcc.exe")
set(CMAKE_CXX_COMPILER "C:/ST/GCC/bin/arm-none-eabi-g++.exe")
set(CMAKE_OBJCOPY "C:/ST/GCC/bin/arm-none-eabi-objcopy.exe")

#Include directories
include_directories(include)

#Source files
set(SOURCES
    src/main.cpp 
    src/system_stm32g4xx.c
    src/crt_stubs.c
    src/startup_stm32g431xx.s 
)

enable_language(ASM)

#Add executables
add_executable(firmware.elf ${SOURCES})

#Linker script
target_link_options(firmware.elf PRIVATE
    -T${CMAKE_SOURCE_DIR}/linker/stm32f407xx.ld
    -Wl,-Map=firmware.map 
    -nostartfiles
    -Wl,--gc-sections
)

#Post-build: convert to .bit
add_custom_command(TARGET firmware.elf POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O binary firmware.elf firmware.bin 
)

#C:/ST/CMake/bin/cmake -S . -B build   -G "Unix Makefiles"   -DCMAKE_TOOLCHAIN_FILE=arm-gcc-toolchain.cmake